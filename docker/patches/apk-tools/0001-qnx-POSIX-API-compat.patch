From d1c96e42b1207eaa49697b7e2cc5da4683d823a9 Mon Sep 17 00:00:00 2001
From: Leo Shen <i@szclsya.me>
Date: Tue, 8 Apr 2025 11:46:10 -0400
Subject: [PATCH 1/3] qnx: POSIX API compat

---
 libfetch/common.c        | 4 ++++
 portability/sys/random.h | 2 ++
 src/apk_xattr.h          | 8 ++++++++
 src/context.c            | 4 ++--
 src/database.c           | 2 +-
 src/io.c                 | 6 +++---
 6 files changed, 20 insertions(+), 6 deletions(-)

diff --git a/libfetch/common.c b/libfetch/common.c
index 0741b73..ef5afcc 100644
--- a/libfetch/common.c
+++ b/libfetch/common.c
@@ -219,8 +219,10 @@ fetch_connect(struct url *cache_url, struct url *url, int af, int verbose)
 	if (verbose)
 		fetch_info("connecting to %s:%d", url->host, url->port);
 
+#if !defined(__QNX__) || __QNX__ >= 800
 	if (fetchTimeout)
 		sock_flags |= SOCK_NONBLOCK;
+#endif
 
 	/* try to connect */
 	for (sd = -1, res = res0; res; sd = -1, res = res->ai_next) {
@@ -276,8 +278,10 @@ fetch_connect(struct url *cache_url, struct url *url, int af, int verbose)
 		return (NULL);
 	}
 
+#if !defined(__QNX__) || __QNX__ >= 800
 	if (sock_flags & SOCK_NONBLOCK)
 		fcntl(sd, F_SETFL, fcntl(sd, F_GETFL) & ~O_NONBLOCK);
+#endif
 
 	if ((conn = fetch_reopen(sd)) == NULL) {
 		fetch_syserr();
diff --git a/portability/sys/random.h b/portability/sys/random.h
index 02d5b1c..322ed73 100644
--- a/portability/sys/random.h
+++ b/portability/sys/random.h
@@ -1,4 +1,6 @@
+#ifndef __QNX__
 #include_next <sys/random.h>
+#endif
 #include <sys/types.h>
 
 #ifdef NEED_GETRANDOM
diff --git a/src/apk_xattr.h b/src/apk_xattr.h
index 595fe68..42f8f8a 100644
--- a/src/apk_xattr.h
+++ b/src/apk_xattr.h
@@ -1,11 +1,15 @@
 #pragma once
 #include <unistd.h>
+#ifndef __QNX__
 #include <sys/xattr.h>
+#endif
 
 static inline int apk_fsetxattr(int fd, const char *name, void *value, size_t size)
 {
 #ifdef __APPLE__
 	return fsetxattr(fd, name, value, size, 0, 0);
+#elif defined(__QNX__)
+	return 0;
 #else
 	return fsetxattr(fd, name, value, size, 0);
 #endif
@@ -15,6 +19,8 @@ static inline ssize_t apk_fgetxattr(int fd, const char *name, void *value, size_
 {
 #ifdef __APPLE__
 	return fgetxattr(fd, name, value, size, 0, 0);
+#elif defined(__QNX__)
+	return 0;
 #else
 	return fgetxattr(fd, name, value, size);
 #endif
@@ -24,6 +30,8 @@ static inline ssize_t apk_flistxattr(int fd, char *namebuf, size_t size)
 {
 #ifdef __APPLE__
 	return flistxattr(fd, namebuf, size, 0);
+#elif defined(__QNX__)
+	return 0;
 #else
 	return flistxattr(fd, namebuf, size);
 #endif
diff --git a/src/context.c b/src/context.c
index aea1f48..6789d7f 100644
--- a/src/context.c
+++ b/src/context.c
@@ -72,8 +72,8 @@ int apk_ctx_prepare(struct apk_ctx *ac)
 	}
 	if (!IS_ERR(ac->uvol) && (ac->uvol[0] != '/' || access(ac->uvol, X_OK) != 0))
 		ac->uvol = ERR_PTR(-APKE_UVOL_NOT_AVAILABLE);
-
-	ac->root_fd = openat(AT_FDCWD, ac->root, O_DIRECTORY | O_RDONLY | O_CLOEXEC);
+    // Thanks QNX
+	ac->root_fd = open(ac->root, O_RDONLY | O_CLOEXEC | O_DIRECTORY);
 	if (ac->root_fd < 0 && (ac->open_flags & APK_OPENF_CREATE)) {
 		mkdirat(AT_FDCWD, ac->root, 0755);
 		ac->root_fd = openat(AT_FDCWD, ac->root, O_DIRECTORY | O_RDONLY | O_CLOEXEC);
diff --git a/src/database.c b/src/database.c
index 1cabf59..45a73b8 100644
--- a/src/database.c
+++ b/src/database.c
@@ -1206,7 +1206,7 @@ static int apk_db_read_layer(struct apk_database *db, unsigned layer)
 	 * 4. scripts db
 	 */
 
-	fd = openat(db->root_fd, apk_db_layer_name(layer), O_RDONLY | O_CLOEXEC);
+	fd = openat(db->root_fd, apk_db_layer_name(layer), O_RDONLY | O_CLOEXEC | O_DIRECTORY);
 	if (fd < 0) return -errno;
 
 	if (!(flags & APK_OPENF_NO_WORLD)) {
diff --git a/src/io.c b/src/io.c
index 85d7d74..059f22a 100644
--- a/src/io.c
+++ b/src/io.c
@@ -1246,7 +1246,7 @@ static FILE *fopenat(int dirfd, const char *pathname)
 	FILE *f;
 	int fd;
 
-	fd = openat(dirfd, pathname, O_RDONLY | O_CLOEXEC);
+	fd = openat(dirfd, pathname, O_RDONLY | O_CLOEXEC | O_DIRECTORY);
 	if (fd < 0) return NULL;
 
 	f = fdopen(fd, "r");
@@ -1272,7 +1272,7 @@ static void idcache_load_users(int root_fd, struct apk_id_hash *idh)
 	do {
 #ifdef HAVE_FGETPWENT_R
 		fgetpwent_r(in, &pwent, buf, sizeof(buf), &pwd);
-#elif !defined(__APPLE__)
+#elif !defined(__APPLE__) && !defined(__QNX__)
 		pwd = fgetpwent(in);
 #else
 # warning macOS does not support nested /etc/passwd databases, using system one.
@@ -1305,7 +1305,7 @@ static void idcache_load_groups(int root_fd, struct apk_id_hash *idh)
 	do {
 #ifdef HAVE_FGETGRENT_R
 		fgetgrent_r(in, &grent, buf, sizeof(buf), &grp);
-#elif !defined(__APPLE__)
+#elif !defined(__APPLE__) && !defined(__QNX__)
 		grp = fgetgrent(in);
 #else
 # warning macOS does not support nested /etc/group databases, using system one.
-- 
2.34.1

