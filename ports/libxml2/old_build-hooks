if [[ -z $QNX_PROJECT_ROOT ]] then
DIST_BASE="${PWD}/libxml2"
else
DIST_BASE=$QNX_PROJECT_ROOT
fi


# Test Suite Setup
function setup_tests {
	# Check the programs being built upstream in their Makefile.
	# Format it better to form a usable array of program names to expect
	# Creates and packages tests for arch target
	TEST_BINS=$(grep -iA3 "check_programs =" Makefile | sed -e 's/check_PROGRAMS =/ /g' | sed -e 's/\$(EXEEXT)/ /g' | sed -e 's/ \\/ /g')
	echo "\n\n\n\n TEST_BINS: $TEST_BINS \n\n\n\n\n"

	TEST_DIR="libxml2-test-suite"

	TEST_INSTALL_DIR="${INSTALL_ROOT_nto}/${cpudir}/usr/share/test/libxml2"

	# Clean old tests
	rm -rf ${TEST_DIR}
	rm -rf "${TEST_INSTALL_DIR}"

	# Set up new ones
	# We have to pass .libs because that's where the test scripts expect tests to be
	mkdir -p "${TEST_DIR}/.libs"
	mkdir -p ${TEST_INSTALL_DIR}

	# Compile Tests and copy to test dir
	for i in ${TEST_BINS[@]};do
		make $i
		${CP_HOST} ".libs/${i}" "${TEST_DIR}/"
	done

	# Get additional tests packaged
	# some tests require testdso.so
	${CP_HOST} .libs/test*so "${TEST_DIR}/.libs/"
	cd ${TEST_DIR}
    ${CP_HOST} -r ../../../test/xmlconf .

	cd ../
	${CP_HOST} -r $DIST_BASE/test ${TEST_DIR}
	${CP_HOST} -r $DIST_BASE/result ${TEST_DIR}

	# Install this to SDP INSTALL DIR
	${CP_HOST} -r "${TEST_DIR}" "${TEST_INSTALL_DIR}/"

	# Cleanup
	rm -rf ${TEST_DIR}
}




function hook_preconfigure {
  # Cleanup and start from just GNUmakefile, also remove hidden dirs
  #DO NOT LET THIS RUN UNLESS YOU ARE SURE
  # /home/'s deleted: 1
  #rm -rf !("GNUmakefile")
  #rm -rf .*

  bash cd ${DIST_BASE} && ./autogen.sh
  #make -C $DIST_BASE distclean

  # prefix is the base path where files are installed in the target filesystem.  It is also
  # the base path for all architecture independent files
  configure_opts="${configure_opts} --srcdir=${DIST_BASE}"
  configure_opts="${configure_opts} --prefix=${INSTALL_ROOT_nto}/usr"
  configure_opts="${configure_opts} --exec-prefix=${INSTALL_ROOT_nto}/${cpudir}/usr"
  configure_opts="${configure_opts} --without-python"
}

# Override hook_configure
# Ensure that build-cfg doesn't error out for newer autoconf versions
# Also we want to run configure from current dir as opposed to default ../configure
function hook_configure {
   ${DIST_BASE}/configure \
        ${ac_host:+"--host=${ac_host}"} \
        ${ac_build:+"--build=${ac_build}"} \
        ${configure_opts} \
        ${ac_params:+${CC:+"CC=${CC}"}} \
        ${ac_params:+${CFLAGS:+"CFLAGS=${CFLAGS}"}} \
        ${ac_params:+${CPPFLAGS:+"CPPFLAGS=${CPPFLAGS}"}} \
        ${ac_params:+${LDFLAGS:+"LDFLAGS=${LDFLAGS}"}} \
        ${ac_params:+${CXX:+"CXX=${CXX}"}} \
        ${ac_params:+${CXXFLAGS:+"CXXFLAGS=-O2 ${CXXFLAGS}"}} \
        ${ac_params:+${ac_autotools:+${ac_autotools}}} \
        || Error "configure failed";
}

function hook_postmake {
    if [ "${make_cmds}" == "install" ] || [ "${make_cmds}" == "all" ] || [ "${make_cmds}" == "" ]; then
        setup_tests
    fi
}
