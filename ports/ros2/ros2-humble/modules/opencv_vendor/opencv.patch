diff --git a/3rdparty/carotene/CMakeLists.txt b/3rdparty/carotene/CMakeLists.txt
index 528fcf62e1..bcf4c5a686 100644
--- a/3rdparty/carotene/CMakeLists.txt
+++ b/3rdparty/carotene/CMakeLists.txt
@@ -13,7 +13,7 @@ file(GLOB_RECURSE carotene_sources RELATIVE "${CMAKE_CURRENT_LIST_DIR}" "${CAROT
 
 include_directories(${CAROTENE_INCLUDE_DIR})
 
-if(CMAKE_COMPILER_IS_GNUCC)
+if(CMAKE_COMPILER_IS_GNUCC AND NOT QNX)
     set(CMAKE_CXX_FLAGS "-fvisibility=hidden ${CMAKE_CXX_FLAGS}")
 
     # allow more inlines - these parameters improve performance for:
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4c0b3880fc..c5e7d60a1d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -594,7 +594,7 @@ endif()
 ocv_cmake_hook(POST_CMAKE_BUILD_OPTIONS)
 
 # --- Python Support ---
-if(NOT IOS)
+if(NOT IOS AND NOT QNX)
   include(cmake/OpenCVDetectPython.cmake)
 endif()
 
@@ -635,6 +635,8 @@ if(UNIX)
       set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} m pthread)
     elseif(EMSCRIPTEN)
       # no need to link to system libs with emscripten
+    elseif(QNX)
+      set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} m)
     else()
       set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} dl m pthread rt)
     endif()
diff --git a/cmake/checks/cpu_neon.cpp b/cmake/checks/cpu_neon.cpp
index c309e85049..5269ef1c8b 100644
--- a/cmake/checks/cpu_neon.cpp
+++ b/cmake/checks/cpu_neon.cpp
@@ -7,8 +7,12 @@
 #elif defined(__ARM_NEON__) || (defined (__ARM_NEON) && defined(__aarch64__))
 #  include <arm_neon.h>
 #  define CV_NEON 1
+#elif defined(__QNXNTO__)
+#  include <arm_neon.h>
+#  define CV_NEON 1
 #endif
 
+
 // MSVC 2019 bug. Details: https://github.com/opencv/opencv/pull/16027
 void test_aliased_type(const uint8x16_t& a) { }
 void test_aliased_type(const int8x16_t& a) { }
diff --git a/modules/core/src/opencl/runtime/opencl_core.cpp b/modules/core/src/opencl/runtime/opencl_core.cpp
index db2385a258..0ad183ea10 100644
--- a/modules/core/src/opencl/runtime/opencl_core.cpp
+++ b/modules/core/src/opencl/runtime/opencl_core.cpp
@@ -155,7 +155,7 @@ static void* WinGetProcAddress(const char* name)
 #define CV_CL_GET_PROC_ADDRESS(name) WinGetProcAddress(name)
 #endif // _WIN32
 
-#if defined(__linux__) || defined(__FreeBSD__)
+#if defined(__linux__) || defined(__FreeBSD__) || defined(__QNXNTO__)
 #include <dlfcn.h>
 #include <stdio.h>
 
diff --git a/modules/core/src/parallel.cpp b/modules/core/src/parallel.cpp
index 09ee3bb6de..746016e91b 100644
--- a/modules/core/src/parallel.cpp
+++ b/modules/core/src/parallel.cpp
@@ -68,6 +68,10 @@
     #endif
 #endif
 
+#if defined (__QNXNTO__)
+    #include <sys/syspage.h>
+#endif
+
 #if defined CV_CXX11
     #include <thread>
 #endif
@@ -946,13 +950,16 @@ int getNumberOfCPUs_()
 
 #endif
 
-#if !defined(_WIN32) && !defined(__APPLE__)
+#if !defined(_WIN32) && !defined(__APPLE__) && defined(_SC_NPROCESSORS_ONLN)
 
     static unsigned cpu_count_sysconf = (unsigned)sysconf( _SC_NPROCESSORS_ONLN );
     ncpus = minNonZero(ncpus, cpu_count_sysconf);
-
+#elif defined (__QNXNTO__)
+    static unsigned cpu_count_sysconf = _syspage_ptr->num_cpu;
+    ncpus = minNonZero(ncpus, cpu_count_sysconf);
 #endif
 
+
     return ncpus != 0 ? ncpus : 1;
 }
 
diff --git a/modules/core/src/system.cpp b/modules/core/src/system.cpp
index 872019dd9e..1ccbbf9760 100644
--- a/modules/core/src/system.cpp
+++ b/modules/core/src/system.cpp
@@ -45,6 +45,10 @@
 #include <iostream>
 #include <ostream>
 
+#ifdef __QNXNTO__
+    #include <unistd.h>
+#endif
+
 #include <opencv2/core/utils/configuration.private.hpp>
 #include <opencv2/core/utils/trace.private.hpp>
 
diff --git a/modules/videoio/src/backend_plugin.cpp b/modules/videoio/src/backend_plugin.cpp
index f73a9ad7ac..dc72c4aefa 100644
--- a/modules/videoio/src/backend_plugin.cpp
+++ b/modules/videoio/src/backend_plugin.cpp
@@ -21,7 +21,7 @@ using namespace std;
 
 #if defined(_WIN32)
 #include <windows.h>
-#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__) || defined(__QNXNTO__)
 #include <dlfcn.h>
 #endif
 
@@ -77,7 +77,7 @@ void* getSymbol_(LibHandle_t h, const char* symbolName)
 {
 #if defined(_WIN32)
     return (void*)GetProcAddress(h, symbolName);
-#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__) || defined(__QNXNTO__)
     return dlsym(h, symbolName);
 #endif
 }
@@ -91,7 +91,7 @@ LibHandle_t libraryLoad_(const FileSystemPath_t& filename)
 # else
     return LoadLibraryW(filename.c_str());
 #endif
-#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__) || defined(__QNXNTO__)
     return dlopen(filename.c_str(), RTLD_LAZY);
 #endif
 }
@@ -101,7 +101,7 @@ void libraryRelease_(LibHandle_t h)
 {
 #if defined(_WIN32)
     FreeLibrary(h);
-#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__GLIBC__) || defined(__QNXNTO__)
     dlclose(h);
 #endif
 }
