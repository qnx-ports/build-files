diff --git a/CMakeLists.txt b/CMakeLists.txt
index badc1b4..a48595e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2,54 +2,37 @@ cmake_minimum_required(VERSION 3.5)
 
 project(yaml_cpp_vendor)
 
-option(FORCE_BUILD_VENDOR_PKG
-  "Build yaml-cpp from source, even if system-installed package is available"
-  OFF)
-
 find_package(ament_cmake REQUIRED)
 
-# Avoid DOWNLOAD_EXTRACT_TIMESTAMP warning for CMake >= 3.24
-if (POLICY CMP0135)
-  cmake_policy(SET CMP0135 OLD)
-endif()
+set(PACKAGE_VERSION "1.0.0")
 
 macro(build_yaml_cpp)
+
   set(extra_cmake_args)
 
   if(DEFINED CMAKE_BUILD_TYPE)
     list(APPEND extra_cmake_args -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})
   endif()
-  if(NOT WIN32)
-    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -w")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -w")
-  endif()
 
+  list(APPEND extra_cmake_args "-DCMAKE_BUILD_TYPE=Release")
   list(APPEND extra_cmake_args "-DYAML_CPP_BUILD_TESTS=OFF")
   list(APPEND extra_cmake_args "-DYAML_CPP_BUILD_TOOLS=OFF")
   list(APPEND extra_cmake_args "-DYAML_CPP_BUILD_CONTRIB=OFF")
   list(APPEND extra_cmake_args "-DYAML_BUILD_SHARED_LIBS=ON")
-  list(APPEND extra_cmake_args "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
-  list(APPEND extra_cmake_args "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")
-
-  if(WIN32 AND NOT ${CMAKE_VERBOSE_MAKEFILE})
-    set(should_log ON)  # prevent warnings in Windows CI
-  else()
-    set(should_log OFF)
-  endif()
+  list(APPEND extra_cmake_args "-DBUILD_SHARED_LIBS=ON")
 
   if(DEFINED CMAKE_TOOLCHAIN_FILE)
     list(APPEND extra_cmake_args "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
   endif()
 
   include(ExternalProject)
-  ExternalProject_Add(yaml_cpp-0.7.0
-    URL https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.7.0.tar.gz
-    URL_MD5 74d646a3cc1b5d519829441db96744f0
+  ExternalProject_Add(yaml_cpp
+    GIT_REPOSITORY https://github.com/jbeder/yaml-cpp.git
+    GIT_TAG 9a3624205e8774953ef18f57067b3426c1c5ada6
     TIMEOUT 600
-    LOG_CONFIGURE ${should_log}
-    LOG_BUILD ${should_log}
+    PATCH_COMMAND git apply ${CMAKE_CURRENT_SOURCE_DIR}/yaml-cpp.patch
     CMAKE_ARGS
-      -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/yaml_cpp_install
+    -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/yaml_cpp_install
       ${extra_cmake_args}
       -Wno-dev
   )
@@ -59,22 +42,19 @@ macro(build_yaml_cpp)
     DIRECTORY
       ${CMAKE_CURRENT_BINARY_DIR}/yaml_cpp_install/
     DESTINATION
-      ${CMAKE_INSTALL_PREFIX}/opt/yaml_cpp_vendor
-    USE_SOURCE_PERMISSIONS
+      ${CMAKE_INSTALL_PREFIX}
   )
+
 endmacro()
 
-# NO_CMAKE_PACKAGE_REGISTRY used to avoid finding the library downloaded in WORKSPACE B
-# when building workspace A.
-# This should only find a system installed yaml-cpp and thus the environment hook isn't needed.
-find_package(yaml-cpp QUIET NO_CMAKE_PACKAGE_REGISTRY)
-if(FORCE_BUILD_VENDOR_PKG OR NOT yaml-cpp_FOUND)
+find_package(yaml_cpp QUIET)
+if(NOT yaml_cpp_FOUND)
   build_yaml_cpp()
 
   if(WIN32)
     ament_environment_hooks(env_hook/yaml_cpp_vendor_library_path.bat)
     set(ENV_VAR_NAME "PATH")
-    set(ENV_VAR_VALUE "opt\\yaml_cpp_vendor\\bin")
+    set(ENV_VAR_VALUE "bin")
   else()
     ament_environment_hooks(env_hook/yaml_cpp_vendor_library_path.sh)
     if(APPLE)
@@ -82,13 +62,11 @@ if(FORCE_BUILD_VENDOR_PKG OR NOT yaml-cpp_FOUND)
     else()
       set(ENV_VAR_NAME "LD_LIBRARY_PATH")
     endif()
-    set(ENV_VAR_VALUE "opt/yaml_cpp_vendor/lib")
+    set(ENV_VAR_VALUE "lib")
   endif()
   ament_environment_hooks(env_hook/yaml_cpp_vendor_library_path.dsv.in)
 else()
-  message(STATUS "Found yaml-cpp ${yaml-cpp_VERSION} in path ${yaml-cpp_CONFIG}")
+  message(STATUS "Found yaml_cpp ${yaml_cpp_VERSION} in path ${yaml_cpp_CONFIG}")
 endif()
 
-ament_package(
-  CONFIG_EXTRAS "yaml_cpp_vendor-extras.cmake.in"
-)
+ament_package(CONFIG_EXTRAS "yaml_cpp_vendor-extras.cmake.in")
diff --git a/yaml-cpp.patch b/yaml-cpp.patch
new file mode 100644
index 0000000..6c13d71
--- /dev/null
+++ b/yaml-cpp.patch
@@ -0,0 +1,16 @@
+diff --git a/include/yaml-cpp/node/iterator.h b/include/yaml-cpp/node/iterator.h
+index 366a9c8..eb76652 100644
+--- a/include/yaml-cpp/node/iterator.h
++++ b/include/yaml-cpp/node/iterator.h
+@@ -15,6 +15,11 @@
+ #include <utility>
+ #include <vector>
+ 
++// yaml-cpp fails to build against LLVM libc++ and builds successfully with libstdc++
++// This workaround allows the build to succeed using libc++.
++// This temp solution was mentioned https://github.com/jbeder/yaml-cpp/issues/742
++static_assert(std::is_constructible<YAML::Node, const YAML::Node&>::value, "Node must be copy constructable");
++
+ namespace YAML {
+ namespace detail {
+ struct iterator_value : public Node, std::pair<Node, Node> {
