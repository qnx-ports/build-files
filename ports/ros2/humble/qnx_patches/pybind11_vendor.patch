diff --git a/CMakeLists.txt b/CMakeLists.txt
index 309a628..0e6b5a3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -8,6 +8,10 @@ option(FORCE_BUILD_VENDOR_PKG
   "Build pybind11 from source, even if system-installed package is available"
   OFF)
 
+if(QNX)
+  set(FORCE_BUILD_VENDOR_PKG ON)
+endif()
+
 if(NOT FORCE_BUILD_VENDOR_PKG)
   find_package(pybind11 QUIET)
 endif()
@@ -53,7 +57,9 @@ macro(build_pybind11)
   list(APPEND extra_cmake_args "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")
 
   include(ExternalProject)
-  ExternalProject_Add(pybind11-2.9.1
+
+  if(QNX)
+    ExternalProject_Add(pybind11-2.9.1
     GIT_REPOSITORY https://github.com/pybind/pybind11.git
     GIT_TAG ffa346860b306c9bbfb341aed9c14c067751feb8  # v2.9.1
     GIT_CONFIG advice.detachedHead=false
@@ -75,7 +81,8 @@ macro(build_pybind11)
     PATCH_COMMAND
       ${CMAKE_COMMAND} -E chdir <SOURCE_DIR> git apply -p1 --ignore-space-change --whitespace=nowarn
         ${CMAKE_CURRENT_SOURCE_DIR}/pybind11-2.9.1-fix-windows-debug.patch
-  )
+    )
+  endif()
 
   # The external project will install to the build folder, but we'll install that on make install.
   install(
diff --git a/pybind11-2.9.1-fix-windows-debug.patch b/pybind11-2.9.1-fix-windows-debug.patch
index d1f3967..27641ab 100644
--- a/pybind11-2.9.1-fix-windows-debug.patch
+++ b/pybind11-2.9.1-fix-windows-debug.patch
@@ -1,15 +1,3 @@
-From 245664b2d3863cc4e6ae635bb79c0ceb819394ab Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Steven!=20Ragnar=C3=B6k?= <steven@nuclearsandwich.com>
-Date: Wed, 13 Apr 2022 12:52:17 -0700
-Subject: [PATCH] Create changes to be patched.
-
----
- CMakeLists.txt                   | 8 ++++++++
- include/pybind11/detail/common.h | 2 +-
- tools/pybind11NewTools.cmake     | 2 +-
- tools/pybind11Tools.cmake        | 2 +-
- 4 files changed, 11 insertions(+), 3 deletions(-)
-
 diff --git a/CMakeLists.txt b/CMakeLists.txt
 index 3787982c..f0a6e998 100644
 --- a/CMakeLists.txt
@@ -42,8 +30,23 @@ index 5c59b414..01f4a416 100644
  // Workaround for a VS 2022 issue.
  // NOTE: This workaround knowingly violates the Python.h include order requirement:
  // https://docs.python.org/3/c-api/intro.html#include-files
+diff --git a/include/pybind11/detail/type_caster_base.h b/include/pybind11/detail/type_caster_base.h
+index 48e218b2..a4caedf2 100644
+--- a/include/pybind11/detail/type_caster_base.h
++++ b/include/pybind11/detail/type_caster_base.h
+@@ -25,6 +25,10 @@
+ #include <utility>
+ #include <vector>
+ 
++#ifdef __QNX__
++#include <internal/pycore_frame.h>
++#endif
++
+ PYBIND11_NAMESPACE_BEGIN(PYBIND11_NAMESPACE)
+ PYBIND11_NAMESPACE_BEGIN(detail)
+ 
 diff --git a/tools/pybind11NewTools.cmake b/tools/pybind11NewTools.cmake
-index 0b4e21cc..74a110df 100644
+index 0b4e21cc..9e246864 100644
 --- a/tools/pybind11NewTools.cmake
 +++ b/tools/pybind11NewTools.cmake
 @@ -134,7 +134,7 @@ if(PYTHON_IS_DEBUG)
@@ -55,6 +58,15 @@ index 0b4e21cc..74a110df 100644
  endif()
  
  # Check on every access - since Python2 and Python3 could have been used - do nothing in that case.
+@@ -204,7 +204,7 @@ function(pybind11_add_module target_name)
+   if("${_Python}" STREQUAL "Python")
+     python_add_library(${target_name} ${lib_type} ${ARG_UNPARSED_ARGUMENTS})
+   elseif("${_Python}" STREQUAL "Python3")
+-    python3_add_library(${target_name} ${lib_type} ${ARG_UNPARSED_ARGUMENTS})
++    add_library(${target_name} ${lib_type} ${ARG_UNPARSED_ARGUMENTS})
+   elseif("${_Python}" STREQUAL "Python2")
+     python2_add_library(${target_name} ${lib_type} ${ARG_UNPARSED_ARGUMENTS})
+   else()
 diff --git a/tools/pybind11Tools.cmake b/tools/pybind11Tools.cmake
 index c255e5cf..0fa80be8 100644
 --- a/tools/pybind11Tools.cmake
@@ -68,6 +80,3 @@ index c255e5cf..0fa80be8 100644
  endif()
  
  set_property(
--- 
-2.35.2
-
