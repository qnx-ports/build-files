From 4fb47233eab077b078783e1ea01ff133ae6271b7 Mon Sep 17 00:00:00 2001
From: Yongxin Dai <yodai@qnx.com>
Date: Wed, 2 Jul 2025 09:57:47 -0400
Subject: =?UTF-8?q?[QNX=20LOCAL=20PATCH]=20Fix=20the=20issue=20of=20templa?=
 =?UTF-8?q?te=20argument=20type=20deduction=20for=0ASDP7?=

---
 core/fdrm/fx_crypt_sha.cpp                   |  33 ++++
 core/fpdfapi/font/cpdf_simplefont.cpp        |   5 +
 core/fpdfapi/page/cpdf_colorspace.cpp        |  39 +++++
 core/fpdfapi/parser/cpdf_object_unittest.cpp | 153 +++++++++++++++++++
 core/fpdfapi/parser/cpdf_parser_unittest.cpp |  63 ++++++++
 core/fpdfdoc/cpdf_action.cpp                 |  24 +++
 core/fpdfdoc/cpdf_dest.cpp                   |  11 ++
 core/fpdfdoc/cpdf_pagelabel.cpp              |  11 ++
 core/fpdfdoc/cpvt_variabletext.cpp           |   6 +
 core/fxcodec/gif/cfx_gifcontext_unittest.cpp |   5 +
 core/fxcodec/jbig2/JBig2_ArithDecoder.cpp    |  21 +++
 core/fxcodec/jbig2/JBig2_ArithIntDecoder.cpp |  12 ++
 core/fxge/android/cfpf_skiafontmgr.cpp       |  38 +++++
 core/fxge/cfx_face.cpp                       |  46 ++++++
 core/fxge/cfx_folderfontinfo.cpp             |  18 +++
 core/fxge/linux/fx_linux_impl.cpp            |  10 ++
 core/fxge/qnx/fx_qnx_impl.cpp                |  10 ++
 core/fxge/win32/cwin32_platform.cpp          |  18 +++
 fpdfsdk/fpdf_annot.cpp                       |   5 +
 fpdfsdk/fpdf_text_embeddertest.cpp           |  84 ++++++++++
 fxbarcode/oned/BC_OnedCodaBarWriter.cpp      |  12 ++
 fxbarcode/oned/BC_OnedCode39Writer.cpp       |  23 +++
 fxbarcode/qrcode/BC_QRCoderEncoder.cpp       |   8 +
 xfa/fgas/crt/cfgas_stringformatter.cpp       |  19 +++
 xfa/fgas/font/cfgas_fontmgr.cpp              |  68 +++++++++
 xfa/fgas/font/cfgas_pdffontmgr.cpp           |   9 ++
 xfa/fgas/graphics/cfgas_gegraphics.cpp       |  66 ++++++++
 xfa/fgas/layout/cfgas_char.cpp               |  11 ++
 xfa/fgas/layout/fgas_arabic.cpp              | 107 +++++++++++++
 29 files changed, 935 insertions(+)

diff --git a/core/fdrm/fx_crypt_sha.cpp b/core/fdrm/fx_crypt_sha.cpp
index 7e0f71792..da40ae1eb 100644
--- a/core/fdrm/fx_crypt_sha.cpp
+++ b/core/fdrm/fx_crypt_sha.cpp
@@ -265,6 +265,7 @@ const uint8_t kSha384Padding[128] = {
     0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 };
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto constants = fxcrt::ToArray<const uint64_t>({
     0x428a2f98d728ae22ULL, 0x7137449123ef65cdULL, 0xb5c0fbcfec4d3b2fULL,
     0xe9b5dba58189dbbcULL, 0x3956c25bf348b538ULL, 0x59f111f1b605d019ULL,
@@ -294,6 +295,38 @@ constexpr auto constants = fxcrt::ToArray<const uint64_t>({
     0x431d67c49c100d4cULL, 0x4cc5d4becb3e42b6ULL, 0x597f299cfc657e2aULL,
     0x5fcb6fab3ad6faecULL, 0x6c44198c4a475817ULL,
 });
+#else
+constexpr uint64_t a268[] = {
+    0x428a2f98d728ae22ULL, 0x7137449123ef65cdULL, 0xb5c0fbcfec4d3b2fULL,
+    0xe9b5dba58189dbbcULL, 0x3956c25bf348b538ULL, 0x59f111f1b605d019ULL,
+    0x923f82a4af194f9bULL, 0xab1c5ed5da6d8118ULL, 0xd807aa98a3030242ULL,
+    0x12835b0145706fbeULL, 0x243185be4ee4b28cULL, 0x550c7dc3d5ffb4e2ULL,
+    0x72be5d74f27b896fULL, 0x80deb1fe3b1696b1ULL, 0x9bdc06a725c71235ULL,
+    0xc19bf174cf692694ULL, 0xe49b69c19ef14ad2ULL, 0xefbe4786384f25e3ULL,
+    0x0fc19dc68b8cd5b5ULL, 0x240ca1cc77ac9c65ULL, 0x2de92c6f592b0275ULL,
+    0x4a7484aa6ea6e483ULL, 0x5cb0a9dcbd41fbd4ULL, 0x76f988da831153b5ULL,
+    0x983e5152ee66dfabULL, 0xa831c66d2db43210ULL, 0xb00327c898fb213fULL,
+    0xbf597fc7beef0ee4ULL, 0xc6e00bf33da88fc2ULL, 0xd5a79147930aa725ULL,
+    0x06ca6351e003826fULL, 0x142929670a0e6e70ULL, 0x27b70a8546d22ffcULL,
+    0x2e1b21385c26c926ULL, 0x4d2c6dfc5ac42aedULL, 0x53380d139d95b3dfULL,
+    0x650a73548baf63deULL, 0x766a0abb3c77b2a8ULL, 0x81c2c92e47edaee6ULL,
+    0x92722c851482353bULL, 0xa2bfe8a14cf10364ULL, 0xa81a664bbc423001ULL,
+    0xc24b8b70d0f89791ULL, 0xc76c51a30654be30ULL, 0xd192e819d6ef5218ULL,
+    0xd69906245565a910ULL, 0xf40e35855771202aULL, 0x106aa07032bbd1b8ULL,
+    0x19a4c116b8d2d0c8ULL, 0x1e376c085141ab53ULL, 0x2748774cdf8eeb99ULL,
+    0x34b0bcb5e19b48a8ULL, 0x391c0cb3c5c95a63ULL, 0x4ed8aa4ae3418acbULL,
+    0x5b9cca4f7763e373ULL, 0x682e6ff3d6b2b8a3ULL, 0x748f82ee5defb2fcULL,
+    0x78a5636f43172f60ULL, 0x84c87814a1f0ab72ULL, 0x8cc702081a6439ecULL,
+    0x90befffa23631e28ULL, 0xa4506cebde82bde9ULL, 0xbef9a3f7b2c67915ULL,
+    0xc67178f2e372532bULL, 0xca273eceea26619cULL, 0xd186b8c721c0c207ULL,
+    0xeada7dd6cde0eb1eULL, 0xf57d4f7fee6ed178ULL, 0x06f067aa72176fbaULL,
+    0x0a637dc5a2c898a6ULL, 0x113f9804bef90daeULL, 0x1b710b35131c471bULL,
+    0x28db77f523047d84ULL, 0x32caab7b40c72493ULL, 0x3c9ebe0a15c9bebcULL,
+    0x431d67c49c100d4cULL, 0x4cc5d4becb3e42b6ULL, 0x597f299cfc657e2aULL,
+    0x5fcb6fab3ad6faecULL, 0x6c44198c4a475817ULL,
+};
+constexpr auto constants = fxcrt::ToArray<const uint64_t>(a268);
+#endif
 
 void sha384_process(CRYPT_sha2_context* ctx,
                     pdfium::span<const uint8_t, 128> data) {
diff --git a/core/fpdfapi/font/cpdf_simplefont.cpp b/core/fpdfapi/font/cpdf_simplefont.cpp
index 4572eff52..a7253ddfd 100644
--- a/core/fpdfapi/font/cpdf_simplefont.cpp
+++ b/core/fpdfapi/font/cpdf_simplefont.cpp
@@ -243,9 +243,14 @@ bool CPDF_SimpleFont::LoadCommon() {
   }
 
   if (FontStyleIsAllCaps(m_Flags)) {
+#if !defined(__QNX__) || __QNX__ >= 800
     static const auto kLowercases =
         fxcrt::ToArray<std::pair<const uint8_t, const uint8_t>>(
             {{'a', 'z'}, {0xe0, 0xf6}, {0xf8, 0xfd}});
+#else
+    const std::pair<const uint8_t, const uint8_t> a246[] = {{'a', 'z'}, {0xe0, 0xf6}, {0xf8, 0xfd}};
+    static const auto kLowercases =        fxcrt::ToArray<std::pair<const uint8_t, const uint8_t>>(a246);
+#endif
     for (const auto& lower : kLowercases) {
       for (int i = lower.first; i <= lower.second; ++i) {
         if (m_GlyphIndex[i] != 0xffff && m_pFontFile) {
diff --git a/core/fpdfapi/page/cpdf_colorspace.cpp b/core/fpdfapi/page/cpdf_colorspace.cpp
index a2025aba5..be967608d 100644
--- a/core/fpdfapi/page/cpdf_colorspace.cpp
+++ b/core/fpdfapi/page/cpdf_colorspace.cpp
@@ -51,6 +51,7 @@
 
 namespace {
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kSRGBSamples1 = fxcrt::ToArray<const uint8_t>({
     0,   3,   6,   10,  13,  15,  18,  20,  22,  23,  25,  27,  28,  30,  31,
     32,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,
@@ -66,7 +67,26 @@ constexpr auto kSRGBSamples1 = fxcrt::ToArray<const uint8_t>({
     112, 112, 112, 113, 113, 113, 114, 114, 114, 115, 115, 115, 115, 116, 116,
     116, 117, 117, 117, 118, 118, 118, 118, 119, 119, 119, 120,
 });
+#else
+constexpr uint8_t a54[] = {
+    0,   3,   6,   10,  13,  15,  18,  20,  22,  23,  25,  27,  28,  30,  31,
+    32,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,
+    48,  49,  49,  50,  51,  52,  53,  53,  54,  55,  56,  56,  57,  58,  58,
+    59,  60,  61,  61,  62,  62,  63,  64,  64,  65,  66,  66,  67,  67,  68,
+    68,  69,  70,  70,  71,  71,  72,  72,  73,  73,  74,  74,  75,  76,  76,
+    77,  77,  78,  78,  79,  79,  79,  80,  80,  81,  81,  82,  82,  83,  83,
+    84,  84,  85,  85,  85,  86,  86,  87,  87,  88,  88,  88,  89,  89,  90,
+    90,  91,  91,  91,  92,  92,  93,  93,  93,  94,  94,  95,  95,  95,  96,
+    96,  97,  97,  97,  98,  98,  98,  99,  99,  99,  100, 100, 101, 101, 101,
+    102, 102, 102, 103, 103, 103, 104, 104, 104, 105, 105, 106, 106, 106, 107,
+    107, 107, 108, 108, 108, 109, 109, 109, 110, 110, 110, 110, 111, 111, 111,
+    112, 112, 112, 113, 113, 113, 114, 114, 114, 115, 115, 115, 115, 116, 116,
+    116, 117, 117, 117, 118, 118, 118, 118, 119, 119, 119, 120,
+};
+constexpr auto kSRGBSamples1 = fxcrt::ToArray<const uint8_t>(a54);
+#endif
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kSRGBSamples2 = fxcrt::ToArray<const uint8_t>({
     120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
     136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 148, 149,
@@ -83,6 +103,25 @@ constexpr auto kSRGBSamples2 = fxcrt::ToArray<const uint8_t>({
     243, 243, 244, 244, 245, 245, 246, 246, 246, 247, 247, 248, 248, 249, 249,
     250, 250, 251, 251, 251, 252, 252, 253, 253, 254, 254, 255, 255,
 });
+#else
+constexpr uint8_t a70[] = {
+    120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
+    136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 148, 149,
+    150, 151, 152, 153, 154, 155, 155, 156, 157, 158, 159, 159, 160, 161, 162,
+    163, 163, 164, 165, 166, 167, 167, 168, 169, 170, 170, 171, 172, 173, 173,
+    174, 175, 175, 176, 177, 178, 178, 179, 180, 180, 181, 182, 182, 183, 184,
+    185, 185, 186, 187, 187, 188, 189, 189, 190, 190, 191, 192, 192, 193, 194,
+    194, 195, 196, 196, 197, 197, 198, 199, 199, 200, 200, 201, 202, 202, 203,
+    203, 204, 205, 205, 206, 206, 207, 208, 208, 209, 209, 210, 210, 211, 212,
+    212, 213, 213, 214, 214, 215, 215, 216, 216, 217, 218, 218, 219, 219, 220,
+    220, 221, 221, 222, 222, 223, 223, 224, 224, 225, 226, 226, 227, 227, 228,
+    228, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 234, 234, 235, 235,
+    236, 236, 237, 237, 238, 238, 238, 239, 239, 240, 240, 241, 241, 242, 242,
+    243, 243, 244, 244, 245, 245, 246, 246, 246, 247, 247, 248, 248, 249, 249,
+    250, 250, 251, 251, 251, 252, 252, 253, 253, 254, 254, 255, 255,
+};
+constexpr auto kSRGBSamples2 = fxcrt::ToArray<const uint8_t>(a70);
+#endif
 
 constexpr size_t kBlackWhitePointCount = 3;
 
diff --git a/core/fpdfapi/parser/cpdf_object_unittest.cpp b/core/fpdfapi/parser/cpdf_object_unittest.cpp
index c9bb93af5..23bc92d28 100644
--- a/core/fpdfapi/parser/cpdf_object_unittest.cpp
+++ b/core/fpdfapi/parser/cpdf_object_unittest.cpp
@@ -199,26 +199,43 @@ class PDFObjectsTest : public testing::Test {
 };
 
 TEST_F(PDFObjectsTest, GetString) {
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto direct_obj_results = fxcrt::ToArray<const char*>(
       {"false", "true", "1245", "9.0034504", "A simple test", "\t\n", "space",
        "", "", "", ""});
+#else
+  constexpr const char* a202[] = {"false", "true", "1245", "9.0034504", "A simple test", "\t\n", "space",
+       "", "", "", ""};
+  constexpr auto direct_obj_results = fxcrt::ToArray<const char*>(a202);
+#endif
   // Check for direct objects.
   for (size_t i = 0; i < m_DirectObjs.size(); ++i) {
     EXPECT_EQ(direct_obj_results[i], m_DirectObjs[i]->GetString());
   }
 
   // Check indirect references.
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto indirect_obj_results = fxcrt::ToArray<const char*>(
       {"true", "1245", "\t\n", "space", "", "", ""});
+#else
+  constexpr const char* a211[] = {"true", "1245", "\t\n", "space", "", "", ""};
+  constexpr auto indirect_obj_results = fxcrt::ToArray<const char*>(a211);
+#endif
   for (size_t i = 0; i < m_RefObjs.size(); ++i) {
     EXPECT_EQ(indirect_obj_results[i], m_RefObjs[i]->GetString());
   }
 }
 
 TEST_F(PDFObjectsTest, GetUnicodeText) {
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto direct_obj_results = fxcrt::ToArray<const wchar_t*>(
       {L"", L"", L"", L"", L"A simple test", L"\t\n", L"space", L"", L"",
        L"abcdefghijklmnopqrstuvwxyz", L""});
+#else
+  constexpr wchar_t* a219[] = {L"", L"", L"", L"", L"A simple test", L"\t\n", L"space", L"", L"",
+       L"abcdefghijklmnopqrstuvwxyz", L""};
+  constexpr auto direct_obj_results = fxcrt::ToArray<const wchar_t*>(a219);
+#endif
   // Check for direct objects.
   for (size_t i = 0; i < m_DirectObjs.size(); ++i) {
     EXPECT_EQ(direct_obj_results[i], m_DirectObjs[i]->GetUnicodeText());
@@ -231,48 +248,80 @@ TEST_F(PDFObjectsTest, GetUnicodeText) {
 }
 
 TEST_F(PDFObjectsTest, GetNumber) {
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto direct_obj_results =
       fxcrt::ToArray<const float>({0, 0, 1245, 9.00345f, 0, 0, 0, 0, 0, 0, 0});
+#else
+  constexpr float a234[] = {0, 0, 1245, 9.00345f, 0, 0, 0, 0, 0, 0, 0};
+  constexpr auto direct_obj_results =      fxcrt::ToArray<const float>(a234);
+#endif
   // Check for direct objects.
   for (size_t i = 0; i < m_DirectObjs.size(); ++i) {
     EXPECT_EQ(direct_obj_results[i], m_DirectObjs[i]->GetNumber());
   }
 
   // Check indirect references.
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto indirect_obj_results =
       fxcrt::ToArray<const float>({0, 1245, 0, 0, 0, 0, 0});
+#else
+  constexpr float a242[] = {0, 1245, 0, 0, 0, 0, 0};
+  constexpr auto indirect_obj_results =      fxcrt::ToArray<const float>(a242);
+#endif
   for (size_t i = 0; i < m_RefObjs.size(); ++i)
     EXPECT_EQ(indirect_obj_results[i], m_RefObjs[i]->GetNumber());
 }
 
 TEST_F(PDFObjectsTest, GetInteger) {
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto direct_obj_results =
       fxcrt::ToArray<const int>({0, 1, 1245, 9, 0, 0, 0, 0, 0, 0, 0});
+#else
+  constexpr int a249[] = {0, 1, 1245, 9, 0, 0, 0, 0, 0, 0, 0};
+  constexpr auto direct_obj_results =      fxcrt::ToArray<const int>(a249);
+#endif
   // Check for direct objects.
   for (size_t i = 0; i < m_DirectObjs.size(); ++i) {
     EXPECT_EQ(direct_obj_results[i], m_DirectObjs[i]->GetInteger());
   }
 
   // Check indirect references.
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto indirect_obj_results =
       fxcrt::ToArray<const int>({1, 1245, 0, 0, 0, 0, 0});
+#else
+  constexpr int a257[] = {1, 1245, 0, 0, 0, 0, 0};
+  constexpr auto indirect_obj_results =      fxcrt::ToArray<const int>(a257);
+#endif
   for (size_t i = 0; i < m_RefObjs.size(); ++i) {
     EXPECT_EQ(indirect_obj_results[i], m_RefObjs[i]->GetInteger());
   }
 }
 
 TEST_F(PDFObjectsTest, GetDict) {
+#if !defined(__QNX__) || __QNX__ >= 800
   const auto direct_obj_results = fxcrt::ToArray<const CPDF_Dictionary*>(
       {nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
        m_DictObj.Get(), m_StreamDictObj.Get(), nullptr});
+#else
+  const CPDF_Dictionary* a265[] = {nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
+       m_DictObj.Get(), m_StreamDictObj.Get(), nullptr};
+  const auto direct_obj_results = fxcrt::ToArray<const CPDF_Dictionary*>(a265);
+#endif
   // Check for direct objects.
   for (size_t i = 0; i < m_DirectObjs.size(); ++i) {
     EXPECT_EQ(direct_obj_results[i], m_DirectObjs[i]->GetDict());
   }
 
+#if !defined(__QNX__) || __QNX__ >= 800
   const auto indirect_obj_results = fxcrt::ToArray<const CPDF_Dictionary*>(
       {nullptr, nullptr, nullptr, nullptr, nullptr, m_DictObj.Get(),
        m_StreamDictObj.Get()});
+#else
+  const CPDF_Dictionary* a273[] = {nullptr, nullptr, nullptr, nullptr, nullptr, m_DictObj.Get(),
+       m_StreamDictObj.Get()};
+  const auto indirect_obj_results = fxcrt::ToArray<const CPDF_Dictionary*>(a273);
+#endif
   // Check indirect references.
   for (size_t i = 0; i < m_RefObjs.size(); ++i) {
     EXPECT_TRUE(Equal(indirect_obj_results[i], m_RefObjs[i]->GetDict().Get()));
@@ -297,9 +346,15 @@ TEST_F(PDFObjectsTest, GetNameFor) {
 }
 
 TEST_F(PDFObjectsTest, GetArray) {
+#if !defined(__QNX__) || __QNX__ >= 800
   const auto direct_obj_results = fxcrt::ToArray<const CPDF_Array*>(
       {nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
        m_ArrayObj.Get(), nullptr, nullptr, nullptr});
+#else
+  const CPDF_Array* a300[] = {nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
+       m_ArrayObj.Get(), nullptr, nullptr, nullptr};
+  const auto direct_obj_results = fxcrt::ToArray<const CPDF_Array*>(a300);
+#endif
   // Check for direct objects.
   for (size_t i = 0; i < m_DirectObjs.size(); ++i) {
     EXPECT_EQ(direct_obj_results[i], m_DirectObjs[i]->AsArray());
@@ -347,10 +402,20 @@ TEST_F(PDFObjectsTest, GetDirect) {
 
 TEST_F(PDFObjectsTest, SetString) {
   // Check for direct objects.
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto set_values = fxcrt::ToArray<const char*>(
       {"true", "fake", "3.125f", "097", "changed", "", "NewName"});
+#else
+  constexpr const char* a350[] = {"true", "fake", "3.125f", "097", "changed", "", "NewName"};
+  constexpr auto set_values = fxcrt::ToArray<const char*>(a350);
+#endif
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto expected = fxcrt::ToArray<const char*>(
       {"true", "false", "3.125", "97", "changed", "", "NewName"});
+#else
+  constexpr const char* a352[] = {"true", "false", "3.125", "97", "changed", "", "NewName"};
+  constexpr auto expected = fxcrt::ToArray<const char*>(a352);
+#endif
   for (size_t i = 0; i < std::size(set_values); ++i) {
     m_DirectObjs[i]->SetString(set_values[i]);
     EXPECT_EQ(expected[i], m_DirectObjs[i]->GetString());
@@ -456,12 +521,22 @@ TEST_F(PDFObjectsTest, KeyForCache) {
 
 TEST(PDFArrayTest, GetMatrix) {
   using Row = std::array<float, 6>;
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto elems = fxcrt::ToArray<const Row>({
       {{0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f}},
       {{1, 2, 3, 4, 5, 6}},
       {{2.3f, 4.05f, 3, -2, -3, 0.0f}},
       {{0.05f, 0.1f, 0.56f, 0.67f, 1.34f, 99.9f}},
   });
+#else
+  constexpr Row a459[] = {
+      {{0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f}},
+      {{1, 2, 3, 4, 5, 6}},
+      {{2.3f, 4.05f, 3, -2, -3, 0.0f}},
+      {{0.05f, 0.1f, 0.56f, 0.67f, 1.34f, 99.9f}},
+  };
+  constexpr auto elems = fxcrt::ToArray<const Row>(a459);
+#endif
   for (const auto& elem : elems) {
     auto arr = pdfium::MakeRetain<CPDF_Array>();
     for (float f : elem) {
@@ -475,12 +550,22 @@ TEST(PDFArrayTest, GetMatrix) {
 
 TEST(PDFArrayTest, GetRect) {
   using Row = std::array<float, 4>;
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto elems = fxcrt::ToArray<const Row>({
       {{0.0f, 0.0f, 0.0f, 0.0f}},
       {{1, 2, 5, 6}},
       {{2.3f, 4.05f, -3, 0.0f}},
       {{0.05f, 0.1f, 1.34f, 99.9f}},
   });
+#else
+  constexpr Row a478[] = {
+      {{0.0f, 0.0f, 0.0f, 0.0f}},
+      {{1, 2, 5, 6}},
+      {{2.3f, 4.05f, -3, 0.0f}},
+      {{0.05f, 0.1f, 1.34f, 99.9f}},
+  };
+  constexpr auto elems = fxcrt::ToArray<const Row>(a478);
+#endif
   for (const auto& elem : elems) {
     auto arr = pdfium::MakeRetain<CPDF_Array>();
     for (float f : elem) {
@@ -495,8 +580,13 @@ TEST(PDFArrayTest, GetRect) {
 TEST(PDFArrayTest, GetTypeAt) {
   {
     // Boolean array.
+#if !defined(__QNX__) || __QNX__ >= 800
     constexpr auto vals =
         fxcrt::ToArray<const bool>({true, false, false, true, true});
+#else
+    constexpr bool a498[] = {true, false, false, true, true};
+    constexpr auto vals =        fxcrt::ToArray<const bool>(a498);
+#endif
     auto arr = pdfium::MakeRetain<CPDF_Array>();
     for (size_t i = 0; i < vals.size(); ++i) {
       arr->InsertNewAt<CPDF_Boolean>(i, vals[i]);
@@ -514,8 +604,13 @@ TEST(PDFArrayTest, GetTypeAt) {
   }
   {
     // Integer array.
+#if !defined(__QNX__) || __QNX__ >= 800
     constexpr auto vals = fxcrt::ToArray<const int>(
         {10, 0, -345, 2089345456, -1000000000, 567, 93658767});
+#else
+    constexpr int a517[] = {10, 0, -345, 2089345456, -1000000000, 567, 93658767};
+    constexpr auto vals = fxcrt::ToArray<const int>(a517);
+#endif
     auto arr = pdfium::MakeRetain<CPDF_Array>();
     for (size_t i = 0; i < vals.size(); ++i) {
       arr->InsertNewAt<CPDF_Number>(i, vals[i]);
@@ -534,15 +629,26 @@ TEST(PDFArrayTest, GetTypeAt) {
   }
   {
     // Float array.
+#if !defined(__QNX__) || __QNX__ >= 800
     constexpr auto vals = fxcrt::ToArray<const float>(
         {0.0f, 0, 10, 10.0f, 0.0345f, 897.34f, -2.5f, -1.0f, -345.0f, -0.0f});
+#else
+    constexpr float a537[] = {0.0f, 0, 10, 10.0f, 0.0345f, 897.34f, -2.5f, -1.0f, -345.0f, -0.0f};
+    constexpr auto vals = fxcrt::ToArray<const float>(a537);
+#endif
     auto arr = pdfium::MakeRetain<CPDF_Array>();
     for (size_t i = 0; i < vals.size(); ++i) {
       arr->InsertNewAt<CPDF_Number>(i, vals[i]);
     }
+#if !defined(__QNX__) || __QNX__ >= 800
     constexpr auto expected_str =
         fxcrt::ToArray<const char*>({"0", "0", "10", "10", ".034499999",
                                      "897.34003", "-2.5", "-1", "-345", "0"});
+#else
+    constexpr const char* a543[] = {"0", "0", "10", "10", ".034499999",
+                                     "897.34003", "-2.5", "-1", "-345", "0"};
+    constexpr auto expected_str =        fxcrt::ToArray<const char*>(a543);
+#endif
     for (size_t i = 0; i < vals.size(); ++i) {
       TestArrayAccessors(arr.Get(), i,     // Array and index.
                          expected_str[i],  // String value.
@@ -556,8 +662,13 @@ TEST(PDFArrayTest, GetTypeAt) {
   }
   {
     // String and name array
+#if !defined(__QNX__) || __QNX__ >= 800
     constexpr auto vals = fxcrt::ToArray<const char*>(
         {"this", "adsde$%^", "\r\t", "\"012", ".", "EYREW", "It is a joke :)"});
+#else
+    constexpr const char* a559[] = {"this", "adsde$%^", "\r\t", "\"012", ".", "EYREW", "It is a joke :)"};
+    constexpr auto vals = fxcrt::ToArray<const char*>(a559);
+#endif
     auto string_array = pdfium::MakeRetain<CPDF_Array>();
     auto name_array = pdfium::MakeRetain<CPDF_Array>();
     for (size_t i = 0; i < vals.size(); ++i) {
@@ -715,13 +826,29 @@ TEST(PDFArrayTest, GetTypeAt) {
         DataVector<uint8_t>(std::begin(kData), std::end(kData)), stream_dict);
     arr->InsertNewAt<CPDF_Reference>(13, &object_holder,
                                      stream_val->GetObjNum());
+#if !defined(__QNX__) || __QNX__ >= 800
     constexpr auto expected_str = fxcrt::ToArray<const char*>(
         {"true", "false", "0", "-1234", "2345", ".050000001", "",
          "It is a test!", "NAME", "test", "", "", "", ""});
+#else
+    constexpr const char* a718[] = {"true", "false", "0", "-1234", "2345", ".050000001", "",
+         "It is a test!", "NAME", "test", "", "", "", ""};
+    constexpr auto expected_str = fxcrt::ToArray<const char*>(a718);
+#endif
+#if !defined(__QNX__) || __QNX__ >= 800
     constexpr auto expected_int = fxcrt::ToArray<const int>(
         {1, 0, 0, -1234, 2345, 0, 0, 0, 0, 0, 0, 0, 0, 0});
+#else
+    constexpr int a721[] = {1, 0, 0, -1234, 2345, 0, 0, 0, 0, 0, 0, 0, 0, 0};
+    constexpr auto expected_int = fxcrt::ToArray<const int>(a721);
+#endif
+#if !defined(__QNX__) || __QNX__ >= 800
     constexpr auto expected_float = fxcrt::ToArray<const float>(
         {0, 0, 0, -1234, 2345, 0.05f, 0, 0, 0, 0, 0, 0, 0, 0});
+#else
+    constexpr float a723[] = {0, 0, 0, -1234, 2345, 0.05f, 0, 0, 0, 0, 0, 0, 0, 0};
+    constexpr auto expected_float = fxcrt::ToArray<const float>(a723);
+#endif
     for (size_t i = 0; i < arr->size(); ++i) {
       EXPECT_EQ(expected_str[i], arr->GetByteStringAt(i));
       EXPECT_EQ(expected_int[i], arr->GetIntegerAt(i));
@@ -746,8 +873,13 @@ TEST(PDFArrayTest, GetTypeAt) {
 }
 
 TEST(PDFArrayTest, AddNumber) {
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto vals = fxcrt::ToArray<const float>(
       {1.0f, -1.0f, 0, 0.456734f, 12345.54321f, 0.5f, 1000, 0.000045f});
+#else
+  constexpr float a749[] = {1.0f, -1.0f, 0, 0.456734f, 12345.54321f, 0.5f, 1000, 0.000045f};
+  constexpr auto vals = fxcrt::ToArray<const float>(a749);
+#endif
   auto arr = pdfium::MakeRetain<CPDF_Array>();
   for (size_t i = 0; i < vals.size(); ++i) {
     arr->AppendNew<CPDF_Number>(vals[i]);
@@ -759,8 +891,13 @@ TEST(PDFArrayTest, AddNumber) {
 }
 
 TEST(PDFArrayTest, AddInteger) {
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto vals = fxcrt::ToArray<const int>(
       {0, 1, 934435456, 876, 10000, -1, -24354656, -100});
+#else
+  constexpr int a762[] = {0, 1, 934435456, 876, 10000, -1, -24354656, -100};
+  constexpr auto vals = fxcrt::ToArray<const int>(a762);
+#endif
   auto arr = pdfium::MakeRetain<CPDF_Array>();
   for (size_t i = 0; i < vals.size(); ++i) {
     arr->AppendNew<CPDF_Number>(vals[i]);
@@ -772,9 +909,15 @@ TEST(PDFArrayTest, AddInteger) {
 }
 
 TEST(PDFArrayTest, AddStringAndName) {
+#if !defined(__QNX__) || __QNX__ >= 800
   static constexpr auto kVals =
       fxcrt::ToArray<const char*>({"", "a", "ehjhRIOYTTFdfcdnv", "122323",
                                    "$#%^&**", " ", "This is a test.\r\n"});
+#else
+  constexpr const char* a775[] = {"", "a", "ehjhRIOYTTFdfcdnv", "122323",
+                                   "$#%^&**", " ", "This is a test.\r\n"};
+  static constexpr auto kVals =      fxcrt::ToArray<const char*>(a775);
+#endif
   auto string_array = pdfium::MakeRetain<CPDF_Array>();
   auto name_array = pdfium::MakeRetain<CPDF_Array>();
   for (const char* val : kVals) {
@@ -798,10 +941,20 @@ TEST(PDFArrayTest, AddReferenceAndGetObjectAt) {
       pdfium::MakeRetain<CPDF_String>(nullptr, "Adsfdsf 343434 %&&*\n");
   auto name_obj = pdfium::MakeRetain<CPDF_Name>(nullptr, "Title:");
   auto null_obj = pdfium::MakeRetain<CPDF_Null>();
+#if !defined(__QNX__) || __QNX__ >= 800
   auto indirect_objs = fxcrt::ToArray<RetainPtr<CPDF_Object>>(
       {boolean_obj, int_obj, float_obj, str_obj, name_obj, null_obj});
+#else
+  const RetainPtr<CPDF_Object> a801[] = {boolean_obj, int_obj, float_obj, str_obj, name_obj, null_obj};
+  auto indirect_objs = fxcrt::ToArray<RetainPtr<CPDF_Object>>(a801);
+#endif
+#if !defined(__QNX__) || __QNX__ >= 800
   auto obj_nums = fxcrt::ToArray<int>({2, 4, 7, 2345, 799887, 1});
   auto arr = pdfium::MakeRetain<CPDF_Array>();
+#else
+  const int a803[] = {2, 4, 7, 2345, 799887, 1};
+  auto obj_nums = fxcrt::ToArray<int>(a803);  auto arr = pdfium::MakeRetain<CPDF_Array>();
+#endif
   auto arr1 = pdfium::MakeRetain<CPDF_Array>();
   // Create two arrays of references by different AddReference() APIs.
   for (size_t i = 0; i < std::size(indirect_objs); ++i) {
diff --git a/core/fpdfapi/parser/cpdf_parser_unittest.cpp b/core/fpdfapi/parser/cpdf_parser_unittest.cpp
index 5af3e9f3a..bb754be44 100644
--- a/core/fpdfapi/parser/cpdf_parser_unittest.cpp
+++ b/core/fpdfapi/parser/cpdf_parser_unittest.cpp
@@ -189,6 +189,7 @@ TEST(ParserTest, LoadCrossRefTable) {
         "0000000331 00000 n \n"
         "0000000409 00000 n \n"
         "trail";  // Needed to end cross ref table reading.
+#if !defined(__QNX__) || __QNX__ >= 800
     static constexpr auto kExpected = fxcrt::ToArray<OffsetAndType>({
         {0, CPDF_CrossRefTable::ObjectType::kFree},
         {17, CPDF_CrossRefTable::ObjectType::kNormal},
@@ -197,6 +198,17 @@ TEST(ParserTest, LoadCrossRefTable) {
         {331, CPDF_CrossRefTable::ObjectType::kNormal},
         {409, CPDF_CrossRefTable::ObjectType::kNormal},
     });
+#else
+    constexpr OffsetAndType a192[] = {
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {17, CPDF_CrossRefTable::ObjectType::kNormal},
+        {81, CPDF_CrossRefTable::ObjectType::kNormal},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {331, CPDF_CrossRefTable::ObjectType::kNormal},
+        {409, CPDF_CrossRefTable::ObjectType::kNormal},
+    };
+    static constexpr auto kExpected = fxcrt::ToArray<OffsetAndType>(a192);
+#endif
     CPDF_TestParser parser;
     ASSERT_TRUE(parser.InitTestFromBuffer(kXrefTable));
     ASSERT_TRUE(parser.LoadCrossRefTable(/*pos=*/0, /*skip=*/false));
@@ -218,6 +230,7 @@ TEST(ParserTest, LoadCrossRefTable) {
         "12 1 \n"
         "0000025777 00000 n \n"
         "trail";  // Needed to end cross ref table reading.
+#if !defined(__QNX__) || __QNX__ >= 800
     static constexpr auto kExpected = fxcrt::ToArray<OffsetAndType>({
         {0, CPDF_CrossRefTable::ObjectType::kFree},
         {0, CPDF_CrossRefTable::ObjectType::kFree},
@@ -233,6 +246,24 @@ TEST(ParserTest, LoadCrossRefTable) {
         {0, CPDF_CrossRefTable::ObjectType::kFree},
         {25777, CPDF_CrossRefTable::ObjectType::kNormal},
     });
+#else
+    constexpr OffsetAndType a221[] = {
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {25325, CPDF_CrossRefTable::ObjectType::kNormal},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {25518, CPDF_CrossRefTable::ObjectType::kNormal},
+        {25635, CPDF_CrossRefTable::ObjectType::kNormal},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {25777, CPDF_CrossRefTable::ObjectType::kNormal},
+    };
+    static constexpr auto kExpected = fxcrt::ToArray<OffsetAndType>(a221);
+#endif
     CPDF_TestParser parser;
     ASSERT_TRUE(parser.InitTestFromBuffer(kXrefTable));
     ASSERT_TRUE(parser.LoadCrossRefTable(/*pos=*/0, /*skip=*/false));
@@ -254,6 +285,7 @@ TEST(ParserTest, LoadCrossRefTable) {
         "12 1 \n"
         "0000025777 00000 n \n"
         "trail";  // Needed to end cross ref table reading.
+#if !defined(__QNX__) || __QNX__ >= 800
     static constexpr auto kExpected = fxcrt::ToArray<OffsetAndType>({
         {0, CPDF_CrossRefTable::ObjectType::kFree},
         {0, CPDF_CrossRefTable::ObjectType::kFree},
@@ -269,6 +301,24 @@ TEST(ParserTest, LoadCrossRefTable) {
         {0, CPDF_CrossRefTable::ObjectType::kFree},
         {25777, CPDF_CrossRefTable::ObjectType::kNormal},
     });
+#else
+    constexpr OffsetAndType a257[] = {
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {25325, CPDF_CrossRefTable::ObjectType::kNormal},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {25635, CPDF_CrossRefTable::ObjectType::kNormal},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {25777, CPDF_CrossRefTable::ObjectType::kNormal},
+    };
+    static constexpr auto kExpected = fxcrt::ToArray<OffsetAndType>(a257);
+#endif
     CPDF_TestParser parser;
     ASSERT_TRUE(parser.InitTestFromBuffer(kXrefTable));
     ASSERT_TRUE(parser.LoadCrossRefTable(/*pos=*/0, /*skip=*/false));
@@ -289,6 +339,7 @@ TEST(ParserTest, LoadCrossRefTable) {
         "0000000045 00000 n \n"
         "0000000179 00000 n \n"
         "trail";  // Needed to end cross ref table reading.
+#if !defined(__QNX__) || __QNX__ >= 800
     static constexpr auto kExpected = fxcrt::ToArray<OffsetAndType>({
         {0, CPDF_CrossRefTable::ObjectType::kFree},
         {23, CPDF_CrossRefTable::ObjectType::kNormal},
@@ -298,6 +349,18 @@ TEST(ParserTest, LoadCrossRefTable) {
         {45, CPDF_CrossRefTable::ObjectType::kNormal},
         {179, CPDF_CrossRefTable::ObjectType::kNormal},
     });
+#else
+    constexpr OffsetAndType a292[] = {
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {23, CPDF_CrossRefTable::ObjectType::kNormal},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {0, CPDF_CrossRefTable::ObjectType::kFree},
+        {45, CPDF_CrossRefTable::ObjectType::kNormal},
+        {179, CPDF_CrossRefTable::ObjectType::kNormal},
+    };
+    static constexpr auto kExpected = fxcrt::ToArray<OffsetAndType>(a292);
+#endif
     CPDF_TestParser parser;
     ASSERT_TRUE(parser.InitTestFromBuffer(kXrefTable));
     ASSERT_TRUE(parser.LoadCrossRefTable(/*pos=*/0, /*skip=*/false));
diff --git a/core/fpdfdoc/cpdf_action.cpp b/core/fpdfdoc/cpdf_action.cpp
index a5b687d76..72b994c5b 100644
--- a/core/fpdfdoc/cpdf_action.cpp
+++ b/core/fpdfdoc/cpdf_action.cpp
@@ -21,6 +21,7 @@
 
 namespace {
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kActionTypeStrings = fxcrt::ToArray<const char*>({
     "GoTo",
     "GoToR",
@@ -41,6 +42,29 @@ constexpr auto kActionTypeStrings = fxcrt::ToArray<const char*>({
     "Trans",
     "GoTo3DView",
 });
+#else
+constexpr const char* a24[] = {
+    "GoTo",
+    "GoToR",
+    "GoToE",
+    "Launch",
+    "Thread",
+    "URI",
+    "Sound",
+    "Movie",
+    "Hide",
+    "Named",
+    "SubmitForm",
+    "ResetForm",
+    "ImportData",
+    "JavaScript",
+    "SetOCGState",
+    "Rendition",
+    "Trans",
+    "GoTo3DView",
+};
+constexpr auto kActionTypeStrings = fxcrt::ToArray<const char*>(a24);
+#endif
 
 }  // namespace
 
diff --git a/core/fpdfdoc/cpdf_dest.cpp b/core/fpdfdoc/cpdf_dest.cpp
index 8026a75d5..13abac9ab 100644
--- a/core/fpdfdoc/cpdf_dest.cpp
+++ b/core/fpdfdoc/cpdf_dest.cpp
@@ -21,12 +21,23 @@ namespace {
 
 // These arrays are indexed by the PDFDEST_VIEW_* constants.
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kZoomModes =
     fxcrt::ToArray<const char*>({"Unknown", "XYZ", "Fit", "FitH", "FitV",
                                  "FitR", "FitB", "FitBH", "FitBV"});
+#else
+constexpr const char* a24[] = {"Unknown", "XYZ", "Fit", "FitH", "FitV",
+                                 "FitR", "FitB", "FitBH", "FitBV"};
+constexpr auto kZoomModes =    fxcrt::ToArray<const char*>(a24);
+#endif
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kZoomModeMaxParamCount =
     fxcrt::ToArray<const uint8_t>({0, 3, 0, 1, 1, 4, 0, 1, 1});
+#else
+constexpr uint8_t a28[] = {0, 3, 0, 1, 1, 4, 0, 1, 1};
+constexpr auto kZoomModeMaxParamCount =    fxcrt::ToArray<const uint8_t>(a28);
+#endif
 
 }  // namespace
 
diff --git a/core/fpdfdoc/cpdf_pagelabel.cpp b/core/fpdfdoc/cpdf_pagelabel.cpp
index eb3cdd512..be50b94eb 100644
--- a/core/fpdfdoc/cpdf_pagelabel.cpp
+++ b/core/fpdfdoc/cpdf_pagelabel.cpp
@@ -18,11 +18,22 @@
 namespace {
 
 WideString MakeRoman(int num) {
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto kArabic = fxcrt::ToArray<const int>(
       {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1});
+#else
+  constexpr int a21[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
+  constexpr auto kArabic = fxcrt::ToArray<const int>(a21);
+#endif
+#if !defined(__QNX__) || __QNX__ >= 800
   const auto kRoman = fxcrt::ToArray<const WideStringView>(
       {L"m", L"cm", L"d", L"cd", L"c", L"xc", L"l", L"xl", L"x", L"ix", L"v",
        L"iv", L"i"});
+#else
+  const WideStringView a23[] = {L"m", L"cm", L"d", L"cd", L"c", L"xc", L"l", L"xl", L"x", L"ix", L"v",
+       L"iv", L"i"};
+  const auto kRoman = fxcrt::ToArray<const WideStringView>(a23);
+#endif
   constexpr int kMaxNum = 1000000;
 
   num %= kMaxNum;
diff --git a/core/fpdfdoc/cpvt_variabletext.cpp b/core/fpdfdoc/cpvt_variabletext.cpp
index c890e85c1..0f6b75dbc 100644
--- a/core/fpdfdoc/cpvt_variabletext.cpp
+++ b/core/fpdfdoc/cpvt_variabletext.cpp
@@ -26,9 +26,15 @@ namespace {
 constexpr float kFontScale = 0.001f;
 constexpr uint8_t kReturnLength = 1;
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kFontSizeSteps = fxcrt::ToArray<const uint8_t>(
     {4,  6,  8,  9,  10, 12, 14, 18,  20,  25,  30,  35, 40,
      45, 50, 55, 60, 70, 80, 90, 100, 110, 120, 130, 144});
+#else
+constexpr uint8_t a29[] = {4,  6,  8,  9,  10, 12, 14, 18,  20,  25,  30,  35, 40,
+     45, 50, 55, 60, 70, 80, 90, 100, 110, 120, 130, 144};
+constexpr auto kFontSizeSteps = fxcrt::ToArray<const uint8_t>(a29);
+#endif
 
 }  // namespace
 
diff --git a/core/fxcodec/gif/cfx_gifcontext_unittest.cpp b/core/fxcodec/gif/cfx_gifcontext_unittest.cpp
index f5a626aa2..8581af672 100644
--- a/core/fxcodec/gif/cfx_gifcontext_unittest.cpp
+++ b/core/fxcodec/gif/cfx_gifcontext_unittest.cpp
@@ -55,8 +55,13 @@ TEST(CFXGifContextTest, ReadAllOrNone) {
   context.SetTestInputBuffer({});
   EXPECT_FALSE(context.ReadAllOrNone(pdfium::span<uint8_t>()));
 
+#if !defined(__QNX__) || __QNX__ >= 800
   auto src_buffer = fxcrt::ToArray<const uint8_t>(
       {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09});
+#else
+  const uint8_t a58[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};
+  auto src_buffer = fxcrt::ToArray<const uint8_t>(a58);
+#endif
 
   DataVector<uint8_t> dest_buffer(src_buffer.size());
   auto dest_span = pdfium::make_span(dest_buffer);
diff --git a/core/fxcodec/jbig2/JBig2_ArithDecoder.cpp b/core/fxcodec/jbig2/JBig2_ArithDecoder.cpp
index 0d73df896..8cf9eeee8 100644
--- a/core/fxcodec/jbig2/JBig2_ArithDecoder.cpp
+++ b/core/fxcodec/jbig2/JBig2_ArithDecoder.cpp
@@ -15,6 +15,7 @@
 
 namespace {
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kQeTable = fxcrt::ToArray<const JBig2ArithCtx::JBig2ArithQe>(
     {// Stupid hack to keep clang-format from reformatting this badly.
      {0x5601, 1, 1, true},    {0x3401, 2, 6, false},   {0x1801, 3, 9, false},
@@ -33,6 +34,26 @@ constexpr auto kQeTable = fxcrt::ToArray<const JBig2ArithCtx::JBig2ArithQe>(
      {0x0085, 40, 37, false}, {0x0049, 41, 38, false}, {0x0025, 42, 39, false},
      {0x0015, 43, 40, false}, {0x0009, 44, 41, false}, {0x0005, 45, 42, false},
      {0x0001, 45, 43, false}, {0x5601, 46, 46, false}});
+#else
+constexpr JBig2ArithCtx::JBig2ArithQe a18[] = {// Stupid hack to keep clang-format from reformatting this badly.
+     {0x5601, 1, 1, true},    {0x3401, 2, 6, false},   {0x1801, 3, 9, false},
+     {0x0AC1, 4, 12, false},  {0x0521, 5, 29, false},  {0x0221, 38, 33, false},
+     {0x5601, 7, 6, true},    {0x5401, 8, 14, false},  {0x4801, 9, 14, false},
+     {0x3801, 10, 14, false}, {0x3001, 11, 17, false}, {0x2401, 12, 18, false},
+     {0x1C01, 13, 20, false}, {0x1601, 29, 21, false}, {0x5601, 15, 14, true},
+     {0x5401, 16, 14, false}, {0x5101, 17, 15, false}, {0x4801, 18, 16, false},
+     {0x3801, 19, 17, false}, {0x3401, 20, 18, false}, {0x3001, 21, 19, false},
+     {0x2801, 22, 19, false}, {0x2401, 23, 20, false}, {0x2201, 24, 21, false},
+     {0x1C01, 25, 22, false}, {0x1801, 26, 23, false}, {0x1601, 27, 24, false},
+     {0x1401, 28, 25, false}, {0x1201, 29, 26, false}, {0x1101, 30, 27, false},
+     {0x0AC1, 31, 28, false}, {0x09C1, 32, 29, false}, {0x08A1, 33, 30, false},
+     {0x0521, 34, 31, false}, {0x0441, 35, 32, false}, {0x02A1, 36, 33, false},
+     {0x0221, 37, 34, false}, {0x0141, 38, 35, false}, {0x0111, 39, 36, false},
+     {0x0085, 40, 37, false}, {0x0049, 41, 38, false}, {0x0025, 42, 39, false},
+     {0x0015, 43, 40, false}, {0x0009, 44, 41, false}, {0x0005, 45, 42, false},
+     {0x0001, 45, 43, false}, {0x5601, 46, 46, false}};
+constexpr auto kQeTable = fxcrt::ToArray<const JBig2ArithCtx::JBig2ArithQe>(a18);
+#endif
 
 const unsigned int kDefaultAValue = 0x8000;
 
diff --git a/core/fxcodec/jbig2/JBig2_ArithIntDecoder.cpp b/core/fxcodec/jbig2/JBig2_ArithIntDecoder.cpp
index 0a05d993c..79d266427 100644
--- a/core/fxcodec/jbig2/JBig2_ArithIntDecoder.cpp
+++ b/core/fxcodec/jbig2/JBig2_ArithIntDecoder.cpp
@@ -23,6 +23,7 @@ struct ArithIntDecodeData {
   int nValue;
 };
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kArithIntDecodeData = fxcrt::ToArray<ArithIntDecodeData>({
     {2, 0},
     {4, 4},
@@ -31,6 +32,17 @@ constexpr auto kArithIntDecodeData = fxcrt::ToArray<ArithIntDecodeData>({
     {12, 340},
     {32, 4436},
 });
+#else
+constexpr ArithIntDecodeData a26[] = {
+    {2, 0},
+    {4, 4},
+    {6, 20},
+    {8, 84},
+    {12, 340},
+    {32, 4436},
+};
+constexpr auto kArithIntDecodeData = fxcrt::ToArray<ArithIntDecodeData>(a26);
+#endif
 
 size_t RecursiveDecode(CJBig2_ArithDecoder* decoder,
                        std::vector<JBig2ArithCtx>* context,
diff --git a/core/fxge/android/cfpf_skiafontmgr.cpp b/core/fxge/android/cfpf_skiafontmgr.cpp
index 23bbb9732..3d323b826 100644
--- a/core/fxge/android/cfpf_skiafontmgr.cpp
+++ b/core/fxge/android/cfpf_skiafontmgr.cpp
@@ -170,6 +170,7 @@ bool SkiaMaybeArabic(ByteStringView facename) {
   return name.Contains("arabic");
 }
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kFPFSkiaFontCharsets = fxcrt::ToArray<const uint32_t>({
     SKIACHARSET_Ansi,
     SKIACHARSET_EeasternEuropean,
@@ -204,6 +205,43 @@ constexpr auto kFPFSkiaFontCharsets = fxcrt::ToArray<const uint32_t>({
     SKIACHARSET_OEM,
     SKIACHARSET_Symbol,
 });
+#else
+constexpr uint32_t a173[] = {
+    SKIACHARSET_Ansi,
+    SKIACHARSET_EeasternEuropean,
+    SKIACHARSET_Cyrillic,
+    SKIACHARSET_Greek,
+    SKIACHARSET_Turkish,
+    SKIACHARSET_Hebrew,
+    SKIACHARSET_Arabic,
+    SKIACHARSET_Baltic,
+    0,
+    0,
+    0,
+    0,
+    0,
+    0,
+    0,
+    0,
+    SKIACHARSET_Thai,
+    SKIACHARSET_ShiftJIS,
+    SKIACHARSET_GB2312,
+    SKIACHARSET_Korean,
+    SKIACHARSET_BIG5,
+    SKIACHARSET_Johab,
+    0,
+    0,
+    0,
+    0,
+    0,
+    0,
+    0,
+    0,
+    SKIACHARSET_OEM,
+    SKIACHARSET_Symbol,
+};
+constexpr auto kFPFSkiaFontCharsets = fxcrt::ToArray<const uint32_t>(a173);
+#endif
 
 uint32_t SkiaGetFaceCharset(uint32_t code_range) {
   uint32_t charset = 0;
diff --git a/core/fxge/cfx_face.cpp b/core/fxge/cfx_face.cpp
index f2e7dcfcb..69e3d831b 100644
--- a/core/fxge/cfx_face.cpp
+++ b/core/fxge/cfx_face.cpp
@@ -51,6 +51,7 @@ constexpr int kMaxGlyphDimension = 2048;
 // Boundary value to avoid integer overflow when adding 1/64th of the value.
 constexpr int kMaxRectTop = 2114445437;
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kWeightPow = fxcrt::ToArray<const uint8_t>({
     0,   6,   12,  14,  16,  18,  22,  24,  28,  30,  32,  34,  36,  38,  40,
     42,  44,  46,  48,  50,  52,  54,  56,  58,  60,  62,  64,  66,  68,  70,
@@ -60,7 +61,20 @@ constexpr auto kWeightPow = fxcrt::ToArray<const uint8_t>({
     96,  98,  98,  98,  98,  100, 100, 100, 100, 100, 102, 102, 102, 102, 102,
     104, 104, 104, 104, 104, 106, 106, 106, 106, 106,
 });
+#else
+constexpr uint8_t a54[] = {
+    0,   6,   12,  14,  16,  18,  22,  24,  28,  30,  32,  34,  36,  38,  40,
+    42,  44,  46,  48,  50,  52,  54,  56,  58,  60,  62,  64,  66,  68,  70,
+    70,  72,  72,  74,  74,  74,  76,  76,  76,  78,  78,  78,  80,  80,  80,
+    82,  82,  82,  84,  84,  84,  84,  86,  86,  86,  88,  88,  88,  88,  90,
+    90,  90,  90,  92,  92,  92,  92,  94,  94,  94,  94,  96,  96,  96,  96,
+    96,  98,  98,  98,  98,  100, 100, 100, 100, 100, 102, 102, 102, 102, 102,
+    104, 104, 104, 104, 104, 106, 106, 106, 106, 106,
+};
+constexpr auto kWeightPow = fxcrt::ToArray<const uint8_t>(a54);
+#endif
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kWeightPow11 = fxcrt::ToArray<const uint8_t>({
     0,  4,  7,  8,  9,  10, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24,
     25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 39, 40, 40, 41,
@@ -69,7 +83,19 @@ constexpr auto kWeightPow11 = fxcrt::ToArray<const uint8_t>({
     52, 52, 52, 53, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 55,
     56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58,
 });
+#else
+constexpr uint8_t a64[] = {
+    0,  4,  7,  8,  9,  10, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24,
+    25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 39, 40, 40, 41,
+    41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 46,
+    46, 43, 47, 47, 48, 48, 48, 48, 45, 50, 50, 50, 46, 51, 51, 51, 52,
+    52, 52, 52, 53, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 55,
+    56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58,
+};
+constexpr auto kWeightPow11 = fxcrt::ToArray<const uint8_t>(a64);
+#endif
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kWeightPowShiftJis = fxcrt::ToArray<const uint8_t>({
     0,   0,   2,   4,   6,   8,   10,  14,  16,  20,  22,  26,  28,  32,  34,
     38,  42,  44,  48,  52,  56,  60,  64,  66,  70,  74,  78,  82,  86,  90,
@@ -79,6 +105,18 @@ constexpr auto kWeightPowShiftJis = fxcrt::ToArray<const uint8_t>({
     114, 114, 114, 116, 116, 116, 116, 116, 116, 116, 118, 118, 118, 118, 118,
     118, 118, 120, 120, 120, 120, 120, 120, 120, 120,
 });
+#else
+constexpr uint8_t a73[] = {
+    0,   0,   2,   4,   6,   8,   10,  14,  16,  20,  22,  26,  28,  32,  34,
+    38,  42,  44,  48,  52,  56,  60,  64,  66,  70,  74,  78,  82,  86,  90,
+    96,  96,  96,  96,  98,  98,  98,  100, 100, 100, 100, 102, 102, 102, 102,
+    104, 104, 104, 104, 104, 106, 106, 106, 106, 106, 108, 108, 108, 108, 108,
+    110, 110, 110, 110, 110, 112, 112, 112, 112, 112, 112, 114, 114, 114, 114,
+    114, 114, 114, 116, 116, 116, 116, 116, 116, 116, 118, 118, 118, 118, 118,
+    118, 118, 120, 120, 120, 120, 120, 120, 120, 120,
+};
+constexpr auto kWeightPowShiftJis = fxcrt::ToArray<const uint8_t>(a73);
+#endif
 
 constexpr size_t kWeightPowArraySize = 100;
 static_assert(kWeightPowArraySize == std::size(kWeightPow), "Wrong size");
@@ -86,10 +124,18 @@ static_assert(kWeightPowArraySize == std::size(kWeightPow11), "Wrong size");
 static_assert(kWeightPowArraySize == std::size(kWeightPowShiftJis),
               "Wrong size");
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kAngleSkew = fxcrt::ToArray<const int8_t>({
     -0,  -2,  -3,  -5,  -7,  -9,  -11, -12, -14, -16, -18, -19, -21, -23, -25,
     -27, -29, -31, -32, -34, -36, -38, -40, -42, -45, -47, -49, -51, -53, -55,
 });
+#else
+constexpr int8_t a89[] = {
+    -0,  -2,  -3,  -5,  -7,  -9,  -11, -12, -14, -16, -18, -19, -21, -23, -25,
+    -27, -29, -31, -32, -34, -36, -38, -40, -42, -45, -47, -49, -51, -53, -55,
+};
+constexpr auto kAngleSkew = fxcrt::ToArray<const int8_t>(a89);
+#endif
 
 // Returns negative values on failure.
 int GetWeightLevel(FX_Charset charset, size_t index) {
diff --git a/core/fxge/cfx_folderfontinfo.cpp b/core/fxge/cfx_folderfontinfo.cpp
index 04f2d1d36..2e46c2682 100644
--- a/core/fxge/cfx_folderfontinfo.cpp
+++ b/core/fxge/cfx_folderfontinfo.cpp
@@ -33,6 +33,7 @@ struct FontSubst {
   const char* m_pSubstName;
 };
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kBase14Substs = fxcrt::ToArray<const FontSubst>({
     {"Courier", "Courier New"},
     {"Courier-Bold", "Courier New Bold"},
@@ -47,6 +48,23 @@ constexpr auto kBase14Substs = fxcrt::ToArray<const FontSubst>({
     {"Times-BoldItalic", "Times New Roman Bold Italic"},
     {"Times-Italic", "Times New Roman Italic"},
 });
+#else
+constexpr FontSubst a36[] = {
+    {"Courier", "Courier New"},
+    {"Courier-Bold", "Courier New Bold"},
+    {"Courier-BoldOblique", "Courier New Bold Italic"},
+    {"Courier-Oblique", "Courier New Italic"},
+    {"Helvetica", "Arial"},
+    {"Helvetica-Bold", "Arial Bold"},
+    {"Helvetica-BoldOblique", "Arial Bold Italic"},
+    {"Helvetica-Oblique", "Arial Italic"},
+    {"Times-Roman", "Times New Roman"},
+    {"Times-Bold", "Times New Roman Bold"},
+    {"Times-BoldItalic", "Times New Roman Bold Italic"},
+    {"Times-Italic", "Times New Roman Italic"},
+};
+constexpr auto kBase14Substs = fxcrt::ToArray<const FontSubst>(a36);
+#endif
 
 // Used with std::unique_ptr to automatically call fclose().
 struct FxFileCloser {
diff --git a/core/fxge/linux/fx_linux_impl.cpp b/core/fxge/linux/fx_linux_impl.cpp
index b3e151887..2a5e9f515 100644
--- a/core/fxge/linux/fx_linux_impl.cpp
+++ b/core/fxge/linux/fx_linux_impl.cpp
@@ -35,12 +35,22 @@ enum JpFontFamilyRowIndex : uint8_t {
 
 constexpr size_t kJpFontFamilyColumnCount = 5;
 using JpFontFamilyRow = std::array<const char*, kJpFontFamilyColumnCount>;
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kJpFontTable = fxcrt::ToArray<const JpFontFamilyRow>({
     {{"MS PGothic", "TakaoPGothic", "VL PGothic", "IPAPGothic", "VL Gothic"}},
     {{"MS Gothic", "TakaoGothic", "VL Gothic", "IPAGothic", "Kochi Gothic"}},
     {{"MS PMincho", "TakaoPMincho", "IPAPMincho", "VL Gothic", "Kochi Mincho"}},
     {{"MS Mincho", "TakaoMincho", "IPAMincho", "VL Gothic", "Kochi Mincho"}},
 });
+#else
+constexpr JpFontFamilyRow a38[] = {
+    {{"MS PGothic", "TakaoPGothic", "VL PGothic", "IPAPGothic", "VL Gothic"}},
+    {{"MS Gothic", "TakaoGothic", "VL Gothic", "IPAGothic", "Kochi Gothic"}},
+    {{"MS PMincho", "TakaoPMincho", "IPAPMincho", "VL Gothic", "Kochi Mincho"}},
+    {{"MS Mincho", "TakaoMincho", "IPAMincho", "VL Gothic", "Kochi Mincho"}},
+};
+constexpr auto kJpFontTable = fxcrt::ToArray<const JpFontFamilyRow>(a38);
+#endif
 
 const char* const kGbFontList[] = {
     "AR PL UMing CN Light",
diff --git a/core/fxge/qnx/fx_qnx_impl.cpp b/core/fxge/qnx/fx_qnx_impl.cpp
index 26f6dcf74..39803ef95 100644
--- a/core/fxge/qnx/fx_qnx_impl.cpp
+++ b/core/fxge/qnx/fx_qnx_impl.cpp
@@ -35,12 +35,22 @@ enum JpFontFamilyRowIndex : uint8_t {
 
 constexpr size_t kJpFontFamilyColumnCount = 5;
 using JpFontFamilyRow = std::array<const char*, kJpFontFamilyColumnCount>;
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kJpFontTable = fxcrt::ToArray<const JpFontFamilyRow>({
     {{"MS PGothic", "TakaoPGothic", "VL PGothic", "IPAPGothic", "VL Gothic"}},
     {{"MS Gothic", "TakaoGothic", "VL Gothic", "IPAGothic", "Kochi Gothic"}},
     {{"MS PMincho", "TakaoPMincho", "IPAPMincho", "VL Gothic", "Kochi Mincho"}},
     {{"MS Mincho", "TakaoMincho", "IPAMincho", "VL Gothic", "Kochi Mincho"}},
 });
+#else
+constexpr JpFontFamilyRow a38[] = {
+    {{"MS PGothic", "TakaoPGothic", "VL PGothic", "IPAPGothic", "VL Gothic"}},
+    {{"MS Gothic", "TakaoGothic", "VL Gothic", "IPAGothic", "Kochi Gothic"}},
+    {{"MS PMincho", "TakaoPMincho", "IPAPMincho", "VL Gothic", "Kochi Mincho"}},
+    {{"MS Mincho", "TakaoMincho", "IPAMincho", "VL Gothic", "Kochi Mincho"}},
+};
+constexpr auto kJpFontTable = fxcrt::ToArray<const JpFontFamilyRow>(a38);
+#endif
 
 const char* const kGbFontList[] = {
     "AR PL UMing CN Light",
diff --git a/core/fxge/win32/cwin32_platform.cpp b/core/fxge/win32/cwin32_platform.cpp
index ec9ac957d..42d691871 100644
--- a/core/fxge/win32/cwin32_platform.cpp
+++ b/core/fxge/win32/cwin32_platform.cpp
@@ -44,6 +44,7 @@ struct Substs {
   bool m_bItalic;
 };
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kBase14Substs = fxcrt::ToArray<const Substs>({
     {"Courier", "Courier New", false, false},
     {"Courier-Bold", "Courier New", true, false},
@@ -58,6 +59,23 @@ constexpr auto kBase14Substs = fxcrt::ToArray<const Substs>({
     {"Times-BoldItalic", "Times New Roman", true, true},
     {"Times-Italic", "Times New Roman", false, true},
 });
+#else
+constexpr Substs a47[] = {
+    {"Courier", "Courier New", false, false},
+    {"Courier-Bold", "Courier New", true, false},
+    {"Courier-BoldOblique", "Courier New", true, true},
+    {"Courier-Oblique", "Courier New", false, true},
+    {"Helvetica", "Arial", false, false},
+    {"Helvetica-Bold", "Arial", true, false},
+    {"Helvetica-BoldOblique", "Arial", true, true},
+    {"Helvetica-Oblique", "Arial", false, true},
+    {"Times-Roman", "Times New Roman", false, false},
+    {"Times-Bold", "Times New Roman", true, false},
+    {"Times-BoldItalic", "Times New Roman", true, true},
+    {"Times-Italic", "Times New Roman", false, true},
+};
+constexpr auto kBase14Substs = fxcrt::ToArray<const Substs>(a47);
+#endif
 
 struct FontNameMap {
   const char* m_pSubFontName;
diff --git a/fpdfsdk/fpdf_annot.cpp b/fpdfsdk/fpdf_annot.cpp
index e42e6db0c..c4f1ebde5 100644
--- a/fpdfsdk/fpdf_annot.cpp
+++ b/fpdfsdk/fpdf_annot.cpp
@@ -1085,8 +1085,13 @@ FPDFAnnot_SetAP(FPDF_ANNOTATION annot,
   if (appearanceMode < 0 || appearanceMode >= FPDF_ANNOT_APPEARANCEMODE_COUNT)
     return false;
 
+#if !defined(__QNX__) || __QNX__ >= 800
   static constexpr auto kModeKeyForMode =
       fxcrt::ToArray<const char*>({"N", "R", "D"});
+#else
+  constexpr const char* a1088[] = {"N", "R", "D"};
+  static constexpr auto kModeKeyForMode =      fxcrt::ToArray<const char*>(a1088);
+#endif
   static_assert(kModeKeyForMode.size() == FPDF_ANNOT_APPEARANCEMODE_COUNT,
                 "length of kModeKeyForMode should be equal to "
                 "FPDF_ANNOT_APPEARANCEMODE_COUNT");
diff --git a/fpdfsdk/fpdf_text_embeddertest.cpp b/fpdfsdk/fpdf_text_embeddertest.cpp
index 051391ad8..16752f145 100644
--- a/fpdfsdk/fpdf_text_embeddertest.cpp
+++ b/fpdfsdk/fpdf_text_embeddertest.cpp
@@ -755,6 +755,7 @@ TEST_F(FPDFTextEmbedderTest, WebLinksAcrossLines) {
   FPDF_PAGELINK pagelink = FPDFLink_LoadWebLinks(textpage.get());
   EXPECT_TRUE(pagelink);
 
+#if !defined(__QNX__) || __QNX__ >= 800
   static constexpr auto kExpectedUrls = fxcrt::ToArray<const char*>({
       "http://example.com",           // from "http://www.example.com?\r\nfoo"
       "http://example.com/",          // from "http://www.example.com/\r\nfoo"
@@ -764,6 +765,18 @@ TEST_F(FPDFTextEmbedderTest, WebLinksAcrossLines) {
       "http://example.com/",
       "http://www.abc.com",
   });
+#else
+  constexpr const char* a758[] = {
+      "http://example.com",           // from "http://www.example.com?\r\nfoo"
+      "http://example.com/",          // from "http://www.example.com/\r\nfoo"
+      "http://example.com/test-foo",  // from "http://example.com/test-\r\nfoo"
+      "http://abc.com/test-foo",      // from "http://abc.com/test-\r\n\r\nfoo"
+      // Next two links from "http://www.example.com/\r\nhttp://www.abc.com/"
+      "http://example.com/",
+      "http://www.abc.com",
+  };
+  static constexpr auto kExpectedUrls = fxcrt::ToArray<const char*>(a758);
+#endif
   static const int kNumLinks = static_cast<int>(std::size(kExpectedUrls));
 
   EXPECT_EQ(kNumLinks, FPDFLink_CountWebLinks(pagelink));
@@ -927,9 +940,15 @@ TEST_F(FPDFTextEmbedderTest, GetFontSize) {
   ScopedFPDFTextPage textpage(FPDFText_LoadPage(page.get()));
   ASSERT_TRUE(textpage);
 
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto kExpectedFontsSizes = fxcrt::ToArray<const double>(
       {12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1,  1,
        16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16});
+#else
+  constexpr double a930[] = {12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1,  1,
+       16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16};
+  constexpr auto kExpectedFontsSizes = fxcrt::ToArray<const double>(a930);
+#endif
 
   int count = FPDFText_CountChars(textpage.get());
   ASSERT_EQ(std::size(kExpectedFontsSizes), static_cast<size_t>(count));
@@ -1121,9 +1140,15 @@ TEST_F(FPDFTextEmbedderTest, Bug921) {
   ScopedFPDFTextPage textpage(FPDFText_LoadPage(page.get()));
   ASSERT_TRUE(textpage);
 
+#if !defined(__QNX__) || __QNX__ >= 800
   static constexpr auto kData = fxcrt::ToArray<const unsigned int>(
       {1095, 1077, 1083, 1086, 1074, 1077, 1095, 1077, 1089, 1082, 1086, 1077,
        32,   1089, 1090, 1088, 1072, 1076, 1072, 1085, 1080, 1077, 46,   32});
+#else
+  constexpr unsigned int a1124[] = {1095, 1077, 1083, 1086, 1074, 1077, 1095, 1077, 1089, 1082, 1086, 1077,
+       32,   1089, 1090, 1088, 1072, 1076, 1072, 1085, 1080, 1077, 46,   32};
+  static constexpr auto kData = fxcrt::ToArray<const unsigned int>(a1124);
+#endif
   static constexpr int kStartIndex = 238;
 
   ASSERT_EQ(268, FPDFText_CountChars(textpage.get()));
@@ -1154,9 +1179,15 @@ TEST_F(FPDFTextEmbedderTest, GetTextWithHyphen) {
   // Expecting 'Veritaserum', except there is a \uFFFE where the hyphen was in
   // the original text. This is a weird thing that Adobe does, which we
   // replicate.
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto soft_expected = fxcrt::ToArray<unsigned short>(
       {0x0056, 0x0065, 0x0072, 0x0069, 0x0074, 0x0061, 0xfffe, 0x0073, 0x0065,
        0x0072, 0x0075, 0x006D, 0x0000});
+#else
+  constexpr unsigned short a1157[] = {0x0056, 0x0065, 0x0072, 0x0069, 0x0074, 0x0061, 0xfffe, 0x0073, 0x0065,
+       0x0072, 0x0075, 0x006D, 0x0000};
+  constexpr auto soft_expected = fxcrt::ToArray<unsigned short>(a1157);
+#endif
   {
     constexpr int count = std::size(soft_expected) - 1;
     std::array<unsigned short, soft_expected.size()> buffer = {};
@@ -1172,9 +1203,15 @@ TEST_F(FPDFTextEmbedderTest, GetTextWithHyphen) {
     constexpr size_t offset = std::size(soft_expected) + 1;
     // Expecting 'User-\r\ngenerated', the - is a unicode character, so cannot
     // store in a char[].
+#if !defined(__QNX__) || __QNX__ >= 800
     constexpr auto hard_expected = fxcrt::ToArray<unsigned short>(
         {0x0055, 0x0073, 0x0065, 0x0072, 0x2010, 0x000d, 0x000a, 0x0067, 0x0065,
          0x006e, 0x0065, 0x0072, 0x0061, 0x0074, 0x0065, 0x0064, 0x0000});
+#else
+    constexpr unsigned short a1175[] = {0x0055, 0x0073, 0x0065, 0x0072, 0x2010, 0x000d, 0x000a, 0x0067, 0x0065,
+         0x006e, 0x0065, 0x0072, 0x0061, 0x0074, 0x0065, 0x0064, 0x0000};
+    constexpr auto hard_expected = fxcrt::ToArray<unsigned short>(a1175);
+#endif
     constexpr int count = std::size(hard_expected) - 1;
     std::array<unsigned short, hard_expected.size()> buffer;
     EXPECT_EQ(count + 1,
@@ -1242,6 +1279,7 @@ TEST_F(FPDFTextEmbedderTest, Bug1029) {
   //
   // The original text has a fi ligature, but that is broken up into
   // two characters when the PDF is processed.
+#if !defined(__QNX__) || __QNX__ >= 800
   static constexpr auto expected = fxcrt::ToArray<unsigned int>({
       0x004d, 0x0045, 0x0054, 0x0041, 0x0044, 0x0041, 0x0054, 0x0041,
       0x0020, 0x0074, 0x0061, 0x0062, 0x006c, 0x0065, 0x002e, 0x0020,
@@ -1251,6 +1289,18 @@ TEST_F(FPDFTextEmbedderTest, Bug1029) {
       0x0074, 0x0074, 0x0065, 0x0064, 0x002c, 0x0020, 0x0069, 0x0074,
       0x0020, 0x006e, 0x006f, 0x0074, 0x0069, 0x0002, 0x0066, 0x0069,
   });
+#else
+  constexpr unsigned int a1245[] = {
+      0x004d, 0x0045, 0x0054, 0x0041, 0x0044, 0x0041, 0x0054, 0x0041,
+      0x0020, 0x0074, 0x0061, 0x0062, 0x006c, 0x0065, 0x002e, 0x0020,
+      0x0057, 0x0068, 0x0065, 0x006e, 0x0020, 0x0074, 0x0068, 0x0065,
+      0x0020, 0x0073, 0x0070, 0x006c, 0x0069, 0x0074, 0x0020, 0x0068,
+      0x0061, 0x0073, 0x0020, 0x0063, 0x006f, 0x006d, 0x006d, 0x0069,
+      0x0074, 0x0074, 0x0065, 0x0064, 0x002c, 0x0020, 0x0069, 0x0074,
+      0x0020, 0x006e, 0x006f, 0x0074, 0x0069, 0x0002, 0x0066, 0x0069,
+  };
+  static constexpr auto expected = fxcrt::ToArray<unsigned int>(a1245);
+#endif
   static_assert(page_range_length == std::size(expected),
                 "Expected should be the same size as the range being "
                 "extracted from page.");
@@ -1616,6 +1666,7 @@ TEST_F(FPDFTextEmbedderTest, GetStrokeColor) {
 TEST_F(FPDFTextEmbedderTest, GetMatrix) {
   constexpr char kExpectedText[] = "A1\r\nA2\r\nA3";
   constexpr size_t kExpectedTextSize = std::size(kExpectedText);
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto kExpectedMatrices = fxcrt::ToArray<const FS_MATRIX>({
       {12.0f, 0.0f, 0.0f, 10.0f, 66.0f, 90.0f},
       {12.0f, 0.0f, 0.0f, 10.0f, 66.0f, 90.0f},
@@ -1628,6 +1679,21 @@ TEST_F(FPDFTextEmbedderTest, GetMatrix) {
       {1.0f, 0.0f, 0.0f, 0.833333, 60.0f, 130.0f},
       {1.0f, 0.0f, 0.0f, 0.833333, 60.0f, 130.0f},
   });
+#else
+  constexpr FS_MATRIX a1619[] = {
+      {12.0f, 0.0f, 0.0f, 10.0f, 66.0f, 90.0f},
+      {12.0f, 0.0f, 0.0f, 10.0f, 66.0f, 90.0f},
+      {1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f},
+      {1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f},
+      {12.0f, 0.0f, 0.0f, 10.0f, 38.0f, 60.0f},
+      {12.0f, 0.0f, 0.0f, 10.0f, 38.0f, 60.0f},
+      {1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f},
+      {1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f},
+      {1.0f, 0.0f, 0.0f, 0.833333, 60.0f, 130.0f},
+      {1.0f, 0.0f, 0.0f, 0.833333, 60.0f, 130.0f},
+  };
+  constexpr auto kExpectedMatrices = fxcrt::ToArray<const FS_MATRIX>(a1619);
+#endif
   constexpr size_t kExpectedCount = std::size(kExpectedMatrices);
   static_assert(kExpectedCount + 1 == kExpectedTextSize,
                 "Bad expected matrix size");
@@ -1796,6 +1862,7 @@ TEST_F(FPDFTextEmbedderTest, BigtableTextRects) {
   // TODO(crbug.com/40448046): The PDF uses fonts [/F2, /F1, /F2, /F1] with a
   // constant size on a single line. FPDFText_CountRects() should merge the text
   // into 4 rects.
+#if !defined(__QNX__) || __QNX__ >= 800
   constexpr auto kExpectedRects = fxcrt::ToArray<TextRect>({
       {7.0195, 657.8847, 10.3102, 648.9273},
       {11.1978, 657.4722, 13.9057, 651.1599},
@@ -1810,6 +1877,23 @@ TEST_F(FPDFTextEmbedderTest, BigtableTextRects) {
       {194.4253, 657.8847, 197.7160, 648.9273},
       {198.8009, 657.3826, 248.5284, 649.2321},
   });
+#else
+  constexpr TextRect a1799[] = {
+      {7.0195, 657.8847, 10.3102, 648.9273},
+      {11.1978, 657.4722, 13.9057, 651.1599},
+      {14.1085, 655.3652, 22.2230, 649.2321},
+      {21.9279, 657.4722, 33.2883, 649.2590},
+      {33.3711, 657.4722, 61.1938, 649.2321},
+      {60.8897, 657.3826, 97.9119, 649.7881},
+      {98.0787, 655.3831, 107.6010, 651.0792},
+      {107.6535, 657.3826, 149.5713, 649.7881},
+      {149.5072, 657.3826, 158.1329, 649.7881},
+      {161.1511, 657.3826, 193.8335, 649.2321},
+      {194.4253, 657.8847, 197.7160, 648.9273},
+      {198.8009, 657.3826, 248.5284, 649.2321},
+  };
+  constexpr auto kExpectedRects = fxcrt::ToArray<TextRect>(a1799);
+#endif
 
   ASSERT_TRUE(OpenDocument("bigtable_mini.pdf"));
   ScopedEmbedderTestPage page = LoadScopedPage(0);
diff --git a/fxbarcode/oned/BC_OnedCodaBarWriter.cpp b/fxbarcode/oned/BC_OnedCodaBarWriter.cpp
index eaaadc50e..6c4282d63 100644
--- a/fxbarcode/oned/BC_OnedCodaBarWriter.cpp
+++ b/fxbarcode/oned/BC_OnedCodaBarWriter.cpp
@@ -34,14 +34,26 @@
 
 namespace {
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kOnedCodaAlphabet = fxcrt::ToArray<const char>(
     {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-',
      '$', ':', '/', '.', '+', 'A', 'B', 'C', 'D', 'T', 'N'});
+#else
+constexpr char a37[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-',
+     '$', ':', '/', '.', '+', 'A', 'B', 'C', 'D', 'T', 'N'};
+constexpr auto kOnedCodaAlphabet = fxcrt::ToArray<const char>(a37);
+#endif
 static_assert(std::size(kOnedCodaAlphabet) == 22, "Wrong size");
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kOnedCodaCharacterEncoding = fxcrt::ToArray<const int8_t>(
     {0x03, 0x06, 0x09, 0x60, 0x12, 0x42, 0x21, 0x24, 0x30, 0x48, 0x0c,
      0x18, 0x45, 0x51, 0x54, 0x15, 0x1A, 0x29, 0x0B, 0x0E, 0x1A, 0x29});
+#else
+constexpr int8_t a42[] = {0x03, 0x06, 0x09, 0x60, 0x12, 0x42, 0x21, 0x24, 0x30, 0x48, 0x0c,
+     0x18, 0x45, 0x51, 0x54, 0x15, 0x1A, 0x29, 0x0B, 0x0E, 0x1A, 0x29};
+constexpr auto kOnedCodaCharacterEncoding = fxcrt::ToArray<const int8_t>(a42);
+#endif
 static_assert(std::size(kOnedCodaCharacterEncoding) == 22, "Wrong size");
 
 const char kStartEndChars[] = {'A', 'B', 'C', 'D', 'T', 'N', '*', 'E',
diff --git a/fxbarcode/oned/BC_OnedCode39Writer.cpp b/fxbarcode/oned/BC_OnedCode39Writer.cpp
index 8c5ee7195..3008b75ec 100644
--- a/fxbarcode/oned/BC_OnedCode39Writer.cpp
+++ b/fxbarcode/oned/BC_OnedCode39Writer.cpp
@@ -35,24 +35,47 @@
 
 namespace {
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kOnedCode39Alphabet = fxcrt::ToArray<const char>(
     {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
      'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
      'U', 'V', 'W', 'X', 'Y', 'Z', '-', '.', ' ', '*', '$', '/', '+', '%'});
+#else
+constexpr char a38[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
+     'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
+     'U', 'V', 'W', 'X', 'Y', 'Z', '-', '.', ' ', '*', '$', '/', '+', '%'};
+constexpr auto kOnedCode39Alphabet = fxcrt::ToArray<const char>(a38);
+#endif
 constexpr size_t kOnedCode39AlphabetLen = std::size(kOnedCode39Alphabet);
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kOnedCode39Checksum = fxcrt::ToArray<const char>(
     {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
      'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
      'U', 'V', 'W', 'X', 'Y', 'Z', '-', '.', ' ', '$', '/', '+', '%'});
+#else
+constexpr char a44[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
+     'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
+     'U', 'V', 'W', 'X', 'Y', 'Z', '-', '.', ' ', '$', '/', '+', '%'};
+constexpr auto kOnedCode39Checksum = fxcrt::ToArray<const char>(a44);
+#endif
 static_assert(std::size(kOnedCode39Checksum) == 43, "Wrong size");
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kOnedCode39CharacterEncoding = fxcrt::ToArray<const uint16_t>(
     {0x0034, 0x0121, 0x0061, 0x0160, 0x0031, 0x0130, 0x0070, 0x0025, 0x0124,
      0x0064, 0x0109, 0x0049, 0x0148, 0x0019, 0x0118, 0x0058, 0x000D, 0x010C,
      0x004C, 0x001C, 0x0103, 0x0043, 0x0142, 0x0013, 0x0112, 0x0052, 0x0007,
      0x0106, 0x0046, 0x0016, 0x0181, 0x00C1, 0x01C0, 0x0091, 0x0190, 0x00D0,
      0x0085, 0x0184, 0x00C4, 0x0094, 0x00A8, 0x00A2, 0x008A, 0x002A});
+#else
+constexpr uint16_t a50[] = {0x0034, 0x0121, 0x0061, 0x0160, 0x0031, 0x0130, 0x0070, 0x0025, 0x0124,
+     0x0064, 0x0109, 0x0049, 0x0148, 0x0019, 0x0118, 0x0058, 0x000D, 0x010C,
+     0x004C, 0x001C, 0x0103, 0x0043, 0x0142, 0x0013, 0x0112, 0x0052, 0x0007,
+     0x0106, 0x0046, 0x0016, 0x0181, 0x00C1, 0x01C0, 0x0091, 0x0190, 0x00D0,
+     0x0085, 0x0184, 0x00C4, 0x0094, 0x00A8, 0x00A2, 0x008A, 0x002A};
+constexpr auto kOnedCode39CharacterEncoding = fxcrt::ToArray<const uint16_t>(a50);
+#endif
 static_assert(std::size(kOnedCode39CharacterEncoding) == 44, "Wrong size");
 
 bool IsInOnedCode39Alphabet(wchar_t ch) {
diff --git a/fxbarcode/qrcode/BC_QRCoderEncoder.cpp b/fxbarcode/qrcode/BC_QRCoderEncoder.cpp
index 4f663e5df..d8721efd5 100644
--- a/fxbarcode/qrcode/BC_QRCoderEncoder.cpp
+++ b/fxbarcode/qrcode/BC_QRCoderEncoder.cpp
@@ -58,11 +58,19 @@ struct QRCoderBlockPair {
 };
 
 // This is a mapping for an ASCII table, starting at an index of 32.
+#if !defined(__QNX__) || __QNX__ >= 800
 const auto kAlphaNumericTable = fxcrt::ToArray<const int8_t>(
     {36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43,  // 32-47
      0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  44, -1, -1, -1, -1, -1,  // 48-63
      -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,  // 64-79
      25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35});
+#else
+const int8_t a61[] = {36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43,  // 32-47
+     0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  44, -1, -1, -1, -1, -1,  // 48-63
+     -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,  // 64-79
+     25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35};
+const auto kAlphaNumericTable = fxcrt::ToArray<const int8_t>(a61);
+#endif
 
 int32_t GetAlphaNumericCode(int32_t code) {
   if (code < 32)
diff --git a/xfa/fgas/crt/cfgas_stringformatter.cpp b/xfa/fgas/crt/cfgas_stringformatter.cpp
index 6e36773d1..d3f3af6a2 100644
--- a/xfa/fgas/crt/cfgas_stringformatter.cpp
+++ b/xfa/fgas/crt/cfgas_stringformatter.cpp
@@ -67,6 +67,7 @@ struct FX_LOCALETIMEZONEINFO {
   int16_t iMinute;
 };
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kFXLocaleTimeZoneData =
     fxcrt::ToArray<const FX_LOCALETIMEZONEINFO>({
         {L"CDT", -5, 0},
@@ -78,6 +79,19 @@ constexpr auto kFXLocaleTimeZoneData =
         {L"PDT", -7, 0},
         {L"PST", -8, 0},
     });
+#else
+constexpr FX_LOCALETIMEZONEINFO a70[] = {
+        {L"CDT", -5, 0},
+        {L"CST", -6, 0},
+        {L"EDT", -4, 0},
+        {L"EST", -5, 0},
+        {L"MDT", -6, 0},
+        {L"MST", -7, 0},
+        {L"PDT", -7, 0},
+        {L"PST", -8, 0},
+    };
+constexpr auto kFXLocaleTimeZoneData =    fxcrt::ToArray<const FX_LOCALETIMEZONEINFO>(a70);
+#endif
 
 constexpr wchar_t kTimeSymbols[] = L"hHkKMSFAzZ";
 constexpr wchar_t kDateSymbols[] = L"DJMEeGgYwW";
@@ -537,8 +551,13 @@ uint16_t GetSolarMonthDays(uint16_t year, uint16_t month) {
 }
 
 uint16_t GetWeekDay(uint16_t year, uint16_t month, uint16_t day) {
+#if !defined(__QNX__) || __QNX__ >= 800
   static constexpr auto kMonthDay =
       fxcrt::ToArray<const uint8_t>({0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5});
+#else
+  constexpr uint8_t a540[] = {0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5};
+  static constexpr auto kMonthDay =      fxcrt::ToArray<const uint8_t>(a540);
+#endif
   uint16_t nDays =
       (year - 1) % 7 + (year - 1) / 4 - (year - 1) / 100 + (year - 1) / 400;
   nDays += kMonthDay[month - 1] + day;
diff --git a/xfa/fgas/font/cfgas_fontmgr.cpp b/xfa/fgas/font/cfgas_fontmgr.cpp
index 8c01e595b..06508d8d2 100644
--- a/xfa/fgas/font/cfgas_fontmgr.cpp
+++ b/xfa/fgas/font/cfgas_fontmgr.cpp
@@ -309,6 +309,7 @@ const FX_FONTDESCRIPTOR* CFGAS_FontMgr::FindFont(const wchar_t* pszFontFamily,
 
 namespace {
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kCodePages =
     fxcrt::ToArray<const FX_CodePage>({FX_CodePage::kMSWin_WesternEuropean,
                                        FX_CodePage::kMSWin_EasternEuropean,
@@ -374,6 +375,73 @@ constexpr auto kCodePages =
                                        FX_CodePage::kArabic_ASMO708,
                                        FX_CodePage::kMSDOS_WesternEuropean,
                                        FX_CodePage::kMSDOS_US});
+#else
+constexpr FX_CodePage a312[] = {FX_CodePage::kMSWin_WesternEuropean,
+                                       FX_CodePage::kMSWin_EasternEuropean,
+                                       FX_CodePage::kMSWin_Cyrillic,
+                                       FX_CodePage::kMSWin_Greek,
+                                       FX_CodePage::kMSWin_Turkish,
+                                       FX_CodePage::kMSWin_Hebrew,
+                                       FX_CodePage::kMSWin_Arabic,
+                                       FX_CodePage::kMSWin_Baltic,
+                                       FX_CodePage::kMSWin_Vietnamese,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kMSDOS_Thai,
+                                       FX_CodePage::kShiftJIS,
+                                       FX_CodePage::kChineseSimplified,
+                                       FX_CodePage::kHangul,
+                                       FX_CodePage::kChineseTraditional,
+                                       FX_CodePage::kJohab,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kDefANSI,
+                                       FX_CodePage::kMSDOS_Greek2,
+                                       FX_CodePage::kMSDOS_Russian,
+                                       FX_CodePage::kMSDOS_Norwegian,
+                                       FX_CodePage::kMSDOS_Arabic,
+                                       FX_CodePage::kMSDOS_FrenchCanadian,
+                                       FX_CodePage::kMSDOS_Hebrew,
+                                       FX_CodePage::kMSDOS_Icelandic,
+                                       FX_CodePage::kMSDOS_Portuguese,
+                                       FX_CodePage::kMSDOS_Turkish,
+                                       FX_CodePage::kMSDOS_Cyrillic,
+                                       FX_CodePage::kMSDOS_EasternEuropean,
+                                       FX_CodePage::kMSDOS_Baltic,
+                                       FX_CodePage::kMSDOS_Greek1,
+                                       FX_CodePage::kArabic_ASMO708,
+                                       FX_CodePage::kMSDOS_WesternEuropean,
+                                       FX_CodePage::kMSDOS_US};
+constexpr auto kCodePages =    fxcrt::ToArray<const FX_CodePage>(a312);
+#endif
 
 uint16_t FX_GetCodePageBit(FX_CodePage wCodePage) {
   for (size_t i = 0; i < kCodePages.size(); ++i) {
diff --git a/xfa/fgas/font/cfgas_pdffontmgr.cpp b/xfa/fgas/font/cfgas_pdffontmgr.cpp
index dd89b0f20..c72f8f217 100644
--- a/xfa/fgas/font/cfgas_pdffontmgr.cpp
+++ b/xfa/fgas/font/cfgas_pdffontmgr.cpp
@@ -26,11 +26,20 @@ namespace {
 
 // The 5 names per entry are: PsName, Normal, Bold, Italic, BoldItalic.
 using FontNameEntry = std::array<const char*, 5>;
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kXFAPDFFontNameTable = fxcrt::ToArray<const FontNameEntry>({
     {{"Adobe PI Std", "AdobePIStd", "AdobePIStd", "AdobePIStd", "AdobePIStd"}},
     {{"Myriad Pro Light", "MyriadPro-Light", "MyriadPro-Semibold",
       "MyriadPro-LightIt", "MyriadPro-SemiboldIt"}},
 });
+#else
+constexpr FontNameEntry a29[] = {
+    {{"Adobe PI Std", "AdobePIStd", "AdobePIStd", "AdobePIStd", "AdobePIStd"}},
+    {{"Myriad Pro Light", "MyriadPro-Light", "MyriadPro-Semibold",
+      "MyriadPro-LightIt", "MyriadPro-SemiboldIt"}},
+};
+constexpr auto kXFAPDFFontNameTable = fxcrt::ToArray<const FontNameEntry>(a29);
+#endif
 
 ByteString PsNameToFontName(const ByteString& strPsName,
                             bool bBold,
diff --git a/xfa/fgas/graphics/cfgas_gegraphics.cpp b/xfa/fgas/graphics/cfgas_gegraphics.cpp
index b9d11a502..2cd582b7d 100644
--- a/xfa/fgas/graphics/cfgas_gegraphics.cpp
+++ b/xfa/fgas/graphics/cfgas_gegraphics.cpp
@@ -34,6 +34,7 @@ struct FX_HATCHDATA {
   uint8_t maskBits[64];
 };
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kHatchBitmapData = fxcrt::ToArray<const FX_HATCHDATA>({
     {16,  // Horizontal
      16,
@@ -96,6 +97,71 @@ constexpr auto kHatchBitmapData = fxcrt::ToArray<const FX_HATCHDATA>({
          0x00, 0x42, 0x42, 0x00, 0x00, 0x81, 0x81, 0x00, 0x00,
      }},
 });
+#else
+constexpr FX_HATCHDATA a37[] = {
+    {16,  // Horizontal
+     16,
+     {
+         0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+         0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+     }},
+    {16,  // Vertical
+     16,
+     {
+         0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00,
+         0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80,
+         0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80,
+         0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
+         0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00,
+         0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
+     }},
+    {16,  // ForwardDiagonal
+     16,
+     {
+         0x80, 0x80, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x20, 0x20, 0x00,
+         0x00, 0x10, 0x10, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x04, 0x04,
+         0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x80,
+         0x80, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00,
+         0x10, 0x10, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x04, 0x04, 0x00,
+         0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
+     }},
+    {16,  // BackwardDiagonal
+     16,
+     {
+         0x01, 0x01, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x04, 0x04, 0x00,
+         0x00, 0x08, 0x08, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x20, 0x20,
+         0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x01,
+         0x01, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00,
+         0x08, 0x08, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x20, 0x20, 0x00,
+         0x00, 0x40, 0x40, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
+     }},
+    {16,  // Cross
+     16,
+     {
+         0xff, 0xff, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00,
+         0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80,
+         0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0xff,
+         0xff, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
+         0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00,
+         0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
+     }},
+    {16,  // DiagonalCross
+     16,
+     {
+         0x81, 0x81, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x24, 0x24, 0x00,
+         0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x24, 0x24,
+         0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x81, 0x81, 0x00, 0x00, 0x81,
+         0x81, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00,
+         0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x24, 0x24, 0x00,
+         0x00, 0x42, 0x42, 0x00, 0x00, 0x81, 0x81, 0x00, 0x00,
+     }},
+};
+constexpr auto kHatchBitmapData = fxcrt::ToArray<const FX_HATCHDATA>(a37);
+#endif
 
 const FX_HATCHDATA kHatchPlaceHolder = {
     0,
diff --git a/xfa/fgas/layout/cfgas_char.cpp b/xfa/fgas/layout/cfgas_char.cpp
index 68b27c9a0..54ce5a535 100644
--- a/xfa/fgas/layout/cfgas_char.cpp
+++ b/xfa/fgas/layout/cfgas_char.cpp
@@ -99,6 +99,7 @@ enum FX_BIDINEUTRALACTION : uint16_t {
 };
 #undef PACK_NIBBLES
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kNTypes = fxcrt::ToArray<const FX_BIDICLASS>(
     {FX_BIDICLASS::kN,   FX_BIDICLASS::kL,   FX_BIDICLASS::kR,
      FX_BIDICLASS::kAN,  FX_BIDICLASS::kEN,  FX_BIDICLASS::kAL,
@@ -107,6 +108,16 @@ constexpr auto kNTypes = fxcrt::ToArray<const FX_BIDICLASS>(
      FX_BIDICLASS::kN,   FX_BIDICLASS::kB,   FX_BIDICLASS::kRLO,
      FX_BIDICLASS::kRLE, FX_BIDICLASS::kLRO, FX_BIDICLASS::kLRE,
      FX_BIDICLASS::kPDF, FX_BIDICLASS::kON});
+#else
+constexpr FX_BIDICLASS a102[] = {FX_BIDICLASS::kN,   FX_BIDICLASS::kL,   FX_BIDICLASS::kR,
+     FX_BIDICLASS::kAN,  FX_BIDICLASS::kEN,  FX_BIDICLASS::kAL,
+     FX_BIDICLASS::kNSM, FX_BIDICLASS::kCS,  FX_BIDICLASS::kES,
+     FX_BIDICLASS::kET,  FX_BIDICLASS::kBN,  FX_BIDICLASS::kBN,
+     FX_BIDICLASS::kN,   FX_BIDICLASS::kB,   FX_BIDICLASS::kRLO,
+     FX_BIDICLASS::kRLE, FX_BIDICLASS::kLRO, FX_BIDICLASS::kLRE,
+     FX_BIDICLASS::kPDF, FX_BIDICLASS::kON};
+constexpr auto kNTypes = fxcrt::ToArray<const FX_BIDICLASS>(a102);
+#endif
 
 using WeakStateRow = std::array<const FX_BIDIWEAKSTATE, 10>;
 constexpr std::array<const WeakStateRow, 20> kWeakStateTable = {{
diff --git a/xfa/fgas/layout/fgas_arabic.cpp b/xfa/fgas/layout/fgas_arabic.cpp
index ae3bc8aea..b4ce2bc13 100644
--- a/xfa/fgas/layout/fgas_arabic.cpp
+++ b/xfa/fgas/layout/fgas_arabic.cpp
@@ -27,6 +27,7 @@ struct FX_ARAALEF {
   uint16_t wIsolated;
 };
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kFormTable = fxcrt::ToArray<const FX_ARBFORMTABLE>({
     {0xFE81, 0xFE82, 0xFE81, 0xFE82}, {0xFE83, 0xFE84, 0xFE83, 0xFE84},
     {0xFE85, 0xFE86, 0xFE85, 0xFE86}, {0xFE87, 0xFE88, 0xFE87, 0xFE88},
@@ -119,6 +120,101 @@ constexpr auto kFormTable = fxcrt::ToArray<const FX_ARBFORMTABLE>({
     {0xFBAE, 0xFBAF, 0xFBAE, 0xFBAF}, {0xFBB0, 0xFBB1, 0xFBB0, 0xFBB1},
     {0x06D4, 0x06D4, 0x06D4, 0x06D4}, {0x06D5, 0x06D5, 0x06D5, 0x06D5},
 });
+#else
+constexpr FX_ARBFORMTABLE a30[] = {
+    {0xFE81, 0xFE82, 0xFE81, 0xFE82}, {0xFE83, 0xFE84, 0xFE83, 0xFE84},
+    {0xFE85, 0xFE86, 0xFE85, 0xFE86}, {0xFE87, 0xFE88, 0xFE87, 0xFE88},
+    {0xFE89, 0xFE8A, 0xFE8B, 0xFE8C}, {0xFE8D, 0xFE8E, 0xFE8D, 0xFE8E},
+    {0xFE8F, 0xFE90, 0xFE91, 0xFE92}, {0xFE93, 0xFE94, 0xFE93, 0xFE94},
+    {0xFE95, 0xFE96, 0xFE97, 0xFE98}, {0xFE99, 0xFE9A, 0xFE9B, 0xFE9C},
+    {0xFE9D, 0xFE9E, 0xFE9F, 0xFEA0}, {0xFEA1, 0xFEA2, 0xFEA3, 0xFEA4},
+    {0xFEA5, 0xFEA6, 0xFEA7, 0xFEA8}, {0xFEA9, 0xFEAA, 0xFEA9, 0xFEAA},
+    {0xFEAB, 0xFEAC, 0xFEAB, 0xFEAC}, {0xFEAD, 0xFEAE, 0xFEAD, 0xFEAE},
+    {0xFEAF, 0xFEB0, 0xFEAF, 0xFEB0}, {0xFEB1, 0xFEB2, 0xFEB3, 0xFEB4},
+    {0xFEB5, 0xFEB6, 0xFEB7, 0xFEB8}, {0xFEB9, 0xFEBA, 0xFEBB, 0xFEBC},
+    {0xFEBD, 0xFEBE, 0xFEBF, 0xFEC0}, {0xFEC1, 0xFEC2, 0xFEC3, 0xFEC4},
+    {0xFEC5, 0xFEC6, 0xFEC7, 0xFEC8}, {0xFEC9, 0xFECA, 0xFECB, 0xFECC},
+    {0xFECD, 0xFECE, 0xFECF, 0xFED0}, {0x063B, 0x063B, 0x063B, 0x063B},
+    {0x063C, 0x063C, 0x063C, 0x063C}, {0x063D, 0x063D, 0x063D, 0x063D},
+    {0x063E, 0x063E, 0x063E, 0x063E}, {0x063F, 0x063F, 0x063F, 0x063F},
+    {0x0640, 0x0640, 0x0640, 0x0640}, {0xFED1, 0xFED2, 0xFED3, 0xFED4},
+    {0xFED5, 0xFED6, 0xFED7, 0xFED8}, {0xFED9, 0xFEDA, 0xFEDB, 0xFEDC},
+    {0xFEDD, 0xFEDE, 0xFEDF, 0xFEE0}, {0xFEE1, 0xFEE2, 0xFEE3, 0xFEE4},
+    {0xFEE5, 0xFEE6, 0xFEE7, 0xFEE8}, {0xFEE9, 0xFEEA, 0xFEEB, 0xFEEC},
+    {0xFEED, 0xFEEE, 0xFEED, 0xFEEE}, {0xFEEF, 0xFEF0, 0xFBFE, 0xFBFF},
+    {0xFEF1, 0xFEF2, 0xFEF3, 0xFEF4}, {0x064B, 0x064B, 0x064B, 0x064B},
+    {0x064C, 0x064C, 0x064C, 0x064C}, {0x064D, 0x064D, 0x064D, 0x064D},
+    {0x064E, 0x064E, 0x064E, 0x064E}, {0x064F, 0x064F, 0x064F, 0x064F},
+    {0x0650, 0x0650, 0x0650, 0x0650}, {0x0651, 0x0651, 0x0651, 0x0651},
+    {0x0652, 0x0652, 0x0652, 0x0652}, {0x0653, 0x0653, 0x0653, 0x0653},
+    {0x0654, 0x0654, 0x0654, 0x0654}, {0x0655, 0x0655, 0x0655, 0x0655},
+    {0x0656, 0x0656, 0x0656, 0x0656}, {0x0657, 0x0657, 0x0657, 0x0657},
+    {0x0658, 0x0658, 0x0658, 0x0658}, {0x0659, 0x0659, 0x0659, 0x0659},
+    {0x065A, 0x065A, 0x065A, 0x065A}, {0x065B, 0x065B, 0x065B, 0x065B},
+    {0x065C, 0x065C, 0x065C, 0x065C}, {0x065D, 0x065D, 0x065D, 0x065D},
+    {0x065E, 0x065E, 0x065E, 0x065E}, {0x065F, 0x065F, 0x065F, 0x065F},
+    {0x0660, 0x0660, 0x0660, 0x0660}, {0x0661, 0x0661, 0x0661, 0x0661},
+    {0x0662, 0x0662, 0x0662, 0x0662}, {0x0663, 0x0663, 0x0663, 0x0663},
+    {0x0664, 0x0664, 0x0664, 0x0664}, {0x0665, 0x0665, 0x0665, 0x0665},
+    {0x0666, 0x0666, 0x0666, 0x0666}, {0x0667, 0x0667, 0x0667, 0x0667},
+    {0x0668, 0x0668, 0x0668, 0x0668}, {0x0669, 0x0669, 0x0669, 0x0669},
+    {0x066A, 0x066A, 0x066A, 0x066A}, {0x066B, 0x066B, 0x066B, 0x066B},
+    {0x066C, 0x066C, 0x066C, 0x066C}, {0x066D, 0x066D, 0x066D, 0x066D},
+    {0x066E, 0x066E, 0x066E, 0x066E}, {0x066F, 0x066F, 0x066F, 0x066F},
+    {0x0670, 0x0670, 0x0670, 0x0670}, {0xFB50, 0xFB51, 0xFB50, 0xFB51},
+    {0x0672, 0x0672, 0x0672, 0x0672}, {0x0673, 0x0673, 0x0673, 0x0673},
+    {0x0674, 0x0674, 0x0674, 0x0674}, {0x0675, 0x0675, 0x0675, 0x0675},
+    {0x0676, 0x0676, 0x0676, 0x0676}, {0x0677, 0x0677, 0x0677, 0x0677},
+    {0x0678, 0x0678, 0x0678, 0x0678}, {0xFB66, 0xFB67, 0xFB68, 0xFB69},
+    {0xFB5E, 0xFB5F, 0xFB60, 0xFB61}, {0xFB52, 0xFB53, 0xFB54, 0xFB55},
+    {0x067C, 0x067C, 0x067C, 0x067C}, {0x067D, 0x067D, 0x067D, 0x067D},
+    {0xFB56, 0xFB57, 0xFB58, 0xFB59}, {0xFB62, 0xFB63, 0xFB64, 0xFB65},
+    {0xFB5A, 0xFB5B, 0xFB5C, 0xFB5D}, {0x0681, 0x0681, 0x0681, 0x0681},
+    {0x0682, 0x0682, 0x0682, 0x0682}, {0xFB76, 0xFB77, 0xFB78, 0xFB79},
+    {0xFB72, 0xFB73, 0xFB74, 0xFB75}, {0x0685, 0x0685, 0x0685, 0x0685},
+    {0xFB7A, 0xFB7B, 0xFB7C, 0xFB7D}, {0xFB7E, 0xFB7F, 0xFB80, 0xFB81},
+    {0xFB88, 0xFB89, 0xFB88, 0xFB89}, {0x0689, 0x0689, 0x0689, 0x0689},
+    {0x068A, 0x068A, 0x068A, 0x068A}, {0x068B, 0x068B, 0x068B, 0x068B},
+    {0xFB84, 0xFB85, 0xFB84, 0xFB85}, {0xFB82, 0xFB83, 0xFB82, 0xFB83},
+    {0xFB86, 0xFB87, 0xFB86, 0xFB87}, {0x068F, 0x068F, 0x068F, 0x068F},
+    {0x0690, 0x0690, 0x0690, 0x0690}, {0xFB8C, 0xFB8D, 0xFB8C, 0xFB8D},
+    {0x0692, 0x0692, 0x0692, 0x0692}, {0x0693, 0x0693, 0x0693, 0x0693},
+    {0x0694, 0x0694, 0x0694, 0x0694}, {0x0695, 0x0695, 0x0695, 0x0695},
+    {0x0696, 0x0696, 0x0696, 0x0696}, {0x0697, 0x0697, 0x0697, 0x0697},
+    {0xFB8A, 0xFB8B, 0xFB8A, 0xFB8B}, {0x0699, 0x0699, 0x0699, 0x0699},
+    {0x069A, 0x069A, 0x069A, 0x069A}, {0x069B, 0x069B, 0x069B, 0x069B},
+    {0x069C, 0x069C, 0x069C, 0x069C}, {0x069D, 0x069D, 0x069D, 0x069D},
+    {0x069E, 0x069E, 0x069E, 0x069E}, {0x069F, 0x069F, 0x069F, 0x069F},
+    {0x06A0, 0x06A0, 0x06A0, 0x06A0}, {0x06A1, 0x06A1, 0x06A1, 0x06A1},
+    {0x06A2, 0x06A2, 0x06A2, 0x06A2}, {0x06A3, 0x06A3, 0x06A3, 0x06A3},
+    {0xFB6A, 0xFB6B, 0xFB6C, 0xFB6D}, {0x06A5, 0x06A5, 0x06A5, 0x06A5},
+    {0xFB6E, 0xFB6F, 0xFB70, 0xFB71}, {0x06A7, 0x06A7, 0x06A7, 0x06A7},
+    {0x06A8, 0x06A8, 0x06A8, 0x06A8}, {0xFB8E, 0xFB8F, 0xFB90, 0xFB91},
+    {0x06AA, 0x06AA, 0x06AA, 0x06AA}, {0x06AB, 0x06AB, 0x06AB, 0x06AB},
+    {0x06AC, 0x06AC, 0x06AC, 0x06AC}, {0xFBD3, 0xFBD4, 0xFBD5, 0xFBD6},
+    {0x06AE, 0x06AE, 0x06AE, 0x06AE}, {0xFB92, 0xFB93, 0xFB94, 0xFB95},
+    {0x06B0, 0x06B0, 0x06B0, 0x06B0}, {0xFB9A, 0xFB9B, 0xFB9C, 0xFB9D},
+    {0x06B2, 0x06B2, 0x06B2, 0x06B2}, {0xFB96, 0xFB97, 0xFB98, 0xFB99},
+    {0x06B4, 0x06B4, 0x06B4, 0x06B4}, {0x06B5, 0x06B5, 0x06B5, 0x06B5},
+    {0x06B6, 0x06B6, 0x06B6, 0x06B6}, {0x06B7, 0x06B7, 0x06B7, 0x06B7},
+    {0x06B8, 0x06B8, 0x06B8, 0x06B8}, {0x06B9, 0x06B9, 0x06B9, 0x06B9},
+    {0xFB9E, 0xFB9F, 0xFBE8, 0xFBE9}, {0xFBA0, 0xFBA1, 0xFBA2, 0xFBA3},
+    {0x06BC, 0x06BC, 0x06BC, 0x06BC}, {0x06BD, 0x06BD, 0x06BD, 0x06BD},
+    {0xFBAA, 0xFBAB, 0xFBAC, 0xFBAD}, {0x06BF, 0x06BF, 0x06BF, 0x06BF},
+    {0xFBA4, 0xFBA5, 0xFBA4, 0xFBA5}, {0xFBA6, 0xFBA7, 0xFBA8, 0xFBA9},
+    {0x06C2, 0x06C2, 0x06C2, 0x06C2}, {0x06C3, 0x06C3, 0x06C3, 0x06C3},
+    {0x06C4, 0x06C4, 0x06C4, 0x06C4}, {0xFBE0, 0xFBE1, 0xFBE0, 0xFBE1},
+    {0xFBD9, 0xFBDA, 0xFBD9, 0xFBDA}, {0xFBD7, 0xFBD8, 0xFBD7, 0xFBD8},
+    {0xFBDB, 0xFBDC, 0xFBDB, 0xFBDC}, {0xFBE2, 0xFBE3, 0xFBE2, 0xFBE3},
+    {0x06CA, 0x06CA, 0x06CA, 0x06CA}, {0xFBDE, 0xFBDF, 0xFBDE, 0xFBDF},
+    {0xFBFC, 0xFBFD, 0xFBFE, 0xFBFF}, {0x06CD, 0x06CD, 0x06CD, 0x06CD},
+    {0x06CE, 0x06CE, 0x06CE, 0x06CE}, {0x06CF, 0x06CF, 0x06CF, 0x06CF},
+    {0xFBE4, 0xFBE5, 0xFBE6, 0xFBE7}, {0x06D1, 0x06D1, 0x06D1, 0x06D1},
+    {0xFBAE, 0xFBAF, 0xFBAE, 0xFBAF}, {0xFBB0, 0xFBB1, 0xFBB0, 0xFBB1},
+    {0x06D4, 0x06D4, 0x06D4, 0x06D4}, {0x06D5, 0x06D5, 0x06D5, 0x06D5},
+};
+constexpr auto kFormTable = fxcrt::ToArray<const FX_ARBFORMTABLE>(a30);
+#endif
 constexpr uint16_t kFirstFormTableEntry = 0x0622;
 constexpr uint16_t kLastFormTableEntry =
     kFirstFormTableEntry + std::size(kFormTable) - 1;
@@ -130,6 +226,7 @@ constexpr FX_ARAALEF kAlefTable[] = {
     {0x0627, 0xFEFB},
 };
 
+#if !defined(__QNX__) || __QNX__ >= 800
 constexpr auto kShaddaTable = fxcrt::ToArray<const uint16_t>({
     0xFC5E,
     0xFC5F,
@@ -137,6 +234,16 @@ constexpr auto kShaddaTable = fxcrt::ToArray<const uint16_t>({
     0xFC61,
     0xFC62,
 });
+#else
+constexpr uint16_t a133[] = {
+    0xFC5E,
+    0xFC5F,
+    0xFC60,
+    0xFC61,
+    0xFC62,
+};
+constexpr auto kShaddaTable = fxcrt::ToArray<const uint16_t>(a133);
+#endif
 constexpr uint16_t kFirstShaddaTableEntry = 0x064c;
 constexpr uint16_t kLastShaddaTableEntry =
     kFirstShaddaTableEntry + std::size(kShaddaTable) - 1;
-- 
2.34.1

