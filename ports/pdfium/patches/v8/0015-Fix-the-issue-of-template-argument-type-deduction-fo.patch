From 2158c58d45c2111ceb8e7b5c83eed3a7575cbf6a Mon Sep 17 00:00:00 2001
From: Yongxin Dai <yodai@qnx.com>
Date: Wed, 9 Jul 2025 08:50:08 -0400
Subject: [PATCH] Fix the issue of template argument type deduction for SDP7

---
 include/v8-memory-span.h            |   5 ++
 src/compiler/turboshaft/assembler.h |  21 +++++
 src/d8/d8.cc                        |   5 ++
 src/inspector/v8-console.cc         |  10 +++
 test/cctest/test-api.cc             |  50 ++++++++++++
 test/cctest/test-js-to-wasm.cc      | 122 ++++++++++++++++++++++++++++
 6 files changed, 213 insertions(+)

diff --git a/include/v8-memory-span.h b/include/v8-memory-span.h
index 7556b20fa94..eaf218ba984 100644
--- a/include/v8-memory-span.h
+++ b/include/v8-memory-span.h
@@ -286,7 +286,12 @@ class V8_EXPORT MemorySpan {
  * the provided initializer list, without explicitly specifying the array size,
  * e.g.
  *
+#if !defined(__QNX__) || __QNX__ >= 800
  *   auto arr = v8::to_array<Local<String>>({v8_str("one"), v8_str("two")});
+#else
+ const Local<String> a289[] = {v8_str("one"), v8_str("two")};
+ *   auto arr = v8::to_array<Local<String>>(a289);
+#endif
  *
  * In the future, this may be replaced with or aliased to std::to_array (under
  * consideration for C++20).
diff --git a/src/compiler/turboshaft/assembler.h b/src/compiler/turboshaft/assembler.h
index 207d7ed15f3..a1d4a099f25 100644
--- a/src/compiler/turboshaft/assembler.h
+++ b/src/compiler/turboshaft/assembler.h
@@ -197,8 +197,13 @@ template <typename T>
 class IndexRange : public Range<T> {
  public:
   using base = Range<T>;
+#if !defined(__QNX__) || __QNX__ >= 800
   using value_type = base::value_type;
   using iterator_type = base::iterator_type;
+#else
+  using value_type = typename base::value_type;
+  using iterator_type = typename base::iterator_type;
+#endif
 
   explicit IndexRange(ConstOrV<T> count) : Range<T>(0, count, 1) {}
 };
@@ -226,8 +231,13 @@ class Sequence : private Range<T> {
   using base = Range<T>;
 
  public:
+#if !defined(__QNX__) || __QNX__ >= 800
   using value_type = base::value_type;
   using iterator_type = base::iterator_type;
+#else
+  using value_type = typename base::value_type;
+  using iterator_type = typename base::iterator_type;
+#endif
 
   explicit Sequence(ConstOrV<T> begin, ConstOrV<T> stride = 1)
       : base(begin, 0, stride) {}
@@ -804,14 +814,25 @@ struct ReducerStack {
   static constexpr size_t ep_index =
       reducer_list_index_of<WithGeneric, ValueNumberingReducer,
                             base_index>::value;
+#if !defined(__QNX__) || __QNX__ >= 800
   using WithGenericAndEmitProjection =
       reducer_list_insert_at<WithGeneric, ep_index,
                              EmitProjectionReducer>::type;
+#else
+  using WithGenericAndEmitProjection =
+      typename reducer_list_insert_at<WithGeneric, ep_index,
+                             EmitProjectionReducer>::type;
+#endif
   static_assert(reducer_list_length<WithGenericAndEmitProjection>::value ==
                 length + 2);
 
+#if !defined(__QNX__) || __QNX__ >= 800
   using type = reducer_list_to_stack<WithGenericAndEmitProjection,
                                      StackBottom<ReducerList>>::type;
+#else
+  using type =  typename reducer_list_to_stack<WithGenericAndEmitProjection,
+                                     StackBottom<ReducerList>>::type;
+#endif
 };
 
 template <typename Next>
diff --git a/src/d8/d8.cc b/src/d8/d8.cc
index 49a8b5de6d0..566360e28bf 100644
--- a/src/d8/d8.cc
+++ b/src/d8/d8.cc
@@ -1252,8 +1252,13 @@ MaybeLocal<Module> Shell::FetchModuleTree(Local<Module> referrer,
       return MaybeLocal<Module>();
     }
 
+#if !defined(__QNX__) || __QNX__ >= 800
     auto export_names = v8::to_array<Local<String>>(
         {String::NewFromUtf8(isolate, "default").ToLocalChecked()});
+#else
+    const Local<String> a1255[] = {String::NewFromUtf8(isolate, "default").ToLocalChecked()};
+    auto export_names = v8::to_array<Local<String>>(a1255);
+#endif
 
     module = v8::Module::CreateSyntheticModule(
         isolate,
diff --git a/src/inspector/v8-console.cc b/src/inspector/v8-console.cc
index 5e70445ba74..968f7f8f951 100644
--- a/src/inspector/v8-console.cc
+++ b/src/inspector/v8-console.cc
@@ -95,8 +95,13 @@ class ConsoleHelper {
   }
 
   void reportCallWithArgument(ConsoleAPIType type, const String16& message) {
+#if !defined(__QNX__) || __QNX__ >= 800
     auto arguments =
         v8::to_array<v8::Local<v8::Value>>({toV8String(isolate(), message)});
+#else
+    const v8::Local<v8::Value> a98[] = {toV8String(isolate(), message)};
+    auto arguments =        v8::to_array<v8::Local<v8::Value>>(a98);
+#endif
     reportCall(type, arguments);
   }
 
@@ -153,8 +158,13 @@ class ConsoleHelper {
                                                                  id)) {
       return;
     }
+#if !defined(__QNX__) || __QNX__ >= 800
     auto arguments =
         v8::to_array<v8::Local<v8::Value>>({toV8String(isolate(), message)});
+#else
+    const v8::Local<v8::Value> a156[] = {toV8String(isolate(), message)};
+    auto arguments =        v8::to_array<v8::Local<v8::Value>>(a156);
+#endif
     reportCall(ConsoleAPIType::kWarning, arguments);
   }
 
diff --git a/test/cctest/test-api.cc b/test/cctest/test-api.cc
index 1f6e4062ffc..92ddbe42a6a 100644
--- a/test/cctest/test-api.cc
+++ b/test/cctest/test-api.cc
@@ -5403,7 +5403,12 @@ THREADED_TEST(Array_New_FromVector) {
   LocalContext context;
   v8::HandleScope scope(context->GetIsolate());
   Local<v8::Array> array;
+#if !defined(__QNX__) || __QNX__ >= 800
   auto numbers = v8::to_array<Local<Value>>({v8_num(1), v8_num(2), v8_num(3)});
+#else
+  const Local<Value> a5406[] = {v8_num(1), v8_num(2), v8_num(3)};
+  auto numbers = v8::to_array<Local<Value>>(a5406);
+#endif
   array = v8::Array::New(context->GetIsolate(), numbers.data(), numbers.size());
   CHECK_EQ(numbers.size(), array->Length());
   ExpectArrayValues({1, 2, 3}, context.local(), array);
@@ -24186,7 +24191,12 @@ Local<Module> CompileAndInstantiateModuleFromCache(
 v8::MaybeLocal<Module> SyntheticModuleResolveCallback(
     Local<Context> context, Local<String> specifier,
     Local<FixedArray> import_attributes, Local<Module> referrer) {
+#if !defined(__QNX__) || __QNX__ >= 800
   auto export_names = v8::to_array<Local<v8::String>>({v8_str("test_export")});
+#else
+  const Local<v8::String> a24189[] = {v8_str("test_export")};
+  auto export_names = v8::to_array<Local<v8::String>>(a24189);
+#endif
   Local<Module> module = CreateAndInstantiateSyntheticModule(
       context->GetIsolate(),
       v8_str("SyntheticModuleResolveCallback-TestSyntheticModule"), context,
@@ -24197,7 +24207,12 @@ v8::MaybeLocal<Module> SyntheticModuleResolveCallback(
 v8::MaybeLocal<Module> SyntheticModuleThatThrowsDuringEvaluateResolveCallback(
     Local<Context> context, Local<String> specifier,
     Local<FixedArray> import_attributes, Local<Module> referrer) {
+#if !defined(__QNX__) || __QNX__ >= 800
   auto export_names = v8::to_array<Local<v8::String>>({v8_str("test_export")});
+#else
+  const Local<v8::String> a24200[] = {v8_str("test_export")};
+  auto export_names = v8::to_array<Local<v8::String>>(a24200);
+#endif
   Local<Module> module = CreateAndInstantiateSyntheticModule(
       context->GetIsolate(),
       v8_str("SyntheticModuleThatThrowsDuringEvaluateResolveCallback-"
@@ -24294,7 +24309,12 @@ TEST(CreateSyntheticModule) {
   v8::Local<v8::Context> context = v8::Context::New(isolate);
   v8::Context::Scope cscope(context);
 
+#if !defined(__QNX__) || __QNX__ >= 800
   auto export_names = v8::to_array<Local<v8::String>>({v8_str("default")});
+#else
+  const Local<v8::String> a24297[] = {v8_str("default")};
+  auto export_names = v8::to_array<Local<v8::String>>(a24297);
+#endif
 
   Local<Module> module = CreateAndInstantiateSyntheticModule(
       isolate, v8_str("CreateSyntheticModule-TestSyntheticModule"), context,
@@ -24335,7 +24355,12 @@ TEST(CreateSyntheticModuleGC) {
   v8::Local<v8::Context> context = v8::Context::New(isolate);
   v8::Context::Scope cscope(context);
 
+#if !defined(__QNX__) || __QNX__ >= 800
   auto export_names = v8::to_array<Local<v8::String>>({v8_str("default")});
+#else
+  const Local<v8::String> a24338[] = {v8_str("default")};
+  auto export_names = v8::to_array<Local<v8::String>>(a24338);
+#endif
   v8::Local<v8::String> module_name =
       v8_str("CreateSyntheticModule-TestSyntheticModuleGC");
 
@@ -24359,7 +24384,12 @@ TEST(CreateSyntheticModuleGCName) {
 
   {
     v8::EscapableHandleScope inner_scope(isolate);
+#if !defined(__QNX__) || __QNX__ >= 800
     auto export_names = v8::to_array<Local<v8::String>>({v8_str("default")});
+#else
+    const Local<v8::String> a24362[] = {v8_str("default")};
+    auto export_names = v8::to_array<Local<v8::String>>(a24362);
+#endif
     v8::Local<v8::String> module_name =
         v8_str("CreateSyntheticModuleGCName-TestSyntheticModule");
     module = inner_scope.Escape(v8::Module::CreateSyntheticModule(
@@ -24386,7 +24416,12 @@ TEST(SyntheticModuleSetExports) {
 
   Local<String> foo_string = v8_str("foo");
   Local<String> bar_string = v8_str("bar");
+#if !defined(__QNX__) || __QNX__ >= 800
   auto export_names = v8::to_array<Local<v8::String>>({foo_string});
+#else
+  const Local<v8::String> a24389[] = {foo_string};
+  auto export_names = v8::to_array<Local<v8::String>>(a24389);
+#endif
 
   Local<Module> module = CreateAndInstantiateSyntheticModule(
       isolate, v8_str("SyntheticModuleSetExports-TestSyntheticModule"), context,
@@ -24452,7 +24487,12 @@ TEST(SyntheticModuleEvaluationStepsNoThrow) {
   v8::Local<v8::Context> context = v8::Context::New(isolate);
   v8::Context::Scope cscope(context);
 
+#if !defined(__QNX__) || __QNX__ >= 800
   auto export_names = v8::to_array<Local<v8::String>>({v8_str("default")});
+#else
+  const Local<v8::String> a24455[] = {v8_str("default")};
+  auto export_names = v8::to_array<Local<v8::String>>(a24455);
+#endif
 
   Local<Module> module = CreateAndInstantiateSyntheticModule(
       isolate,
@@ -24474,7 +24514,12 @@ TEST(SyntheticModuleEvaluationStepsThrow) {
   v8::Local<v8::Context> context = CcTest::isolate()->GetCurrentContext();
   v8::Context::Scope cscope(context);
 
+#if !defined(__QNX__) || __QNX__ >= 800
   auto export_names = v8::to_array<Local<v8::String>>({v8_str("default")});
+#else
+  const Local<v8::String> a24477[] = {v8_str("default")};
+  auto export_names = v8::to_array<Local<v8::String>>(a24477);
+#endif
 
   Local<Module> module = CreateAndInstantiateSyntheticModule(
       isolate,
@@ -24500,7 +24545,12 @@ TEST(SyntheticModuleEvaluationStepsSetExport) {
   v8::Context::Scope cscope(context);
 
   Local<String> test_export_string = v8_str("test_export");
+#if !defined(__QNX__) || __QNX__ >= 800
   auto export_names = v8::to_array<Local<v8::String>>({test_export_string});
+#else
+  const Local<v8::String> a24503[] = {test_export_string};
+  auto export_names = v8::to_array<Local<v8::String>>(a24503);
+#endif
 
   Local<Module> module = CreateAndInstantiateSyntheticModule(
       isolate,
diff --git a/test/cctest/test-js-to-wasm.cc b/test/cctest/test-js-to-wasm.cc
index 901fcbb2148..86dbd5b5c94 100644
--- a/test/cctest/test-js-to-wasm.cc
+++ b/test/cctest/test-js-to-wasm.cc
@@ -791,7 +791,12 @@ TEST(TestFastJSWasmCall_I32Arg) {
   v8::HandleScope scope(CcTest::isolate());
   FastJSWasmCallTester tester;
   tester.AddExportedFunction(k_i32_square);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args = v8::to_array<v8::Local<v8::Value>>({v8_num(42)});
+#else
+  const v8::Local<v8::Value> a794[] = {v8_num(42)};
+  auto args = v8::to_array<v8::Local<v8::Value>>(a794);
+#endif
   tester.CallAndCheckWasmFunction<int32_t>("i32_square", args, 42 * 42);
 }
 
@@ -799,8 +804,13 @@ TEST(TestFastJSWasmCall_I32ArgNotSmi) {
   v8::HandleScope scope(CcTest::isolate());
   FastJSWasmCallTester tester;
   tester.AddExportedFunction(k_add);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args =
       v8::to_array<v8::Local<v8::Value>>({v8_num(0x7fffffff), v8_int(1)});
+#else
+  const v8::Local<v8::Value> a802[] = {v8_num(0x7fffffff), v8_int(1)};
+  auto args =      v8::to_array<v8::Local<v8::Value>>(a802);
+#endif
   tester.CallAndCheckWasmFunction<int32_t>("add", args, 0x80000000);
 }
 
@@ -808,7 +818,12 @@ TEST(TestFastJSWasmCall_F32Arg) {
   v8::HandleScope scope(CcTest::isolate());
   FastJSWasmCallTester tester;
   tester.AddExportedFunction(k_f32_square);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args = v8::to_array<v8::Local<v8::Value>>({v8_num(42.0)});
+#else
+  const v8::Local<v8::Value> a811[] = {v8_num(42.0)};
+  auto args = v8::to_array<v8::Local<v8::Value>>(a811);
+#endif
   tester.CallAndCheckWasmFunction<float>("f32_square", args, 42.0 * 42.0);
 }
 
@@ -816,7 +831,12 @@ TEST(TestFastJSWasmCall_F64Arg) {
   v8::HandleScope scope(CcTest::isolate());
   FastJSWasmCallTester tester;
   tester.AddExportedFunction(k_f64_square);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args = v8::to_array<v8::Local<v8::Value>>({v8_num(42.0)});
+#else
+  const v8::Local<v8::Value> a819[] = {v8_num(42.0)};
+  auto args = v8::to_array<v8::Local<v8::Value>>(a819);
+#endif
   tester.CallAndCheckWasmFunction<double>("f64_square", args, 42.0 * 42.0);
 }
 
@@ -824,7 +844,12 @@ TEST(TestFastJSWasmCall_I64Arg) {
   v8::HandleScope scope(CcTest::isolate());
   FastJSWasmCallTester tester;
   tester.AddExportedFunction(k_i64_square);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args = v8::to_array<v8::Local<v8::Value>>({v8_bigint(1234567890ll)});
+#else
+  const v8::Local<v8::Value> a827[] = {v8_bigint(1234567890ll)};
+  auto args = v8::to_array<v8::Local<v8::Value>>(a827);
+#endif
   tester.CallAndCheckWasmFunctionBigInt("i64_square", args,
                                         v8_bigint(1234567890ll * 1234567890ll));
 }
@@ -833,8 +858,13 @@ TEST(TestFastJSWasmCall_I64NegativeResult) {
   v8::HandleScope scope(CcTest::isolate());
   FastJSWasmCallTester tester;
   tester.AddExportedFunction(k_i64_add);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args =
       v8::to_array<v8::Local<v8::Value>>({v8_bigint(1ll), v8_bigint(-2ll)});
+#else
+  const v8::Local<v8::Value> a836[] = {v8_bigint(1ll), v8_bigint(-2ll)};
+  auto args =      v8::to_array<v8::Local<v8::Value>>(a836);
+#endif
   tester.CallAndCheckWasmFunctionBigInt("i64_add", args, v8_bigint(-1ll));
 }
 
@@ -843,15 +873,35 @@ TEST(TestFastJSWasmCall_ExternrefNullArg) {
   FastJSWasmCallTester tester;
   tester.AddExportedFunction(k_externref_null_id);
   Local<Primitive> v8_null = v8::Null(CcTest::isolate());
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args1 = v8::to_array<v8::Local<v8::Value>>({v8_null});
+#else
+  const v8::Local<v8::Value> a846[] = {v8_null};
+  auto args1 = v8::to_array<v8::Local<v8::Value>>(a846);
+#endif
   tester.CallAndCheckWasmFunction("externref_null_id", args1, nullptr);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args2 = v8::to_array<v8::Local<v8::Value>>({v8_num(42)});
+#else
+  const v8::Local<v8::Value> a848[] = {v8_num(42)};
+  auto args2 = v8::to_array<v8::Local<v8::Value>>(a848);
+#endif
   tester.CallAndCheckWasmFunction("externref_null_id", args2, 42);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args3 = v8::to_array<v8::Local<v8::Value>>({v8_bigint(42)});
+#else
+  const v8::Local<v8::Value> a850[] = {v8_bigint(42)};
+  auto args3 = v8::to_array<v8::Local<v8::Value>>(a850);
+#endif
   tester.CallAndCheckWasmFunctionBigInt("externref_null_id", args3,
                                         v8_bigint(42));
   auto str = v8_str("test");
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args4 = v8::to_array<v8::Local<v8::Value>>({str});
+#else
+  const v8::Local<v8::Value> a854[] = {str};
+  auto args4 = v8::to_array<v8::Local<v8::Value>>(a854);
+#endif
   tester.CallAndCheckWasmFunction("externref_null_id", args4, str);
 }
 
@@ -859,9 +909,15 @@ TEST(TestFastJSWasmCall_MultipleArgs) {
   v8::HandleScope scope(CcTest::isolate());
   FastJSWasmCallTester tester;
   tester.AddExportedFunction(k_sum10);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args = v8::to_array<v8::Local<v8::Value>>(
       {v8_num(1), v8_num(2), v8_num(3), v8_num(4), v8_num(5), v8_num(6),
        v8_num(7), v8_num(8), v8_num(9), v8_num(10)});
+#else
+  const v8::Local<v8::Value> a862[] = {v8_num(1), v8_num(2), v8_num(3), v8_num(4), v8_num(5), v8_num(6),
+       v8_num(7), v8_num(8), v8_num(9), v8_num(10)};
+  auto args = v8::to_array<v8::Local<v8::Value>>(a862);
+#endif
   tester.CallAndCheckWasmFunction<int32_t>("sum10", args, 55);
 }
 
@@ -869,8 +925,13 @@ TEST(TestFastJSWasmCall_MixedArgs) {
   v8::HandleScope scope(CcTest::isolate());
   FastJSWasmCallTester tester;
   tester.AddExportedFunction(k_sum_mixed);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args = v8::to_array<v8::Local<v8::Value>>(
       {v8_num(1), v8_bigint(0x80000000), v8_num(42.0), v8_num(.5)});
+#else
+  const v8::Local<v8::Value> a872[] = {v8_num(1), v8_bigint(0x80000000), v8_num(42.0), v8_num(.5)};
+  auto args = v8::to_array<v8::Local<v8::Value>>(a872);
+#endif
   tester.CallAndCheckWasmFunction<double>("sum_mixed", args,
                                           1 + 0x80000000 + 42 + .5);
 }
@@ -880,7 +941,12 @@ TEST(TestFastJSWasmCall_MistypedArgs) {
   FastJSWasmCallTester tester;
 
   tester.AddExportedFunction(k_i32_square);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args = v8::to_array<v8::Local<v8::Value>>({v8_str("test")});
+#else
+  const v8::Local<v8::Value> a883[] = {v8_str("test")};
+  auto args = v8::to_array<v8::Local<v8::Value>>(a883);
+#endif
   tester.CallAndCheckWasmFunction<int32_t>("i32_square", args, 0);
 }
 
@@ -889,9 +955,15 @@ TEST(TestFastJSWasmCall_MixedMistypedArgs) {
   FastJSWasmCallTester tester;
 
   tester.AddExportedFunction(k_sum_mixed);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args = v8::to_array<v8::Local<v8::Value>>(
       {v8_str("alpha"), v8_bigint(0x80000000), v8_str("beta"),
        v8_str("gamma")});
+#else
+  const v8::Local<v8::Value> a892[] = {v8_str("alpha"), v8_bigint(0x80000000), v8_str("beta"),
+       v8_str("gamma")};
+  auto args = v8::to_array<v8::Local<v8::Value>>(a892);
+#endif
   tester.CallAndCheckWasmFunctionNaN("sum_mixed", args);
 }
 
@@ -908,7 +980,12 @@ TEST(TestFastJSWasmCall_NoReturnTypes) {
   FastJSWasmCallTester tester;
 
   tester.AddExportedFunction(k_void_square);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args = v8::to_array<v8::Local<v8::Value>>({v8_num(42)});
+#else
+  const v8::Local<v8::Value> a911[] = {v8_num(42)};
+  auto args = v8::to_array<v8::Local<v8::Value>>(a911);
+#endif
   tester.CallAndCheckWasmFunction("void_square", args);
 }
 
@@ -917,10 +994,20 @@ TEST(TestFastJSWasmCall_MismatchedArity) {
   FastJSWasmCallTester tester;
 
   tester.AddExportedFunction(k_sum3);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args1 = v8::to_array<v8::Local<v8::Value>>({v8_num(1), v8_num(2)});
+#else
+  const v8::Local<v8::Value> a920[] = {v8_num(1), v8_num(2)};
+  auto args1 = v8::to_array<v8::Local<v8::Value>>(a920);
+#endif
   tester.CallAndCheckWasmFunction<int32_t>("sum3", args1, 3);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args2 = v8::to_array<v8::Local<v8::Value>>(
       {v8_num(1), v8_num(2), v8_num(3), v8_num(4), v8_num(5), v8_num(6)});
+#else
+  const v8::Local<v8::Value> a922[] = {v8_num(1), v8_num(2), v8_num(3), v8_num(4), v8_num(5), v8_num(6)};
+  auto args2 = v8::to_array<v8::Local<v8::Value>>(a922);
+#endif
   tester.CallAndCheckWasmFunction<int32_t>("sum3", args2, 6);
   tester.CallAndCheckWasmFunction<int32_t>("sum3", {}, 0);
 }
@@ -932,7 +1019,12 @@ TEST(TestFastJSWasmCall_LazyDeopt_I32Result) {
   FastJSWasmCallTester tester;
   tester.DeclareCallback("callback", sigs.v_d(), "env");
   tester.AddExportedFunction(k_i32_square_deopt);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args = v8::to_array<v8::Local<v8::Value>>({v8_num(42)});
+#else
+  const v8::Local<v8::Value> a935[] = {v8_num(42)};
+  auto args = v8::to_array<v8::Local<v8::Value>>(a935);
+#endif
   tester.CallAndCheckWasmFunction<int32_t>("i32_square_deopt", args,
                                            43 * 43 + 1, true);
 }
@@ -943,13 +1035,23 @@ TEST(TestFastJSWasmCall_LazyDeopt_I64Result) {
   tester.DeclareCallback("callback", sigs.v_d(), "env");
   tester.AddExportedFunction(k_i64_square_deopt);
 
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args1 = v8::to_array<v8::Local<v8::Value>>({v8_bigint(42)});
+#else
+  const v8::Local<v8::Value> a946[] = {v8_bigint(42)};
+  auto args1 = v8::to_array<v8::Local<v8::Value>>(a946);
+#endif
   tester.CallAndCheckWasmFunctionBigInt("i64_square_deopt", args1,
                                         v8_bigint(43 * 43 + 1), true);
 
   // This test would fail if the result was converted into a HeapNumber through
   // a double, losing precision.
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args2 = v8::to_array<v8::Local<v8::Value>>({v8_bigint(1234567890ll)});
+#else
+  const v8::Local<v8::Value> a952[] = {v8_bigint(1234567890ll)};
+  auto args2 = v8::to_array<v8::Local<v8::Value>>(a952);
+#endif
   tester.CallAndCheckWasmFunctionBigInt(
       "i64_square_deopt", args2,
       v8_bigint(1524157877488187882ll),  // (1234567890 + 1)*(1234567890 + 1)+1
@@ -961,7 +1063,12 @@ TEST(TestFastJSWasmCall_LazyDeopt_F32Result) {
   FastJSWasmCallTester tester;
   tester.DeclareCallback("callback", sigs.v_d(), "env");
   tester.AddExportedFunction(k_f32_square_deopt);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args = v8::to_array<v8::Local<v8::Value>>({v8_num(42.0)});
+#else
+  const v8::Local<v8::Value> a964[] = {v8_num(42.0)};
+  auto args = v8::to_array<v8::Local<v8::Value>>(a964);
+#endif
   tester.CallAndCheckWasmFunction<float>("f32_square_deopt", args, 43 * 43 + 1,
                                          true);
 }
@@ -971,7 +1078,12 @@ TEST(TestFastJSWasmCall_LazyDeopt_F64Result) {
   FastJSWasmCallTester tester;
   tester.DeclareCallback("callback", sigs.v_d(), "env");
   tester.AddExportedFunction(k_f64_square_deopt);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args = v8::to_array<v8::Local<v8::Value>>({v8_num(42.0)});
+#else
+  const v8::Local<v8::Value> a974[] = {v8_num(42.0)};
+  auto args = v8::to_array<v8::Local<v8::Value>>(a974);
+#endif
   tester.CallAndCheckWasmFunction<float>("f64_square_deopt", args, 43 * 43 + 1,
                                          true);
 }
@@ -981,7 +1093,12 @@ TEST(TestFastJSWasmCall_LazyDeopt_VoidResult) {
   FastJSWasmCallTester tester;
   tester.DeclareCallback("callback", sigs.v_d(), "env");
   tester.AddExportedFunction(k_void_square_deopt);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args = v8::to_array<v8::Local<v8::Value>>({v8_num(42.0)});
+#else
+  const v8::Local<v8::Value> a984[] = {v8_num(42.0)};
+  auto args = v8::to_array<v8::Local<v8::Value>>(a984);
+#endif
   tester.CallAndCheckWasmFunction("void_square_deopt", args, true);
 }
 
@@ -1038,8 +1155,13 @@ TEST(TestFastJSWasmCall_Trap_void) {
   v8::HandleScope scope(CcTest::isolate());
   FastJSWasmCallTester tester;
   tester.AddExportedFunction(k_store_i32);
+#if !defined(__QNX__) || __QNX__ >= 800
   auto args =
       v8::to_array<v8::Local<v8::Value>>({v8_int(0x7fffffff), v8_int(42)});
+#else
+  const v8::Local<v8::Value> a1041[] = {v8_int(0x7fffffff), v8_int(42)};
+  auto args =      v8::to_array<v8::Local<v8::Value>>(a1041);
+#endif
   tester.CallAndCheckWithTryCatch_void("store_i32", args);
 }
 
-- 
2.34.1

