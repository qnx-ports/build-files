From 24548ce1592f670f3658dd0ef56bc25aa5e8dd65 Mon Sep 17 00:00:00 2001
From: Yongxin Dai <yodai@qnx.com>
Date: Mon, 7 Jul 2025 18:51:03 -0400
Subject: [PATCH] Fix circular dependency for SDP7

---
 src/objects/casting.h     | 147 -------------
 src/objects/tagged-impl.h | 278 +-----------------------
 src/objects/tagged.h      | 436 +++++++++++++++++++++++++++++++++++++-
 3 files changed, 428 insertions(+), 433 deletions(-)

diff --git a/src/objects/casting.h b/src/objects/casting.h
index 334ef0d418e..e8086610852 100644
--- a/src/objects/casting.h
+++ b/src/objects/casting.h
@@ -4,152 +4,5 @@
 
 #ifndef V8_OBJECTS_CASTING_H_
 #define V8_OBJECTS_CASTING_H_
-
-#include "include/v8-source-location.h"
-#include "src/base/logging.h"
 #include "src/objects/tagged.h"
-
-namespace v8::internal {
-
-// CastTraits<T> is a type trait that defines type checking behaviour for
-// tagged object casting. The expected specialization is:
-//
-//     template<>
-//     struct CastTraits<SomeObject> {
-//       template<typename From>
-//       static bool AllowFrom(Tagged<From> value) {
-//         return IsSomeObject(value);
-//       }
-//     };
-//
-// or, likely, just specializations of AllowFrom for Object and HeapObject,
-// under the assumption that the HeapObject implementation is the same for all
-// HeapObjects and the Object implementation has additional overhead in Smi
-// checks.
-//
-//     struct CastTraits<Object> {
-//       static bool AllowFrom(Tagged<HeapObject> value) {
-//         return IsSomeObject(value);
-//       }
-//       static bool AllowFrom(Tagged<Object> value) {
-//         return IsSomeObject(value);
-//       }
-//     };
-//
-template <typename To>
-struct CastTraits;
-
-// `Is<T>(value)` checks whether `value` is a tagged object of type `T`.
-template <typename T, typename U>
-inline bool Is(Tagged<U> value) {
-  return CastTraits<T>::AllowFrom(value);
-}
-
-// Only initialise the SourceLocation in debug mode.
-#ifdef DEBUG
-#define INIT_SOURCE_LOCATION_IN_DEBUG v8::SourceLocation::Current()
-#else
-#define INIT_SOURCE_LOCATION_IN_DEBUG v8::SourceLocation()
-#endif
-
-// `Cast<T>(value)` casts `value` to a tagged object of type `T`, with a debug
-// check that `value` is a tagged object of type `T`.
-template <typename To, typename From>
-inline Tagged<To> Cast(Tagged<From> value, const v8::SourceLocation& loc =
-                                               INIT_SOURCE_LOCATION_IN_DEBUG) {
-  DCHECK_WITH_MSG_AND_LOC(Is<To>(value),
-                          V8_PRETTY_FUNCTION_VALUE_OR("Cast type check"), loc);
-  return UncheckedCast<To>(value);
-}
-template <typename To, typename From>
-inline Tagged<To> Cast(const From& value, const v8::SourceLocation& loc =
-                                              INIT_SOURCE_LOCATION_IN_DEBUG) {
-  return Cast<To>(Tagged(value), loc);
-}
-template <typename To, typename From>
-inline Handle<To> Cast(Handle<From> value, const v8::SourceLocation& loc =
-                                               INIT_SOURCE_LOCATION_IN_DEBUG);
-template <typename To, typename From>
-inline MaybeHandle<To> Cast(
-    MaybeHandle<From> value,
-    const v8::SourceLocation& loc = INIT_SOURCE_LOCATION_IN_DEBUG);
-#ifdef V8_ENABLE_DIRECT_HANDLE
-template <typename To, typename From>
-inline DirectHandle<To> Cast(
-    DirectHandle<From> value,
-    const v8::SourceLocation& loc = INIT_SOURCE_LOCATION_IN_DEBUG);
-template <typename To, typename From>
-inline MaybeDirectHandle<To> Cast(
-    MaybeDirectHandle<From> value,
-    const v8::SourceLocation& loc = INIT_SOURCE_LOCATION_IN_DEBUG);
-#endif
-
-// `UncheckedCast<T>(value)` casts `value` to a tagged object of type `T`,
-// without checking the type of value.
-template <typename To, typename From>
-inline Tagged<To> UncheckedCast(Tagged<From> value) {
-  return Tagged<To>(value.ptr());
-}
-template <typename To, typename From>
-inline Tagged<To> UncheckedCast(const From& value) {
-  return UncheckedCast<To>(Tagged(value));
-}
-
-// `Is<T>(maybe_weak_value)` specialization for possible weak values and strong
-// target `T`, that additionally first checks whether `maybe_weak_value` is
-// actually a strong value (or a Smi, which can't be weak).
-template <typename T, typename U>
-inline bool Is(Tagged<MaybeWeak<U>> value) {
-  // Cast from maybe weak to strong needs to be strong or smi.
-  if constexpr (!is_maybe_weak_v<T>) {
-    if (!value.IsStrongOrSmi()) return false;
-    return CastTraits<T>::AllowFrom(Tagged<U>(value.ptr()));
-  } else {
-    // Dispatches to CastTraits<MaybeWeak<T>> below.
-    return CastTraits<T>::AllowFrom(value);
-  }
-}
-
-// Specialization for maybe weak cast targets, which first converts the incoming
-// value to a strong reference and then checks if the cast to the strong T
-// is allowed. Cleared weak references always return true.
-template <typename T>
-struct CastTraits<MaybeWeak<T>> {
-  template <typename U>
-  static bool AllowFrom(Tagged<U> value) {
-    if constexpr (is_maybe_weak_v<U>) {
-      // Cleared values are always ok.
-      if (value.IsCleared()) return true;
-      // TODO(leszeks): Skip Smi check for values that are known to not be Smi.
-      if (value.IsSmi()) {
-        return CastTraits<T>::AllowFrom(Tagged<Smi>(value.ptr()));
-      }
-      return CastTraits<T>::AllowFrom(MakeStrong(value));
-    } else {
-      return CastTraits<T>::AllowFrom(value);
-    }
-  }
-};
-
-template <>
-struct CastTraits<Object> {
-  static inline bool AllowFrom(Tagged<Object> value) { return true; }
-};
-template <>
-struct CastTraits<Smi> {
-  static inline bool AllowFrom(Tagged<Object> value) { return value.IsSmi(); }
-  static inline bool AllowFrom(Tagged<HeapObject> value) { return false; }
-};
-template <>
-struct CastTraits<HeapObject> {
-  static inline bool AllowFrom(Tagged<Object> value) {
-    return value.IsHeapObject();
-  }
-  static inline bool AllowFrom(Tagged<HeapObject> value) { return true; }
-};
-
-}  // namespace v8::internal
-
-#undef INIT_SOURCE_LOCATION_IN_DEBUG
-
 #endif  // V8_OBJECTS_CASTING_H_
diff --git a/src/objects/tagged-impl.h b/src/objects/tagged-impl.h
index ea62935d975..8ac658b2f77 100644
--- a/src/objects/tagged-impl.h
+++ b/src/objects/tagged-impl.h
@@ -4,281 +4,5 @@
 
 #ifndef V8_OBJECTS_TAGGED_IMPL_H_
 #define V8_OBJECTS_TAGGED_IMPL_H_
-
-#include "include/v8-internal.h"
-#include "src/base/export-template.h"
-#include "src/base/macros.h"
-#include "src/common/checks.h"
-#include "src/common/globals.h"
-#include "src/common/ptr-compr.h"
-
-namespace v8 {
-namespace internal {
-
-#if defined(V8_EXTERNAL_CODE_SPACE) || defined(V8_ENABLE_SANDBOX)
-// When V8_EXTERNAL_CODE_SPACE or V8_ENABLE_SANDBOX is enabled, comparing
-// objects in the code- or trusted space with "regular" objects by looking only
-// at compressed values is not correct. Full pointers must be compared instead.
-bool V8_EXPORT_PRIVATE CheckObjectComparisonAllowed(Address a, Address b);
-#endif
-
-// An TaggedImpl is a base class for Object (which is either a Smi or a strong
-// reference to a HeapObject) and Tagged<MaybeObject> (which is either a Smi, a
-// strong reference to a HeapObject, a weak reference to a HeapObject, or a
-// cleared weak reference. This class provides storage and one canonical
-// implementation of various predicates that check Smi and heap object tags'
-// values and also take into account whether the tagged value is expected to be
-// weak reference to a HeapObject or cleared weak reference.
-template <HeapObjectReferenceType kRefType, typename StorageType>
-class TaggedImpl {
- public:
-  // Compressed TaggedImpl are never used for external InstructionStream
-  // pointers, so we can use this shorter alias for calling decompression
-  // functions.
-  using CompressionScheme = V8HeapCompressionScheme;
-
-  static_assert(std::is_same<StorageType, Address>::value ||
-                    std::is_same<StorageType, Tagged_t>::value,
-                "StorageType must be either Address or Tagged_t");
-
-  // True for those TaggedImpl instantiations that represent uncompressed
-  // tagged values and false for TaggedImpl instantiations that represent
-  // compressed tagged values.
-  static const bool kIsFull = sizeof(StorageType) == kSystemPointerSize;
-
-  static const bool kCanBeWeak = kRefType == HeapObjectReferenceType::WEAK;
-
-  V8_INLINE constexpr TaggedImpl() : ptr_{} {}
-  V8_INLINE explicit constexpr TaggedImpl(StorageType ptr) : ptr_(ptr) {}
-
-  // Make clang on Linux catch what MSVC complains about on Windows:
-  explicit operator bool() const = delete;
-
-  // Don't use this operator for comparing with stale or invalid pointers
-  // because CheckObjectComparisonAllowed() might crash when trying to access
-  // the object's page header. Use SafeEquals() instead.
-  template <HeapObjectReferenceType kOtherRefType, typename U>
-  constexpr bool operator==(TaggedImpl<kOtherRefType, U> other) const {
-    static_assert(
-        std::is_same<U, Address>::value || std::is_same<U, Tagged_t>::value,
-        "U must be either Address or Tagged_t");
-#if defined(V8_EXTERNAL_CODE_SPACE) || defined(V8_ENABLE_SANDBOX)
-    // When comparing two full pointer values ensure that it's allowed.
-    if (std::is_same<StorageType, Address>::value &&
-        std::is_same<U, Address>::value) {
-      SLOW_DCHECK(CheckObjectComparisonAllowed(ptr_, other.ptr()));
-    }
-#endif  // defined(V8_EXTERNAL_CODE_SPACE) || defined(V8_ENABLE_SANDBOX)
-    return static_cast<Tagged_t>(ptr_) == static_cast<Tagged_t>(other.ptr());
-  }
-
-  // Don't use this operator for comparing with stale or invalid pointers
-  // because CheckObjectComparisonAllowed() might crash when trying to access
-  // the object's page header. Use SafeEquals() instead.
-  template <HeapObjectReferenceType kOtherRefType, typename U>
-  constexpr bool operator!=(TaggedImpl<kOtherRefType, U> other) const {
-    static_assert(
-        std::is_same<U, Address>::value || std::is_same<U, Tagged_t>::value,
-        "U must be either Address or Tagged_t");
-#if defined(V8_EXTERNAL_CODE_SPACE) || defined(V8_ENABLE_SANDBOX)
-    // When comparing two full pointer values ensure that it's allowed.
-    if (std::is_same<StorageType, Address>::value &&
-        std::is_same<U, Address>::value) {
-      SLOW_DCHECK(CheckObjectComparisonAllowed(ptr_, other.ptr()));
-    }
-#endif  // defined(V8_EXTERNAL_CODE_SPACE) || defined(V8_ENABLE_SANDBOX)
-    return static_cast<Tagged_t>(ptr_) != static_cast<Tagged_t>(other.ptr());
-  }
-
-  // A variant of operator== which allows comparing objects in different
-  // pointer compression cages. In particular, this should be used when
-  // comparing objects in trusted- or code space with objects in the main
-  // pointer compression cage.
-  template <HeapObjectReferenceType kOtherRefType>
-  constexpr bool SafeEquals(
-      TaggedImpl<kOtherRefType, StorageType> other) const {
-    static_assert(std::is_same<StorageType, Address>::value,
-                  "Safe comparison is allowed only for full tagged values");
-    if (V8_EXTERNAL_CODE_SPACE_BOOL || V8_ENABLE_SANDBOX_BOOL) {
-      return ptr_ == other.ptr();
-    }
-    return this->operator==(other);
-  }
-
-  // For using in std::set and std::map.
-  constexpr bool operator<(TaggedImpl other) const {
-#if defined(V8_EXTERNAL_CODE_SPACE) || defined(V8_ENABLE_SANDBOX)
-    // When comparing two full pointer values ensure that it's allowed.
-    if (std::is_same<StorageType, Address>::value) {
-      SLOW_DCHECK(CheckObjectComparisonAllowed(ptr_, other.ptr()));
-    }
-#endif  // defined(V8_EXTERNAL_CODE_SPACE) || defined(V8_ENABLE_SANDBOX)
-    return static_cast<Tagged_t>(ptr_) < static_cast<Tagged_t>(other.ptr());
-  }
-
-  V8_INLINE constexpr StorageType ptr() const { return ptr_; }
-
-  // Returns true if this tagged value is a strong pointer to a HeapObject or
-  // Smi.
-  constexpr inline bool IsObject() const { return !IsWeakOrCleared(); }
-
-  // Returns true if this tagged value is a Smi.
-  constexpr bool IsSmi() const { return HAS_SMI_TAG(ptr_); }
-  inline bool ToSmi(Tagged<Smi>* value) const;
-  inline Tagged<Smi> ToSmi() const;
-
-  // Returns true if this tagged value is a strong pointer to a HeapObject.
-  constexpr inline bool IsHeapObject() const { return IsStrong(); }
-
-  // Returns true if this tagged value is a cleared weak reference.
-  constexpr inline bool IsCleared() const {
-    return kCanBeWeak &&
-           (static_cast<uint32_t>(ptr_) == kClearedWeakHeapObjectLower32);
-  }
-
-  // Returns true if this tagged value is a strong or weak pointer to a
-  // HeapObject.
-  constexpr inline bool IsStrongOrWeak() const {
-    return !IsSmi() && !IsCleared();
-  }
-
-  // Returns true if this tagged value is a strong pointer to a HeapObject.
-  constexpr inline bool IsStrong() const {
-    DCHECK(kCanBeWeak || (!IsSmi() == HAS_STRONG_HEAP_OBJECT_TAG(ptr_)));
-    return kCanBeWeak ? HAS_STRONG_HEAP_OBJECT_TAG(ptr_) : !IsSmi();
-  }
-
-  // Returns true if this tagged value is a strong pointer to a HeapObject, or a
-  // Smi.
-  constexpr inline bool IsStrongOrSmi() const {
-    return !kCanBeWeak || !HAS_WEAK_HEAP_OBJECT_TAG(ptr_);
-  }
-
-  // Returns true if this tagged value is a weak pointer to a HeapObject.
-  constexpr inline bool IsWeak() const {
-    return IsWeakOrCleared() && !IsCleared();
-  }
-
-  // Returns true if this tagged value is a weak pointer to a HeapObject or
-  // cleared weak reference.
-  constexpr inline bool IsWeakOrCleared() const {
-    return kCanBeWeak && HAS_WEAK_HEAP_OBJECT_TAG(ptr_);
-  }
-
-#ifdef V8_COMPRESS_POINTERS
-  // Returns true if this tagged value is a pointer to an object in the given
-  // cage base.
-  constexpr inline bool IsInMainCageBase() {
-    DCHECK(!IsSmi());
-    using S = V8HeapCompressionScheme;
-    return S::GetPtrComprCageBaseAddress(ptr_) ==
-           S::GetPtrComprCageBaseAddress(S::base());
-  }
-#endif  // V8_COMPRESS_POINTERS
-
-  //
-  // The following set of methods get HeapObject out of the tagged value
-  // which may involve decompression in which case the isolate root is required.
-  // If the pointer compression is not enabled then the variants with
-  // isolate parameter will be exactly the same as the ones witout isolate
-  // parameter.
-  //
-
-  // If this tagged value is a strong pointer to a HeapObject, returns true and
-  // sets *result. Otherwise returns false.
-  inline bool GetHeapObjectIfStrong(Tagged<HeapObject>* result) const;
-  inline bool GetHeapObjectIfStrong(Isolate* isolate,
-                                    Tagged<HeapObject>* result) const;
-
-  // DCHECKs that this tagged value is a strong pointer to a HeapObject and
-  // returns the HeapObject.
-  inline Tagged<HeapObject> GetHeapObjectAssumeStrong() const;
-  inline Tagged<HeapObject> GetHeapObjectAssumeStrong(Isolate* isolate) const;
-
-  // If this tagged value is a weak pointer to a HeapObject, returns true and
-  // sets *result. Otherwise returns false.
-  inline bool GetHeapObjectIfWeak(Tagged<HeapObject>* result) const;
-  inline bool GetHeapObjectIfWeak(Isolate* isolate,
-                                  Tagged<HeapObject>* result) const;
-
-  // DCHECKs that this tagged value is a weak pointer to a HeapObject and
-  // returns the HeapObject.
-  inline Tagged<HeapObject> GetHeapObjectAssumeWeak() const;
-  inline Tagged<HeapObject> GetHeapObjectAssumeWeak(Isolate* isolate) const;
-
-  // If this tagged value is a strong or weak pointer to a HeapObject, returns
-  // true and sets *result. Otherwise returns false.
-  inline bool GetHeapObject(Tagged<HeapObject>* result) const;
-  inline bool GetHeapObject(Isolate* isolate, Tagged<HeapObject>* result) const;
-
-  inline bool GetHeapObject(Tagged<HeapObject>* result,
-                            HeapObjectReferenceType* reference_type) const;
-  inline bool GetHeapObject(Isolate* isolate, Tagged<HeapObject>* result,
-                            HeapObjectReferenceType* reference_type) const;
-
-  // DCHECKs that this tagged value is a strong or a weak pointer to a
-  // HeapObject and returns the HeapObject.
-  inline Tagged<HeapObject> GetHeapObject() const;
-  inline Tagged<HeapObject> GetHeapObject(Isolate* isolate) const;
-
-  // DCHECKs that this tagged value is a strong or a weak pointer to a
-  // HeapObject or a Smi and returns the HeapObject or Smi.
-  inline Tagged<Object> GetHeapObjectOrSmi() const;
-  inline Tagged<Object> GetHeapObjectOrSmi(Isolate* isolate) const;
-
-  // Cast operation is available only for full non-weak tagged values.
-  template <typename T>
-  Tagged<T> cast() const {
-    CHECK(kIsFull);
-    DCHECK(!HAS_WEAK_HEAP_OBJECT_TAG(ptr_));
-    return Cast<T>(Tagged<Object>(ptr_));
-  }
-
- protected:
-  StorageType* ptr_location() { return &ptr_; }
-  const StorageType* ptr_location() const { return &ptr_; }
-
- private:
-  friend class CompressedObjectSlot;
-  friend class FullObjectSlot;
-
-  StorageType ptr_;
-};
-
-// Prints this object without details.
-template <HeapObjectReferenceType kRefType, typename StorageType>
-EXPORT_TEMPLATE_DECLARE(V8_EXPORT_PRIVATE)
-void ShortPrint(TaggedImpl<kRefType, StorageType> ptr, FILE* out = stdout);
-
-// Prints this object without details to a message accumulator.
-template <HeapObjectReferenceType kRefType, typename StorageType>
-EXPORT_TEMPLATE_DECLARE(V8_EXPORT_PRIVATE)
-void ShortPrint(TaggedImpl<kRefType, StorageType> ptr,
-                StringStream* accumulator);
-
-template <HeapObjectReferenceType kRefType, typename StorageType>
-EXPORT_TEMPLATE_DECLARE(V8_EXPORT_PRIVATE)
-void ShortPrint(TaggedImpl<kRefType, StorageType> ptr, std::ostream& os);
-
-#ifdef OBJECT_PRINT
-template <HeapObjectReferenceType kRefType, typename StorageType>
-EXPORT_TEMPLATE_DECLARE(V8_EXPORT_PRIVATE)
-void Print(TaggedImpl<kRefType, StorageType> ptr);
-template <HeapObjectReferenceType kRefType, typename StorageType>
-EXPORT_TEMPLATE_DECLARE(V8_EXPORT_PRIVATE)
-void Print(TaggedImpl<kRefType, StorageType> ptr, std::ostream& os);
-#else
-template <HeapObjectReferenceType kRefType, typename StorageType>
-void Print(TaggedImpl<kRefType, StorageType> ptr) {
-  ShortPrint(ptr);
-}
-template <HeapObjectReferenceType kRefType, typename StorageType>
-void Print(TaggedImpl<kRefType, StorageType> ptr, std::ostream& os) {
-  ShortPrint(ptr, os);
-}
-#endif
-
-}  // namespace internal
-}  // namespace v8
-
+#include "src/objects/tagged.h"
 #endif  // V8_OBJECTS_TAGGED_IMPL_H_
diff --git a/src/objects/tagged.h b/src/objects/tagged.h
index b9e1ae97c37..820a9a3e00e 100644
--- a/src/objects/tagged.h
+++ b/src/objects/tagged.h
@@ -7,7 +7,14 @@
 
 #include <type_traits>
 
+#include "include/v8-internal.h"
+#include "include/v8-source-location.h"
+#include "src/base/export-template.h"
+#include "src/base/logging.h"
+#include "src/base/macros.h"
+#include "src/common/checks.h"
 #include "src/common/globals.h"
+#include "src/common/ptr-compr.h"
 #include "src/objects/tagged-impl.h"
 #include "src/objects/union.h"
 
@@ -69,6 +76,11 @@ class Smi;
 template <typename T>
 class Tagged;
 
+template <typename To, typename From>
+inline Tagged<To> UncheckedCast(Tagged<From> value);
+template <typename To, typename From>
+inline Tagged<To> UncheckedCast(const From& value);
+
 // MaybeWeak<T> represents a reference to T that may be either a strong or weak.
 //
 // MaybeWeak doesn't really exist by itself, but is rather a sentinel type for
@@ -286,6 +298,272 @@ static constexpr bool is_castable_v = is_castable<From, To>::value;
 // Tagged<Foo> and Foo.
 static constexpr bool kTaggedCanConvertToRawObjects = true;
 
+// from tagged-impl.h
+#if defined(V8_EXTERNAL_CODE_SPACE) || defined(V8_ENABLE_SANDBOX)
+// When V8_EXTERNAL_CODE_SPACE or V8_ENABLE_SANDBOX is enabled, comparing
+// objects in the code- or trusted space with "regular" objects by looking only
+// at compressed values is not correct. Full pointers must be compared instead.
+bool V8_EXPORT_PRIVATE CheckObjectComparisonAllowed(Address a, Address b);
+#endif
+
+// An TaggedImpl is a base class for Object (which is either a Smi or a strong
+// reference to a HeapObject) and Tagged<MaybeObject> (which is either a Smi, a
+// strong reference to a HeapObject, a weak reference to a HeapObject, or a
+// cleared weak reference. This class provides storage and one canonical
+// implementation of various predicates that check Smi and heap object tags'
+// values and also take into account whether the tagged value is expected to be
+// weak reference to a HeapObject or cleared weak reference.
+template <HeapObjectReferenceType kRefType, typename StorageType>
+class TaggedImpl {
+ public:
+  // Compressed TaggedImpl are never used for external InstructionStream
+  // pointers, so we can use this shorter alias for calling decompression
+  // functions.
+  using CompressionScheme = V8HeapCompressionScheme;
+
+  static_assert(std::is_same<StorageType, Address>::value ||
+                    std::is_same<StorageType, Tagged_t>::value,
+                "StorageType must be either Address or Tagged_t");
+
+  // True for those TaggedImpl instantiations that represent uncompressed
+  // tagged values and false for TaggedImpl instantiations that represent
+  // compressed tagged values.
+  static const bool kIsFull = sizeof(StorageType) == kSystemPointerSize;
+
+  static const bool kCanBeWeak = kRefType == HeapObjectReferenceType::WEAK;
+
+  V8_INLINE constexpr TaggedImpl() : ptr_{} {}
+  V8_INLINE explicit constexpr TaggedImpl(StorageType ptr) : ptr_(ptr) {}
+
+  // Make clang on Linux catch what MSVC complains about on Windows:
+  explicit operator bool() const = delete;
+
+  // Don't use this operator for comparing with stale or invalid pointers
+  // because CheckObjectComparisonAllowed() might crash when trying to access
+  // the object's page header. Use SafeEquals() instead.
+  template <HeapObjectReferenceType kOtherRefType, typename U>
+  constexpr bool operator==(TaggedImpl<kOtherRefType, U> other) const {
+    static_assert(
+        std::is_same<U, Address>::value || std::is_same<U, Tagged_t>::value,
+        "U must be either Address or Tagged_t");
+#if defined(V8_EXTERNAL_CODE_SPACE) || defined(V8_ENABLE_SANDBOX)
+    // When comparing two full pointer values ensure that it's allowed.
+    if (std::is_same<StorageType, Address>::value &&
+        std::is_same<U, Address>::value) {
+      SLOW_DCHECK(CheckObjectComparisonAllowed(ptr_, other.ptr()));
+    }
+#endif  // defined(V8_EXTERNAL_CODE_SPACE) || defined(V8_ENABLE_SANDBOX)
+    return static_cast<Tagged_t>(ptr_) == static_cast<Tagged_t>(other.ptr());
+  }
+
+  // Don't use this operator for comparing with stale or invalid pointers
+  // because CheckObjectComparisonAllowed() might crash when trying to access
+  // the object's page header. Use SafeEquals() instead.
+  template <HeapObjectReferenceType kOtherRefType, typename U>
+  constexpr bool operator!=(TaggedImpl<kOtherRefType, U> other) const {
+    static_assert(
+        std::is_same<U, Address>::value || std::is_same<U, Tagged_t>::value,
+        "U must be either Address or Tagged_t");
+#if defined(V8_EXTERNAL_CODE_SPACE) || defined(V8_ENABLE_SANDBOX)
+    // When comparing two full pointer values ensure that it's allowed.
+    if (std::is_same<StorageType, Address>::value &&
+        std::is_same<U, Address>::value) {
+      SLOW_DCHECK(CheckObjectComparisonAllowed(ptr_, other.ptr()));
+    }
+#endif  // defined(V8_EXTERNAL_CODE_SPACE) || defined(V8_ENABLE_SANDBOX)
+    return static_cast<Tagged_t>(ptr_) != static_cast<Tagged_t>(other.ptr());
+  }
+
+  // A variant of operator== which allows comparing objects in different
+  // pointer compression cages. In particular, this should be used when
+  // comparing objects in trusted- or code space with objects in the main
+  // pointer compression cage.
+  template <HeapObjectReferenceType kOtherRefType>
+  constexpr bool SafeEquals(
+      TaggedImpl<kOtherRefType, StorageType> other) const {
+    static_assert(std::is_same<StorageType, Address>::value,
+                  "Safe comparison is allowed only for full tagged values");
+    if (V8_EXTERNAL_CODE_SPACE_BOOL || V8_ENABLE_SANDBOX_BOOL) {
+      return ptr_ == other.ptr();
+    }
+    return this->operator==(other);
+  }
+
+  // For using in std::set and std::map.
+  constexpr bool operator<(TaggedImpl other) const {
+#if defined(V8_EXTERNAL_CODE_SPACE) || defined(V8_ENABLE_SANDBOX)
+    // When comparing two full pointer values ensure that it's allowed.
+    if (std::is_same<StorageType, Address>::value) {
+      SLOW_DCHECK(CheckObjectComparisonAllowed(ptr_, other.ptr()));
+    }
+#endif  // defined(V8_EXTERNAL_CODE_SPACE) || defined(V8_ENABLE_SANDBOX)
+    return static_cast<Tagged_t>(ptr_) < static_cast<Tagged_t>(other.ptr());
+  }
+
+  V8_INLINE constexpr StorageType ptr() const { return ptr_; }
+
+  // Returns true if this tagged value is a strong pointer to a HeapObject or
+  // Smi.
+  constexpr inline bool IsObject() const { return !IsWeakOrCleared(); }
+
+  // Returns true if this tagged value is a Smi.
+  constexpr bool IsSmi() const { return HAS_SMI_TAG(ptr_); }
+  inline bool ToSmi(Tagged<Smi>* value) const;
+  inline Tagged<Smi> ToSmi() const;
+
+  // Returns true if this tagged value is a strong pointer to a HeapObject.
+  constexpr inline bool IsHeapObject() const { return IsStrong(); }
+
+  // Returns true if this tagged value is a cleared weak reference.
+  constexpr inline bool IsCleared() const {
+    return kCanBeWeak &&
+           (static_cast<uint32_t>(ptr_) == kClearedWeakHeapObjectLower32);
+  }
+
+  // Returns true if this tagged value is a strong or weak pointer to a
+  // HeapObject.
+  constexpr inline bool IsStrongOrWeak() const {
+    return !IsSmi() && !IsCleared();
+  }
+
+  // Returns true if this tagged value is a strong pointer to a HeapObject.
+  constexpr inline bool IsStrong() const {
+    DCHECK(kCanBeWeak || (!IsSmi() == HAS_STRONG_HEAP_OBJECT_TAG(ptr_)));
+    return kCanBeWeak ? HAS_STRONG_HEAP_OBJECT_TAG(ptr_) : !IsSmi();
+  }
+
+  // Returns true if this tagged value is a strong pointer to a HeapObject, or a
+  // Smi.
+  constexpr inline bool IsStrongOrSmi() const {
+    return !kCanBeWeak || !HAS_WEAK_HEAP_OBJECT_TAG(ptr_);
+  }
+
+  // Returns true if this tagged value is a weak pointer to a HeapObject.
+  constexpr inline bool IsWeak() const {
+    return IsWeakOrCleared() && !IsCleared();
+  }
+
+  // Returns true if this tagged value is a weak pointer to a HeapObject or
+  // cleared weak reference.
+  constexpr inline bool IsWeakOrCleared() const {
+    return kCanBeWeak && HAS_WEAK_HEAP_OBJECT_TAG(ptr_);
+  }
+
+#ifdef V8_COMPRESS_POINTERS
+  // Returns true if this tagged value is a pointer to an object in the given
+  // cage base.
+  constexpr inline bool IsInMainCageBase() {
+    DCHECK(!IsSmi());
+    using S = V8HeapCompressionScheme;
+    return S::GetPtrComprCageBaseAddress(ptr_) ==
+           S::GetPtrComprCageBaseAddress(S::base());
+  }
+#endif  // V8_COMPRESS_POINTERS
+
+  //
+  // The following set of methods get HeapObject out of the tagged value
+  // which may involve decompression in which case the isolate root is required.
+  // If the pointer compression is not enabled then the variants with
+  // isolate parameter will be exactly the same as the ones witout isolate
+  // parameter.
+  //
+
+  // If this tagged value is a strong pointer to a HeapObject, returns true and
+  // sets *result. Otherwise returns false.
+  inline bool GetHeapObjectIfStrong(Tagged<HeapObject>* result) const;
+  inline bool GetHeapObjectIfStrong(Isolate* isolate,
+                                    Tagged<HeapObject>* result) const;
+
+  // DCHECKs that this tagged value is a strong pointer to a HeapObject and
+  // returns the HeapObject.
+  inline Tagged<HeapObject> GetHeapObjectAssumeStrong() const;
+  inline Tagged<HeapObject> GetHeapObjectAssumeStrong(Isolate* isolate) const;
+
+  // If this tagged value is a weak pointer to a HeapObject, returns true and
+  // sets *result. Otherwise returns false.
+  inline bool GetHeapObjectIfWeak(Tagged<HeapObject>* result) const;
+  inline bool GetHeapObjectIfWeak(Isolate* isolate,
+                                  Tagged<HeapObject>* result) const;
+
+  // DCHECKs that this tagged value is a weak pointer to a HeapObject and
+  // returns the HeapObject.
+  inline Tagged<HeapObject> GetHeapObjectAssumeWeak() const;
+  inline Tagged<HeapObject> GetHeapObjectAssumeWeak(Isolate* isolate) const;
+
+  // If this tagged value is a strong or weak pointer to a HeapObject, returns
+  // true and sets *result. Otherwise returns false.
+  inline bool GetHeapObject(Tagged<HeapObject>* result) const;
+  inline bool GetHeapObject(Isolate* isolate, Tagged<HeapObject>* result) const;
+
+  inline bool GetHeapObject(Tagged<HeapObject>* result,
+                            HeapObjectReferenceType* reference_type) const;
+  inline bool GetHeapObject(Isolate* isolate, Tagged<HeapObject>* result,
+                            HeapObjectReferenceType* reference_type) const;
+
+  // DCHECKs that this tagged value is a strong or a weak pointer to a
+  // HeapObject and returns the HeapObject.
+  inline Tagged<HeapObject> GetHeapObject() const;
+  inline Tagged<HeapObject> GetHeapObject(Isolate* isolate) const;
+
+  // DCHECKs that this tagged value is a strong or a weak pointer to a
+  // HeapObject or a Smi and returns the HeapObject or Smi.
+  inline Tagged<Object> GetHeapObjectOrSmi() const;
+  inline Tagged<Object> GetHeapObjectOrSmi(Isolate* isolate) const;
+
+  // Cast operation is available only for full non-weak tagged values.
+  template <typename T>
+  Tagged<T> cast() const;
+  // Tagged<T> cast() const {
+  //   CHECK(kIsFull);
+  //   DCHECK(!HAS_WEAK_HEAP_OBJECT_TAG(ptr_));
+  //   return Cast<T>(Tagged<Object>(ptr_));
+  // }
+
+ protected:
+  StorageType* ptr_location() { return &ptr_; }
+  const StorageType* ptr_location() const { return &ptr_; }
+
+ private:
+  friend class CompressedObjectSlot;
+  friend class FullObjectSlot;
+
+  StorageType ptr_;
+};
+
+// Prints this object without details.
+template <HeapObjectReferenceType kRefType, typename StorageType>
+EXPORT_TEMPLATE_DECLARE(V8_EXPORT_PRIVATE)
+void ShortPrint(TaggedImpl<kRefType, StorageType> ptr, FILE* out = stdout);
+
+// Prints this object without details to a message accumulator.
+template <HeapObjectReferenceType kRefType, typename StorageType>
+EXPORT_TEMPLATE_DECLARE(V8_EXPORT_PRIVATE)
+void ShortPrint(TaggedImpl<kRefType, StorageType> ptr,
+                StringStream* accumulator);
+
+template <HeapObjectReferenceType kRefType, typename StorageType>
+EXPORT_TEMPLATE_DECLARE(V8_EXPORT_PRIVATE)
+void ShortPrint(TaggedImpl<kRefType, StorageType> ptr, std::ostream& os);
+
+#ifdef OBJECT_PRINT
+template <HeapObjectReferenceType kRefType, typename StorageType>
+EXPORT_TEMPLATE_DECLARE(V8_EXPORT_PRIVATE)
+void Print(TaggedImpl<kRefType, StorageType> ptr);
+template <HeapObjectReferenceType kRefType, typename StorageType>
+EXPORT_TEMPLATE_DECLARE(V8_EXPORT_PRIVATE)
+void Print(TaggedImpl<kRefType, StorageType> ptr, std::ostream& os);
+#else
+template <HeapObjectReferenceType kRefType, typename StorageType>
+void Print(TaggedImpl<kRefType, StorageType> ptr) {
+  ShortPrint(ptr);
+}
+template <HeapObjectReferenceType kRefType, typename StorageType>
+void Print(TaggedImpl<kRefType, StorageType> ptr, std::ostream& os) {
+  ShortPrint(ptr, os);
+}
+#endif
+// end of tagged-impl.h
+
 namespace detail {
 
 // {TaggedOperatorArrowRef} is returned by {Tagged::operator->}. It should never
@@ -472,11 +750,12 @@ class Tagged<HeapObject> : public StrongTaggedBase {
     static_assert(kTaggedCanConvertToRawObjects);
   }
   template <typename U>
-  static constexpr Tagged<HeapObject> cast(U other) {
-    static_assert(kTaggedCanConvertToRawObjects);
-    return Cast<HeapObject>(Tagged<U>(other));
-  }
-
+  static constexpr Tagged<HeapObject> cast(U other);
+  // static constexpr Tagged<HeapObject> cast(U other) {
+  //   static_assert(kTaggedCanConvertToRawObjects);
+  //   return Cast<HeapObject>(Tagged<U>(other));
+  // }
+ 
   Address address() const { return this->ptr() - kHeapObjectTag; }
 
  protected:
@@ -706,10 +985,11 @@ class Tagged : public detail::BaseForTagged<T>::type {
     static_assert(kTaggedCanConvertToRawObjects);
   }
   template <typename U>
-  static constexpr Tagged<T> cast(U other) {
-    static_assert(kTaggedCanConvertToRawObjects);
-    return Cast<T>(Tagged<U>(other));
-  }
+  static constexpr Tagged<T> cast(U other) ;
+  // static constexpr Tagged<T> cast(U other) {
+  //   static_assert(kTaggedCanConvertToRawObjects);
+  //   return Cast<T>(Tagged<U>(other));
+  // }
 
  private:
   friend T;
@@ -851,6 +1131,142 @@ struct RemoveTagged<Tagged<T>> {
   using type = T;
 };
 
+// from casting.h
+template <typename To>
+struct CastTraits;
+
+// `Is<T>(value)` checks whether `value` is a tagged object of type `T`.
+template <typename T, typename U>
+inline bool Is(Tagged<U> value) {
+  return CastTraits<T>::AllowFrom(value);
+}
+
+// Only initialise the SourceLocation in debug mode.
+#ifdef DEBUG
+#define INIT_SOURCE_LOCATION_IN_DEBUG v8::SourceLocation::Current()
+#else
+#define INIT_SOURCE_LOCATION_IN_DEBUG v8::SourceLocation()
+#endif
+
+// `Cast<T>(value)` casts `value` to a tagged object of type `T`, with a debug
+// check that `value` is a tagged object of type `T`.
+template <typename To, typename From>
+inline Tagged<To> Cast(Tagged<From> value, const v8::SourceLocation& loc =
+                                               INIT_SOURCE_LOCATION_IN_DEBUG) {
+  DCHECK_WITH_MSG_AND_LOC(Is<To>(value),
+                          V8_PRETTY_FUNCTION_VALUE_OR("Cast type check"), loc);
+  return UncheckedCast<To>(value);
+}
+template <typename To, typename From>
+inline Tagged<To> Cast(const From& value, const v8::SourceLocation& loc =
+                                              INIT_SOURCE_LOCATION_IN_DEBUG) {
+  return Cast<To>(Tagged(value), loc);
+}
+template <typename To, typename From>
+inline Handle<To> Cast(Handle<From> value, const v8::SourceLocation& loc =
+                                               INIT_SOURCE_LOCATION_IN_DEBUG);
+template <typename To, typename From>
+inline MaybeHandle<To> Cast(
+    MaybeHandle<From> value,
+    const v8::SourceLocation& loc = INIT_SOURCE_LOCATION_IN_DEBUG);
+#ifdef V8_ENABLE_DIRECT_HANDLE
+template <typename To, typename From>
+inline DirectHandle<To> Cast(
+    DirectHandle<From> value,
+    const v8::SourceLocation& loc = INIT_SOURCE_LOCATION_IN_DEBUG);
+template <typename To, typename From>
+inline MaybeDirectHandle<To> Cast(
+    MaybeDirectHandle<From> value,
+    const v8::SourceLocation& loc = INIT_SOURCE_LOCATION_IN_DEBUG);
+#endif
+
+// `UncheckedCast<T>(value)` casts `value` to a tagged object of type `T`,
+// without checking the type of value.
+template <typename To, typename From>
+inline Tagged<To> UncheckedCast(Tagged<From> value) {
+  return Tagged<To>(value.ptr());
+}
+template <typename To, typename From>
+inline Tagged<To> UncheckedCast(const From& value) {
+  return UncheckedCast<To>(Tagged(value));
+}
+
+// `Is<T>(maybe_weak_value)` specialization for possible weak values and strong
+// target `T`, that additionally first checks whether `maybe_weak_value` is
+// actually a strong value (or a Smi, which can't be weak).
+template <typename T, typename U>
+inline bool Is(Tagged<MaybeWeak<U>> value) {
+  // Cast from maybe weak to strong needs to be strong or smi.
+  if constexpr (!is_maybe_weak_v<T>) {
+    if (!value.IsStrongOrSmi()) return false;
+    return CastTraits<T>::AllowFrom(Tagged<U>(value.ptr()));
+  } else {
+    // Dispatches to CastTraits<MaybeWeak<T>> below.
+    return CastTraits<T>::AllowFrom(value);
+  }
+}
+
+// Specialization for maybe weak cast targets, which first converts the incoming
+// value to a strong reference and then checks if the cast to the strong T
+// is allowed. Cleared weak references always return true.
+template <typename T>
+struct CastTraits<MaybeWeak<T>> {
+  template <typename U>
+  static bool AllowFrom(Tagged<U> value) {
+    if constexpr (is_maybe_weak_v<U>) {
+      // Cleared values are always ok.
+      if (value.IsCleared()) return true;
+      // TODO(leszeks): Skip Smi check for values that are known to not be Smi.
+      if (value.IsSmi()) {
+        return CastTraits<T>::AllowFrom(Tagged<Smi>(value.ptr()));
+      }
+      return CastTraits<T>::AllowFrom(MakeStrong(value));
+    } else {
+      return CastTraits<T>::AllowFrom(value);
+    }
+  }
+};
+
+template <>
+struct CastTraits<Object> {
+  static inline bool AllowFrom(Tagged<Object> value) { return true; }
+};
+template <>
+struct CastTraits<Smi> {
+  static inline bool AllowFrom(Tagged<Object> value) { return value.IsSmi(); }
+  static inline bool AllowFrom(Tagged<HeapObject> value) { return false; }
+};
+template <>
+struct CastTraits<HeapObject> {
+  static inline bool AllowFrom(Tagged<Object> value) {
+    return value.IsHeapObject();
+  }
+  static inline bool AllowFrom(Tagged<HeapObject> value) { return true; }
+};
+#undef INIT_SOURCE_LOCATION_IN_DEBUG
+// end of casting.h
+
+template <typename T>
+template <class U>
+constexpr Tagged<T> Tagged<T>::cast(U other) {
+  static_assert(kTaggedCanConvertToRawObjects);
+  return Cast<T>(Tagged<U>(other));
+}
+
+template <class U>
+constexpr Tagged<HeapObject> Tagged<HeapObject>::cast(U other) {
+  static_assert(kTaggedCanConvertToRawObjects);
+  return Cast<HeapObject>(Tagged<U>(other));
+}
+
+template <HeapObjectReferenceType kRefType, typename StorageType>
+template <typename T>
+Tagged<T> TaggedImpl<kRefType, StorageType>::cast() const {
+  CHECK(kIsFull);
+  DCHECK(!HAS_WEAK_HEAP_OBJECT_TAG(ptr_));
+  return Cast<T>(Tagged<Object>(ptr_));
+}
+
 }  // namespace internal
 }  // namespace v8
 
@@ -863,6 +1279,8 @@ namespace std {
 // sufficient for existing use-cases. A proper specialization would need to be
 // conditionally enabled via `requires`, which is C++20, or with `enable_if`,
 // which would require a custom common_type implementation.
+
+
 template <class T>
 struct common_type<T, i::Object> {
   static_assert(i::is_subtype_v<T, i::Object>,
-- 
2.34.1

