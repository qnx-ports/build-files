#!/bin/sh

#
#	Color definition of terminal outputs
#
red="\033[0;31m"
grn="\033[0;32m"
yel="\033[1;33m"
blu="\033[1;34m"
cls="\033[0m"
#
#    Default basic prefix is /usr/local
#
BASIC_PREFIX="/usr/local"

#
#	QNX specific build configuration nested level
#
NESTED_LEVEL="../../../../lely-core"

#
#    A prefix path to use on the target.
#
PREFIX="${INSTALL_ROOT_nto}/${BASIC_PREFIX}"

#
#    A prefix path to binary on the target.
#    bindir	${EXEC_PREFIX}/bin
#    libdir	${EXEC_PREFIX}/lib
#
EXEC_PREFIX="${INSTALL_ROOT_nto}/${cpudir}/${BASIC_PREFIX}"

#
#	Setup of essential configuration parameters
#
function hook_preconfigure {
#
#	QNX specific changes are covered by prediefined '__QNX__'
#
	#C/C++ flags
	CPPFLAGS="$CPPFLAGS -D_POSIX_C_SOURCE=200809 -D_QNX_SOURCE"

        #C++ flags
        CXXFLAGS="$CXXFLAGS -Wno-error=uninitialized"

#
#	Add socket library
#
	LDFLAGS="$LDFLAGS -lsocket"

#
#	Distributive directory
#
	DIST_BASE="${PWD}/${NESTED_LEVEL}"

#
#	Setup correct pathes for install and build make commands
#
	configure_opts="--srcdir=${DIST_BASE}"
	configure_opts="${configure_opts} --prefix=${PREFIX}"
	configure_opts="${configure_opts} --exec-prefix=${EXEC_PREFIX}"

	if [ "${ECSS}" == "on" ] ; then
	### compliant with ECSS requirements ###
		configure_opts="${configure_opts} --enable-ecss-compliance"
	else
	### successful build settings ###
		configure_opts="${configure_opts} --disable-python --disable-stdio --disable-time"
	fi
}

#
#	Adjust relative path to ./configure tool
#
function hook_configure {
    ${NESTED_LEVEL}/configure \
        ${ac_host:+"--host=${ac_host}"} \
        ${ac_build:+"--build=${ac_build}"} \
        ${configure_opts} \
        ${ac_params:+${CC:+"CC=${CC}"}} \
        ${ac_params:+${CFLAGS:+"CFLAGS=-O2 ${CFLAGS}"}} \
        ${ac_params:+${CPPFLAGS:+"CPPFLAGS=${CPPFLAGS}"}} \
        ${ac_params:+${LDFLAGS:+"LDFLAGS=${LDFLAGS}"}} \
        ${ac_params:+${CXX:+"CXX=${CXX}"}} \
        ${ac_params:+${CXXFLAGS:+"CXXFLAGS=-O2 ${CXXFLAGS}"}} \
        ${ac_params:+${ac_autotools:+${ac_autotools}}} \
        || Error 'configure failed';
}

function hook_premake {

	if [ "${make_cmds}" == "check" ] && [ "${TARGET_SYSNAME}" == "nto" ]; then
		echo "${blu}For target nto suppress tests execution.${cls}"
		echo "${blu}All tests have to be run on target system.${cls}"
		make_opts="${make_opts} TESTS=''"
	fi
}

function test_script_gen {
	script_name=$1
	script_log=$2
	bin_path=$3
	lib_path=$4
	version=$5

	relative_bin_path=$(basename ${bin_path})
	relative_lib_path=$(basename ${lib_path})

	echo "#!/bin/sh"                                                        > $script_name || Error "Unexpected error during $script_name initialization";

	# Setup env for proper running tests
	echo "target_lib_path=\$PWD/${relative_lib_path}"                      >> $script_name || Error "Unexpected error during $script_name initialization of ENV";
	echo "target_bin_path=\$PWD/${relative_bin_path}"                      >> $script_name || Error "Unexpected error during $script_name initialization of ENV";
	echo "export PATH=\$target_bin_path:\$PATH"                            >> $script_name || Error "Unexpected error during $script_name initialization of ENV";
	echo "export LD_LIBRARY_PATH=\$target_lib_path:\$LD_LIBRARY_PATH"      >> $script_name || Error "Unexpected error during $script_name initialization of ENV";

	# Add creation of script log
	echo "echo \"### Testsuites log file ###\" > $script_log"              >> $script_name || Error "Unexpected error during $script_name initialization";

	# Add unit tests
	echo "Adding unittests to the script:'$script_name'..."
	number=0
	echo "### Run all unittests ###"                                       >> $script_name || Error "Unexpected error during $script_name unittests initialization";
	echo "ut_pass=0"                                                       >> $script_name || Error "Unexpected error during $script_name unittests initialization";
	echo "ut_fail=0"                                                       >> $script_name || Error "Unexpected error during $script_name unittests initialization";
	for v in $(ls ${bin_path}) ; do
		number=$((number+1));
		echo "### Suite number: $number"                               >> $script_name || Error "Unexpected error during $script_name update by testsuite:'$v'";
		echo "result=\$($v 2>&1)"                                      >> $script_name || Error "Unexpected error during $script_name update by testsuite:'$v'";
		echo "if [ 0 -eq \$? ]; then"                                  >> $script_name || Error "Unexpected error during $script_name update by testsuite:'$v'";
		echo "   ut_pass=\$((ut_pass+1))"                              >> $script_name || Error "Unexpected error during $script_name update by testsuite:'$v'";
		echo "   echo \"${grn}PASS${cls}:$v\""                         >> $script_name || Error "Unexpected error during $script_name update by testsuite:'$v'";
		echo "else"                                                    >> $script_name || Error "Unexpected error during $script_name update by testsuite:'$v'";
		echo "   ut_fail=\$((ut_fail+1))"                              >> $script_name || Error "Unexpected error during $script_name update by testsuite:'$v'";
		echo "   echo \"${red}FAIL${cls}:$v\""                         >> $script_name || Error "Unexpected error during $script_name update by testsuite:'$v'";
		echo "fi"                                                      >> $script_name || Error "Unexpected error during $script_name update by testsuite:'$v'";
		echo "echo \"### Testsuite:$v ###\" >> $script_log"            >> $script_name || Error "Unexpected error during $script_name update by testsuite:'$v'";
		echo "echo \"\${result}\" >> $script_log"                      >> $script_name || Error "Unexpected error during $script_name update by testsuite:'$v'";
		echo "echo \"\${result}\""                                     >> $script_name || Error "Unexpected error during $script_name update by testsuite:'$v'";
		echo "${blu}ADDED${cls}:$v";
	done
	echo "echo \"${grn}==========================================${cls}\"" >> $script_name || Error "Unexpected error during $script_name update";
	echo "echo \"${grn}Tests summary for lely-core ${version}${cls}\""     >> $script_name || Error "Unexpected error during $script_name update";
	echo "echo \"${grn}==========================================${cls}\"" >> $script_name || Error "Unexpected error during $script_name update";
	echo "echo \"# TOTAL: ${number}\""                                     >> $script_name || Error "Unexpected error during $script_name update";
	echo "echo \"# ${grn}PASS${cls}: \${ut_pass}\""                        >> $script_name || Error "Unexpected error during $script_name update";
	echo "echo \"# ${red}FAIL${cls}: \${ut_fail}\""                        >> $script_name || Error "Unexpected error during $script_name update";
	echo "if [ 0 -eq \${ut_fail} ] ; then"                                 >> $script_name || Error "Unexpected error during $script_name update";
	echo "echo \"${grn}==========================================${cls}\"" >> $script_name || Error "Unexpected error during $script_name update";
	echo "else"                                                            >> $script_name || Error "Unexpected error during $script_name update";
	echo "   echo \"${red}\${ut_fail} tests fails${cls}\""                 >> $script_name || Error "Unexpected error during $script_name update";
	echo "   echo \"${red}See test log:$script_log ${cls}\""               >> $script_name || Error "Unexpected error during $script_name update";
	echo "fi"                                                              >> $script_name || Error "Unexpected error during $script_name update";

	chmod +x $script_name
}

function hook_postmake {
	base_build=$PWD
	base_build_lib="${base_build}/lib"
	base_build_bin="${base_build}/test/.libs"
        base_dist="${base_build}/${NESTED_LEVEL}"
	base_testsuite_script="run_testsuites.sh"
	base_testsuite_log="test-suite.log"
	base_testsuite_bin="bin"
	base_testsuite_lib="lib"

	testsuite_sdp=${EXEC_PREFIX}/bin/lely-core_tests
	testsuite_sdp_bin=${testsuite_sdp}/${base_testsuite_bin}
	testsuite_sdp_lib=${testsuite_sdp}/${base_testsuite_lib}

	pkg_ver=$(grep 'PACKAGE_VERSION' ${base_dist}/configure | grep -oP '\d+\.\d+\.\d+') || "UNKNOWN"

	#
	# uninstall all lely-core tests from SDP
	#
	if [ "${make_cmds}" == "uninstall" ] && [ -d ${testsuite_sdp} ]; then
		echo "we have to uninstall all canopen lely-core tests"
		(set -x; rm -rf ${testsuite_sdp})
	fi

	#
	# install all lely-core tests
	#
	if [ "${make_cmds}" == "check" ] && [ "${TARGET_SYSNAME}" == "nto" ] && [ "${SYSNAME}" == "linux" ]; then
		if [ "${ECSS}" == "on" ] ; then
			echo "${blu}=========================================================================${cls}"
			echo "${blu}For compliant with ECSS check option is deactivated.${cls}"
			echo "${blu}=========================================================================${cls}"
		elif [ -d ${base_build_lib} ] && [ -d ${base_build_bin} ]; then

			echo "${blu}=========================================================================${cls}"
			echo "${blu}Generate script to run testsuites for the ${cpu}${cls}"
			echo "${blu}=========================================================================${cls}"

			echo "Copy testsuite bin ..."

			[ -d "${testsuite_sdp_bin}" ] || (set -x; mkdir -p ${testsuite_sdp_bin})

			bin_list=$(find ${base_build_bin} -type f -executable)

			for _bin in ${bin_list}; do
				(set -x; cp -f ${_bin} ${testsuite_sdp_bin})
			done

			echo "Copy testsuite lib ..."

			[ -d "${testsuite_sdp_lib}" ] || (set -x; mkdir -p ${testsuite_sdp_lib})

			lib_list=$(find ${base_build_lib} -type f,l -executable)

			for _lib in ${lib_list}; do
				(set -x; cp -f ${_lib} ${testsuite_sdp_lib})
			done

			echo "Generate testsuite script ..."

			test_script_gen ${base_testsuite_script} ${base_testsuite_log} ${testsuite_sdp_bin} ${testsuite_sdp_lib} ${pkg_ver}

			echo "Setup testsuite script ..."

			(set -x; cp  -f ${base_testsuite_script} ${testsuite_sdp})

			echo "${grn}=========================================================================${cls}"
			echo "${grn}Testsuite summary for canopen lely-core ${pkg_ver}${cls}"
			echo "${grn}=========================================================================${cls}"

		else
			echo "${red}Error - base testsuite for canopen lely-core ${pkg_ver} was not found!${cls}";
			exit 1;
		fi
	fi
}
