#!/bin/sh

NESTED_LEVEL="${QNX_PROJECT_ROOT:-../../..}"  
BASIC_PREFIX="/usr/local"
EXEC_PREFIX="/${cpudir}${BASIC_PREFIX}"

function hook_preconfigure {
    echo "hook_preconfigure - running autogen.sh in ${NESTED_LEVEL}"

    unset AUTOMAKE AUTOCONF AUTOHEADER AUTORECONF ACLOCAL
    export DESTDIR="${INSTALL_ROOT_nto}"

    if [ ! -x "${NESTED_LEVEL}/configure" ]; then
        (cd "${NESTED_LEVEL}" && ./autogen.sh)
    fi
}

function hook_configure {
    echo "hook_configure - running configure for MPFR"

    export FORCE_CROSS_COMPILING=yes

    ${NESTED_LEVEL}/configure \
        --srcdir=${NESTED_LEVEL} \
        --prefix=${BASIC_PREFIX} \
        --exec-prefix=${EXEC_PREFIX} \
        --host=${machine} \
        --with-gmp=${INSTALL_ROOT_nto}${EXEC_PREFIX} \
        CFLAGS="-O2 -Wall" \
        CPPFLAGS="-I${INSTALL_ROOT_nto}${BASIC_PREFIX}/include" \
        LDFLAGS="-L${INSTALL_ROOT_nto}${BASIC_PREFIX}/lib" \
        || exit 1
}

function hook_make {
    echo "hook_make - running make ${make_cmds}"

    INSTALL_ROOT="${INSTALL_ROOT_nto}"
    FixMakeEnvironment

    if [ "${make_cmds}" = "install" ]; then
        make ${JLEVEL:+-j${JLEVEL}} install || exit 1
        find ${INSTALL_ROOT_nto} -name "*.la" -exec rm -f {} \;
    else
        make ${JLEVEL:+-j${JLEVEL}} ${make_cmds} || exit 1
    fi
}
