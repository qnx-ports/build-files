/* Generated by wayland-scanner 1.23.1 */

#ifndef WESTON_TEST_CLIENT_PROTOCOL_H
#define WESTON_TEST_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_weston_test The weston_test protocol
 * @section page_ifaces_weston_test Interfaces
 * - @subpage page_iface_weston_test - weston internal testing
 * - @subpage page_iface_weston_test_runner - weston internal testing
 * @section page_copyright_weston_test Copyright
 * <pre>
 *
 * Copyright Â© 2012 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * </pre>
 */
struct weston_test;
struct weston_test_runner;
struct wl_surface;

#ifndef WESTON_TEST_INTERFACE
#define WESTON_TEST_INTERFACE
/**
 * @page page_iface_weston_test weston_test
 * @section page_iface_weston_test_desc Description
 *
 * Internal testing facilities for the weston compositor.
 *
 * It can't be stressed enough that these should never ever be used
 * outside of running weston's tests.  The weston-test.so module should
 * never be installed.
 *
 * These requests may allow clients to do very bad things.
 * @section page_iface_weston_test_api API
 * See @ref iface_weston_test.
 */
/**
 * @defgroup iface_weston_test The weston_test interface
 *
 * Internal testing facilities for the weston compositor.
 *
 * It can't be stressed enough that these should never ever be used
 * outside of running weston's tests.  The weston-test.so module should
 * never be installed.
 *
 * These requests may allow clients to do very bad things.
 */
extern const struct wl_interface weston_test_interface;
#endif
#ifndef WESTON_TEST_RUNNER_INTERFACE
#define WESTON_TEST_RUNNER_INTERFACE
/**
 * @page page_iface_weston_test_runner weston_test_runner
 * @section page_iface_weston_test_runner_desc Description
 *
 * This is a global singleton interface for Weston internal tests.
 *
 * This interface allows a test client to trigger compositor-side
 * test procedures. This is useful for cases, where the actual tests
 * are in compositor plugins, but they also require the presence of
 * a particular client.
 *
 * This interface is implemented by the compositor plugins containing
 * the testing code.
 *
 * A test client starts a test with the "run" request. It must not send
 * another "run" request until receiving the "finished" event. If the
 * compositor-side test succeeds, the "finished" event is sent. If the
 * compositor-side test fails, the compositor should send the protocol
 * error "test_failed", but it may also exit with an error (e.g. SEGV).
 *
 * Unknown test name will raise "unknown_test" protocol error.
 * @section page_iface_weston_test_runner_api API
 * See @ref iface_weston_test_runner.
 */
/**
 * @defgroup iface_weston_test_runner The weston_test_runner interface
 *
 * This is a global singleton interface for Weston internal tests.
 *
 * This interface allows a test client to trigger compositor-side
 * test procedures. This is useful for cases, where the actual tests
 * are in compositor plugins, but they also require the presence of
 * a particular client.
 *
 * This interface is implemented by the compositor plugins containing
 * the testing code.
 *
 * A test client starts a test with the "run" request. It must not send
 * another "run" request until receiving the "finished" event. If the
 * compositor-side test succeeds, the "finished" event is sent. If the
 * compositor-side test fails, the compositor should send the protocol
 * error "test_failed", but it may also exit with an error (e.g. SEGV).
 *
 * Unknown test name will raise "unknown_test" protocol error.
 */
extern const struct wl_interface weston_test_runner_interface;
#endif

#ifndef WESTON_TEST_ERROR_ENUM
#define WESTON_TEST_ERROR_ENUM
enum weston_test_error {
	/**
	 * invalid coordinate
	 */
	WESTON_TEST_ERROR_TOUCH_UP_WITH_COORDINATE = 0,
};
#endif /* WESTON_TEST_ERROR_ENUM */

#ifndef WESTON_TEST_BREAKPOINT_ENUM
#define WESTON_TEST_BREAKPOINT_ENUM
enum weston_test_breakpoint {
	/**
	 * after output repaint (filter type: wl_output)
	 */
	WESTON_TEST_BREAKPOINT_POST_REPAINT = 0,
};
#endif /* WESTON_TEST_BREAKPOINT_ENUM */

/**
 * @ingroup iface_weston_test
 * @struct weston_test_listener
 */
struct weston_test_listener {
	/**
	 */
	void (*pointer_position)(void *data,
				 struct weston_test *weston_test,
				 wl_fixed_t x,
				 wl_fixed_t y);
};

/**
 * @ingroup iface_weston_test
 */
static inline int
weston_test_add_listener(struct weston_test *weston_test,
			 const struct weston_test_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) weston_test,
				     (void (**)(void)) listener, data);
}

#define WESTON_TEST_MOVE_SURFACE 0
#define WESTON_TEST_MOVE_POINTER 1
#define WESTON_TEST_SEND_BUTTON 2
#define WESTON_TEST_SEND_AXIS 3
#define WESTON_TEST_ACTIVATE_SURFACE 4
#define WESTON_TEST_SEND_KEY 5
#define WESTON_TEST_DEVICE_RELEASE 6
#define WESTON_TEST_DEVICE_ADD 7
#define WESTON_TEST_SEND_TOUCH 8
#define WESTON_TEST_CLIENT_BREAK 9

/**
 * @ingroup iface_weston_test
 */
#define WESTON_TEST_POINTER_POSITION_SINCE_VERSION 1

/**
 * @ingroup iface_weston_test
 */
#define WESTON_TEST_MOVE_SURFACE_SINCE_VERSION 1
/**
 * @ingroup iface_weston_test
 */
#define WESTON_TEST_MOVE_POINTER_SINCE_VERSION 1
/**
 * @ingroup iface_weston_test
 */
#define WESTON_TEST_SEND_BUTTON_SINCE_VERSION 1
/**
 * @ingroup iface_weston_test
 */
#define WESTON_TEST_SEND_AXIS_SINCE_VERSION 1
/**
 * @ingroup iface_weston_test
 */
#define WESTON_TEST_ACTIVATE_SURFACE_SINCE_VERSION 1
/**
 * @ingroup iface_weston_test
 */
#define WESTON_TEST_SEND_KEY_SINCE_VERSION 1
/**
 * @ingroup iface_weston_test
 */
#define WESTON_TEST_DEVICE_RELEASE_SINCE_VERSION 1
/**
 * @ingroup iface_weston_test
 */
#define WESTON_TEST_DEVICE_ADD_SINCE_VERSION 1
/**
 * @ingroup iface_weston_test
 */
#define WESTON_TEST_SEND_TOUCH_SINCE_VERSION 1
/**
 * @ingroup iface_weston_test
 */
#define WESTON_TEST_CLIENT_BREAK_SINCE_VERSION 1

/** @ingroup iface_weston_test */
static inline void
weston_test_set_user_data(struct weston_test *weston_test, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) weston_test, user_data);
}

/** @ingroup iface_weston_test */
static inline void *
weston_test_get_user_data(struct weston_test *weston_test)
{
	return wl_proxy_get_user_data((struct wl_proxy *) weston_test);
}

static inline uint32_t
weston_test_get_version(struct weston_test *weston_test)
{
	return wl_proxy_get_version((struct wl_proxy *) weston_test);
}

/** @ingroup iface_weston_test */
static inline void
weston_test_destroy(struct weston_test *weston_test)
{
	wl_proxy_destroy((struct wl_proxy *) weston_test);
}

/**
 * @ingroup iface_weston_test
 */
static inline void
weston_test_move_surface(struct weston_test *weston_test, struct wl_surface *surface, int32_t x, int32_t y)
{
	wl_proxy_marshal_flags((struct wl_proxy *) weston_test,
			 WESTON_TEST_MOVE_SURFACE, NULL, wl_proxy_get_version((struct wl_proxy *) weston_test), 0, surface, x, y);
}

/**
 * @ingroup iface_weston_test
 */
static inline void
weston_test_move_pointer(struct weston_test *weston_test, uint32_t tv_sec_hi, uint32_t tv_sec_lo, uint32_t tv_nsec, int32_t x, int32_t y)
{
	wl_proxy_marshal_flags((struct wl_proxy *) weston_test,
			 WESTON_TEST_MOVE_POINTER, NULL, wl_proxy_get_version((struct wl_proxy *) weston_test), 0, tv_sec_hi, tv_sec_lo, tv_nsec, x, y);
}

/**
 * @ingroup iface_weston_test
 */
static inline void
weston_test_send_button(struct weston_test *weston_test, uint32_t tv_sec_hi, uint32_t tv_sec_lo, uint32_t tv_nsec, int32_t button, uint32_t state)
{
	wl_proxy_marshal_flags((struct wl_proxy *) weston_test,
			 WESTON_TEST_SEND_BUTTON, NULL, wl_proxy_get_version((struct wl_proxy *) weston_test), 0, tv_sec_hi, tv_sec_lo, tv_nsec, button, state);
}

/**
 * @ingroup iface_weston_test
 */
static inline void
weston_test_send_axis(struct weston_test *weston_test, uint32_t tv_sec_hi, uint32_t tv_sec_lo, uint32_t tv_nsec, uint32_t axis, wl_fixed_t value)
{
	wl_proxy_marshal_flags((struct wl_proxy *) weston_test,
			 WESTON_TEST_SEND_AXIS, NULL, wl_proxy_get_version((struct wl_proxy *) weston_test), 0, tv_sec_hi, tv_sec_lo, tv_nsec, axis, value);
}

/**
 * @ingroup iface_weston_test
 */
static inline void
weston_test_activate_surface(struct weston_test *weston_test, struct wl_surface *surface)
{
	wl_proxy_marshal_flags((struct wl_proxy *) weston_test,
			 WESTON_TEST_ACTIVATE_SURFACE, NULL, wl_proxy_get_version((struct wl_proxy *) weston_test), 0, surface);
}

/**
 * @ingroup iface_weston_test
 */
static inline void
weston_test_send_key(struct weston_test *weston_test, uint32_t tv_sec_hi, uint32_t tv_sec_lo, uint32_t tv_nsec, uint32_t key, uint32_t state)
{
	wl_proxy_marshal_flags((struct wl_proxy *) weston_test,
			 WESTON_TEST_SEND_KEY, NULL, wl_proxy_get_version((struct wl_proxy *) weston_test), 0, tv_sec_hi, tv_sec_lo, tv_nsec, key, state);
}

/**
 * @ingroup iface_weston_test
 */
static inline void
weston_test_device_release(struct weston_test *weston_test, const char *device)
{
	wl_proxy_marshal_flags((struct wl_proxy *) weston_test,
			 WESTON_TEST_DEVICE_RELEASE, NULL, wl_proxy_get_version((struct wl_proxy *) weston_test), 0, device);
}

/**
 * @ingroup iface_weston_test
 */
static inline void
weston_test_device_add(struct weston_test *weston_test, const char *device)
{
	wl_proxy_marshal_flags((struct wl_proxy *) weston_test,
			 WESTON_TEST_DEVICE_ADD, NULL, wl_proxy_get_version((struct wl_proxy *) weston_test), 0, device);
}

/**
 * @ingroup iface_weston_test
 */
static inline void
weston_test_send_touch(struct weston_test *weston_test, uint32_t tv_sec_hi, uint32_t tv_sec_lo, uint32_t tv_nsec, int32_t touch_id, wl_fixed_t x, wl_fixed_t y, uint32_t touch_type)
{
	wl_proxy_marshal_flags((struct wl_proxy *) weston_test,
			 WESTON_TEST_SEND_TOUCH, NULL, wl_proxy_get_version((struct wl_proxy *) weston_test), 0, tv_sec_hi, tv_sec_lo, tv_nsec, touch_id, x, y, touch_type);
}

/**
 * @ingroup iface_weston_test
 *
 * Request that the compositor pauses execution at a certain point. When
 * execution is paused, the compositor will signal the shared semaphore
 * to the client.
 */
static inline void
weston_test_client_break(struct weston_test *weston_test, uint32_t breakpoint, uint32_t resource_id)
{
	wl_proxy_marshal_flags((struct wl_proxy *) weston_test,
			 WESTON_TEST_CLIENT_BREAK, NULL, wl_proxy_get_version((struct wl_proxy *) weston_test), 0, breakpoint, resource_id);
}

#ifndef WESTON_TEST_RUNNER_ERROR_ENUM
#define WESTON_TEST_RUNNER_ERROR_ENUM
enum weston_test_runner_error {
	/**
	 * compositor test failed
	 */
	WESTON_TEST_RUNNER_ERROR_TEST_FAILED = 0,
	/**
	 * unrecognized test name
	 */
	WESTON_TEST_RUNNER_ERROR_UNKNOWN_TEST = 1,
};
#endif /* WESTON_TEST_RUNNER_ERROR_ENUM */

/**
 * @ingroup iface_weston_test_runner
 * @struct weston_test_runner_listener
 */
struct weston_test_runner_listener {
	/**
	 */
	void (*finished)(void *data,
			 struct weston_test_runner *weston_test_runner);
};

/**
 * @ingroup iface_weston_test_runner
 */
static inline int
weston_test_runner_add_listener(struct weston_test_runner *weston_test_runner,
				const struct weston_test_runner_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) weston_test_runner,
				     (void (**)(void)) listener, data);
}

#define WESTON_TEST_RUNNER_DESTROY 0
#define WESTON_TEST_RUNNER_RUN 1

/**
 * @ingroup iface_weston_test_runner
 */
#define WESTON_TEST_RUNNER_FINISHED_SINCE_VERSION 1

/**
 * @ingroup iface_weston_test_runner
 */
#define WESTON_TEST_RUNNER_DESTROY_SINCE_VERSION 1
/**
 * @ingroup iface_weston_test_runner
 */
#define WESTON_TEST_RUNNER_RUN_SINCE_VERSION 1

/** @ingroup iface_weston_test_runner */
static inline void
weston_test_runner_set_user_data(struct weston_test_runner *weston_test_runner, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) weston_test_runner, user_data);
}

/** @ingroup iface_weston_test_runner */
static inline void *
weston_test_runner_get_user_data(struct weston_test_runner *weston_test_runner)
{
	return wl_proxy_get_user_data((struct wl_proxy *) weston_test_runner);
}

static inline uint32_t
weston_test_runner_get_version(struct weston_test_runner *weston_test_runner)
{
	return wl_proxy_get_version((struct wl_proxy *) weston_test_runner);
}

/**
 * @ingroup iface_weston_test_runner
 */
static inline void
weston_test_runner_destroy(struct weston_test_runner *weston_test_runner)
{
	wl_proxy_marshal_flags((struct wl_proxy *) weston_test_runner,
			 WESTON_TEST_RUNNER_DESTROY, NULL, wl_proxy_get_version((struct wl_proxy *) weston_test_runner), WL_MARSHAL_FLAG_DESTROY);
}

/**
 * @ingroup iface_weston_test_runner
 */
static inline void
weston_test_runner_run(struct weston_test_runner *weston_test_runner, const char *test_name)
{
	wl_proxy_marshal_flags((struct wl_proxy *) weston_test_runner,
			 WESTON_TEST_RUNNER_RUN, NULL, wl_proxy_get_version((struct wl_proxy *) weston_test_runner), 0, test_name);
}

#ifdef  __cplusplus
}
#endif

#endif
