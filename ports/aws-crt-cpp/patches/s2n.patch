diff --git a/CMakeLists.txt b/CMakeLists.txt
index d16e5f5f0..f3d36955c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -97,6 +97,8 @@ elseif(CMAKE_SYSTEM_NAME STREQUAL "OpenBSD")
     set(OS_LIBS Threads::Threads kvm)
 elseif(CMAKE_SYSTEM_NAME STREQUAL "Android")
     set(OS_LIBS Threads::Threads dl)
+elseif(QNX)
+    set(OS_LIBS c Threads::Threads)
 else()
     set(OS_LIBS Threads::Threads dl rt)
 endif()
diff --git a/crypto/s2n_drbg.c b/crypto/s2n_drbg.c
index 99e4c682e..3b2f67acf 100644
--- a/crypto/s2n_drbg.c
+++ b/crypto/s2n_drbg.c
@@ -27,6 +27,10 @@ static bool ignore_prediction_resistance_for_testing = false;
 #define s2n_drbg_key_size(drgb)  EVP_CIPHER_CTX_key_length((drbg)->ctx)
 #define s2n_drbg_seed_size(drgb) (S2N_DRBG_BLOCK_SIZE + s2n_drbg_key_size(drgb))
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 /* This function is the same as s2n_increment_sequence_number
     but it does not check for overflow, since overflow is
     acceptable in DRBG */
diff --git a/stuffer/s2n_stuffer.c b/stuffer/s2n_stuffer.c
index 134ec0ba9..5c1f3b26e 100644
--- a/stuffer/s2n_stuffer.c
+++ b/stuffer/s2n_stuffer.c
@@ -22,6 +22,11 @@
 #include "utils/s2n_mem.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 S2N_RESULT s2n_stuffer_validate(const struct s2n_stuffer *stuffer)
 {
     /**
diff --git a/tls/extensions/s2n_client_psk.c b/tls/extensions/s2n_client_psk.c
index 271548b29..51eb3408c 100644
--- a/tls/extensions/s2n_client_psk.c
+++ b/tls/extensions/s2n_client_psk.c
@@ -25,6 +25,10 @@
 #include "utils/s2n_bitmap.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 #define SIZE_OF_BINDER_SIZE      sizeof(uint8_t)
 #define SIZE_OF_BINDER_LIST_SIZE sizeof(uint16_t)
 
diff --git a/tls/extensions/s2n_client_supported_versions.c b/tls/extensions/s2n_client_supported_versions.c
index d59adb173..6c765b904 100644
--- a/tls/extensions/s2n_client_supported_versions.c
+++ b/tls/extensions/s2n_client_supported_versions.c
@@ -25,6 +25,10 @@
 #include "tls/s2n_tls_parameters.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
+#endif
+
 /**
  * Specified in https://tools.ietf.org/html/rfc8446#section-4.2.1
  *
diff --git a/tls/extensions/s2n_supported_versions.c b/tls/extensions/s2n_supported_versions.c
index 86c40ecca..32afdf419 100644
--- a/tls/extensions/s2n_supported_versions.c
+++ b/tls/extensions/s2n_supported_versions.c
@@ -21,6 +21,10 @@
 #include "tls/s2n_security_policies.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
+#endif
+
 S2N_RESULT s2n_connection_get_minimum_supported_version(struct s2n_connection *conn, uint8_t *min_version)
 {
     RESULT_ENSURE_REF(min_version);
diff --git a/tls/s2n_alerts.c b/tls/s2n_alerts.c
index 73c46c63d..38d11c932 100644
--- a/tls/s2n_alerts.c
+++ b/tls/s2n_alerts.c
@@ -27,6 +27,10 @@
 #include "utils/s2n_blob.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 #define S2N_ALERT_CASE(error, alert_code) \
     case (error):                         \
         *alert = (alert_code);            \
diff --git a/tls/s2n_cbc.c b/tls/s2n_cbc.c
index 20367a10a..7c850c59f 100644
--- a/tls/s2n_cbc.c
+++ b/tls/s2n_cbc.c
@@ -23,6 +23,11 @@
 #include "utils/s2n_mem.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 /* A TLS CBC record looks like ..
  *
  * [ Payload data ] [ HMAC ] [ Padding ] [ Padding length byte ]
diff --git a/tls/s2n_client_hello.c b/tls/s2n_client_hello.c
index 24e48dfee..b35db9c5c 100644
--- a/tls/s2n_client_hello.c
+++ b/tls/s2n_client_hello.c
@@ -43,6 +43,10 @@
 #include "utils/s2n_random.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 struct s2n_client_hello *s2n_connection_get_client_hello(struct s2n_connection *conn)
 {
     if (conn->client_hello.parsed != 1) {
diff --git a/tls/s2n_config.h b/tls/s2n_config.h
index 801777281..21453d269 100644
--- a/tls/s2n_config.h
+++ b/tls/s2n_config.h
@@ -31,6 +31,10 @@
 #include "utils/s2n_blob.h"
 #include "utils/s2n_set.h"
 
+#if defined(__QNX__)
+    #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
+#endif
+
 #define S2N_MAX_TICKET_KEYS       48
 #define S2N_MAX_TICKET_KEY_HASHES 500 /* 10KB */
 
diff --git a/tls/s2n_connection.c b/tls/s2n_connection.c
index fcc737d77..7f10999ea 100644
--- a/tls/s2n_connection.c
+++ b/tls/s2n_connection.c
@@ -59,6 +59,10 @@
 #define S2N_SET_KEY_SHARE_LIST_EMPTY(keyshares) (keyshares |= 1)
 #define S2N_SET_KEY_SHARE_REQUEST(keyshares, i) (keyshares |= (1 << (i + 1)))
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 static S2N_RESULT s2n_connection_and_config_get_client_auth_type(const struct s2n_connection *conn,
         const struct s2n_config *config, s2n_cert_auth_type *client_cert_auth_type);
 
diff --git a/tls/s2n_early_data.c b/tls/s2n_early_data.c
index bb61331e7..b26107baa 100644
--- a/tls/s2n_early_data.c
+++ b/tls/s2n_early_data.c
@@ -23,6 +23,10 @@
 #include "utils/s2n_mem.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 const s2n_early_data_state valid_previous_states[] = {
     [S2N_EARLY_DATA_REQUESTED] = S2N_UNKNOWN_EARLY_DATA_STATE,
     [S2N_EARLY_DATA_NOT_REQUESTED] = S2N_UNKNOWN_EARLY_DATA_STATE,
diff --git a/tls/s2n_early_data_io.c b/tls/s2n_early_data_io.c
index 2201c0fc4..f68814997 100644
--- a/tls/s2n_early_data_io.c
+++ b/tls/s2n_early_data_io.c
@@ -20,6 +20,10 @@
 #include "utils/s2n_mem.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 int s2n_end_of_early_data_send(struct s2n_connection *conn)
 {
     if (conn->early_data_expected) {
diff --git a/tls/s2n_fingerprint_ja4.c b/tls/s2n_fingerprint_ja4.c
index 171e514a7..1cf9467dd 100644
--- a/tls/s2n_fingerprint_ja4.c
+++ b/tls/s2n_fingerprint_ja4.c
@@ -51,6 +51,10 @@
 #define S2N_JA4_IANA_ENTRY_SIZE (S2N_JA4_IANA_HEX_SIZE + 1)
 #define S2N_JA4_WORKSPACE_SIZE  ((S2N_JA4_LIST_LIMIT * (S2N_JA4_IANA_ENTRY_SIZE)))
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 const char *s2n_ja4_version_strings[] = {
     /**
      *= https://raw.githubusercontent.com/FoxIO-LLC/ja4/df3c067/technical_details/JA4.md#tls-and-dtls-version
diff --git a/tls/s2n_handshake_io.c b/tls/s2n_handshake_io.c
index 3d3479683..4e13a4f73 100644
--- a/tls/s2n_handshake_io.c
+++ b/tls/s2n_handshake_io.c
@@ -37,6 +37,10 @@
 #include "utils/s2n_safety.h"
 #include "utils/s2n_socket.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 /* clang-format off */
 struct s2n_handshake_action {
     uint8_t record_type;
diff --git a/tls/s2n_post_handshake.c b/tls/s2n_post_handshake.c
index e0c3daed8..be0032242 100644
--- a/tls/s2n_post_handshake.c
+++ b/tls/s2n_post_handshake.c
@@ -21,6 +21,10 @@
 #include "tls/s2n_tls.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 S2N_RESULT s2n_post_handshake_process(struct s2n_connection *conn, struct s2n_stuffer *in, uint8_t message_type)
 {
     RESULT_ENSURE_REF(conn);
diff --git a/tls/s2n_prf.c b/tls/s2n_prf.c
index 614a8818f..b6a204c1e 100644
--- a/tls/s2n_prf.c
+++ b/tls/s2n_prf.c
@@ -35,6 +35,10 @@
 #include "utils/s2n_mem.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 S2N_RESULT s2n_key_material_init(struct s2n_key_material *key_material, struct s2n_connection *conn)
 {
     RESULT_ENSURE_REF(key_material);
diff --git a/tls/s2n_psk.c b/tls/s2n_psk.c
index b02ddc94c..a5f566efa 100644
--- a/tls/s2n_psk.c
+++ b/tls/s2n_psk.c
@@ -25,6 +25,10 @@
 #include "utils/s2n_mem.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 #define S2N_HASH_ALG_COUNT S2N_HASH_SENTINEL
 
 S2N_RESULT s2n_psk_init(struct s2n_psk *psk, s2n_psk_type type)
diff --git a/tls/s2n_record_read.c b/tls/s2n_record_read.c
index 1a078befd..4be0b811b 100644
--- a/tls/s2n_record_read.c
+++ b/tls/s2n_record_read.c
@@ -28,6 +28,10 @@
 #include "utils/s2n_blob.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 int s2n_sslv2_record_header_parse(
         struct s2n_connection *conn,
         uint8_t *record_type,
diff --git a/tls/s2n_record_write.c b/tls/s2n_record_write.c
index 115e8d7d1..631283127 100644
--- a/tls/s2n_record_write.c
+++ b/tls/s2n_record_write.c
@@ -30,6 +30,11 @@
 #include "utils/s2n_random.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 extern uint8_t s2n_unknown_protocol_version;
 
 /* In TLS1.3 the record type is obfuscated as APPLICATION_DATA once the handshake begins to be encrypted.
diff --git a/tls/s2n_recv.c b/tls/s2n_recv.c
index a5b1cb505..0fd524f36 100644
--- a/tls/s2n_recv.c
+++ b/tls/s2n_recv.c
@@ -36,6 +36,11 @@
 #include "utils/s2n_safety.h"
 #include "utils/s2n_socket.h"
 
+#if defined(__QNX__)
+    #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 S2N_RESULT s2n_recv_in_init(struct s2n_connection *conn, uint32_t written, uint32_t total)
 {
     RESULT_ENSURE_REF(conn);
diff --git a/tls/s2n_resume.c b/tls/s2n_resume.c
index abca18fcc..b43dcda4d 100644
--- a/tls/s2n_resume.c
+++ b/tls/s2n_resume.c
@@ -29,6 +29,10 @@
 #include "utils/s2n_safety.h"
 #include "utils/s2n_set.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 int s2n_allowed_to_cache_connection(struct s2n_connection *conn)
 {
     /* We're unable to cache connections with a Client Cert since we currently don't serialize the Client Cert,
diff --git a/tls/s2n_send.c b/tls/s2n_send.c
index 042a3e8d5..91c4df1f5 100644
--- a/tls/s2n_send.c
+++ b/tls/s2n_send.c
@@ -32,6 +32,10 @@
 #include "utils/s2n_io.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 /*
  * Determine whether there is currently sufficient space in the send buffer to construct
  * another record, or if we need to flush now.
diff --git a/tls/s2n_server_hello.c b/tls/s2n_server_hello.c
index d08999e4b..99e589966 100644
--- a/tls/s2n_server_hello.c
+++ b/tls/s2n_server_hello.c
@@ -34,6 +34,10 @@
 #include "utils/s2n_random.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 /* From RFC5246 7.4.1.2. */
 #define S2N_TLS_COMPRESSION_METHOD_NULL 0
 
diff --git a/tls/s2n_server_new_session_ticket.c b/tls/s2n_server_new_session_ticket.c
index f0cb82ab4..2efd1a291 100644
--- a/tls/s2n_server_new_session_ticket.c
+++ b/tls/s2n_server_new_session_ticket.c
@@ -28,6 +28,10 @@
 #include "utils/s2n_random.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 /*
  * The maximum size of the NewSessionTicket message, not taking into account the
  * ticket itself.
diff --git a/tls/s2n_tls13_handshake.c b/tls/s2n_tls13_handshake.c
index b9f2adf70..69c53c753 100644
--- a/tls/s2n_tls13_handshake.c
+++ b/tls/s2n_tls13_handshake.c
@@ -19,6 +19,10 @@
 #include "tls/s2n_key_log.h"
 #include "tls/s2n_security_policies.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 static int s2n_zero_sequence_number(struct s2n_connection *conn, s2n_mode mode)
 {
     POSIX_ENSURE_REF(conn);
diff --git a/utils/s2n_array.c b/utils/s2n_array.c
index b9f5d8843..e7d9be32c 100644
--- a/utils/s2n_array.c
+++ b/utils/s2n_array.c
@@ -21,6 +21,10 @@
 #include "utils/s2n_mem.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
+#endif
+
 S2N_RESULT s2n_array_validate(const struct s2n_array *array)
 {
     uint32_t mem_size = 0;
diff --git a/utils/s2n_blob.c b/utils/s2n_blob.c
index 58cd7b0a7..8959f9d26 100644
--- a/utils/s2n_blob.c
+++ b/utils/s2n_blob.c
@@ -23,6 +23,10 @@
 #include "error/s2n_errno.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
+#endif
+
 S2N_RESULT s2n_blob_validate(const struct s2n_blob *b)
 {
     RESULT_ENSURE_REF(b);
diff --git a/utils/s2n_mem.c b/utils/s2n_mem.c
index 7f8b2afa0..f1c5580d1 100644
--- a/utils/s2n_mem.c
+++ b/utils/s2n_mem.c
@@ -30,6 +30,10 @@
 #include "utils/s2n_mem.h"
 #include "utils/s2n_safety.h"
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 static uint32_t page_size = 4096;
 static bool initialized = false;
 
diff --git a/utils/s2n_random.c b/utils/s2n_random.c
index ac8f9817b..ae3bbd3b7 100644
--- a/utils/s2n_random.c
+++ b/utils/s2n_random.c
@@ -91,6 +91,10 @@
 /* Placeholder value for an uninitialized entropy file descriptor */
 #define UNINITIALIZED_ENTROPY_FD -1
 
+#if defined(__QNX__)
+    #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
+#endif
+
 static struct s2n_rand_device s2n_dev_urandom = {
     .source = "/dev/urandom",
     .fd = UNINITIALIZED_ENTROPY_FD,
