From 65e801566e66558871001228251b580e88b1c1e9 Mon Sep 17 00:00:00 2001
From: Yongxin Dai <yodai@qnx.com>
Date: Sat, 12 Jul 2025 14:37:11 -0400
Subject: [PATCH] Changes for QNX in build

---
 build/config/BUILD.gn              |  11 +++
 build/config/BUILDCONFIG.gn        |   9 +-
 build/config/compiler/BUILD.gn     |  31 +++++--
 build/config/compiler/compiler.gni |   4 +
 build/config/nacl/BUILD.gn         | 132 +++++++++++++++++++++++++++++
 build/config/qnx/BUILD.gn          |  45 ++++++++++
 build/config/qnx/config.gni        |   2 +
 build/qnx/setenv_arm_64.sh         |  92 ++++++++++++++++++++
 build/qnx/setenv_x86_64.sh         |  92 ++++++++++++++++++++
 build/toolchain/qnx/BUILD.gn       |  70 +++++++++++++++
 10 files changed, 479 insertions(+), 9 deletions(-)
 create mode 100644 build/config/nacl/BUILD.gn
 create mode 100644 build/config/qnx/BUILD.gn
 create mode 100644 build/config/qnx/config.gni
 create mode 100644 build/qnx/setenv_arm_64.sh
 create mode 100644 build/qnx/setenv_x86_64.sh
 create mode 100644 build/toolchain/qnx/BUILD.gn

diff --git a/build/config/BUILD.gn b/build/config/BUILD.gn
index 56ca3ca7392bb..2ab177c2441f5 100644
--- a/build/config/BUILD.gn
+++ b/build/config/BUILD.gn
@@ -215,6 +215,13 @@ config("default_libs") {
       "pthread",
       "rt",
     ]
+  } else if (is_qnx) {
+    # Targets should choose to explicitly link frameworks they require. Since
+    # linking can have run-time side effects, nothing should be listed here.
+    libs = [
+      "c",
+      "m",
+    ]
   }
 }
 
@@ -352,6 +359,8 @@ config("executable_config") {
     if (is_castos || is_cast_android) {
       configs += [ "//build/config/chromecast:executable_config" ]
     }
+  } else if (is_qnx) {
+    configs += [ "//build/config/gcc:executable_config" ]
   }
 
   # If we're using the prebuilt instrumented libraries with the sanitizers, we
@@ -383,6 +392,8 @@ config("shared_library_config") {
     configs += [ "//build/config/chromecast:shared_library_config" ]
   } else if (is_linux || is_chromeos || current_os == "aix") {
     configs += [ "//build/config/gcc:shared_library_config" ]
+  } else if (is_qnx) {
+    configs += [ "//build/config/gcc:shared_library_config" ]
   }
 
   # If we're using the prebuilt instrumented libraries with the sanitizers, we
diff --git a/build/config/BUILDCONFIG.gn b/build/config/BUILDCONFIG.gn
index 147226d72330b..2d087549362c8 100644
--- a/build/config/BUILDCONFIG.gn
+++ b/build/config/BUILDCONFIG.gn
@@ -57,6 +57,8 @@ if (target_cpu == "") {
     # This allows us to not have to specify both target_os and target_cpu
     # on the command line.
     target_cpu = "arm"
+  } else if (target_os == "qnx") {
+    target_cpu = "arm64"
   } else {
     target_cpu = host_cpu
   }
@@ -136,11 +138,11 @@ declare_args() {
   is_official_build = false
 
   # Set to true when compiling with the Clang compiler.
-  is_clang = current_os != "linux" ||
+  is_clang = (current_os != "linux" ||
              (current_cpu != "s390x" && current_cpu != "s390" &&
               current_cpu != "ppc64" && current_cpu != "ppc" &&
               current_cpu != "mips" && current_cpu != "mips64" &&
-              current_cpu != "riscv64")
+              current_cpu != "riscv64")) && current_os != "qnx"
 
   # Allows the path to a custom target toolchain to be injected as a single
   # argument, and set as the default toolchain.
@@ -286,6 +288,8 @@ if (target_os == "android") {
   _default_toolchain = "//build/toolchain/aix:$target_cpu"
 } else if (target_os == "zos") {
   _default_toolchain = "//build/toolchain/zos:$target_cpu"
+} else if (target_os == "qnx") {
+  _default_toolchain = "//build/toolchain/qnx:$target_cpu"
 } else if (target_os == "emscripten") {
   # Because it's too hard to remove all targets from //BUILD.gn that do not work with it.
   assert(
@@ -335,6 +339,7 @@ is_nacl = false
 
 is_wasm = current_os == "emscripten"
 is_watchos = current_os == "watchos"
+is_qnx = current_os == "qnx"
 is_win = current_os == "win" || current_os == "winuwp"
 
 is_apple = is_ios || is_mac || is_watchos
diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index 29c284ee01947..3ff9b105bca1c 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -120,7 +120,7 @@ declare_args() {
   # the space overhead is too great. We should use some mixture of profiles and
   # optimization settings to better tune the size increase.
   thin_lto_enable_optimizations =
-      (is_chromeos || is_android || is_win || is_linux || is_mac ||
+      (is_chromeos || is_android || is_win || is_linux || is_mac || is_qnx ||
        (is_ios && use_lld)) && is_official_build
 
   # Whether to enable thin lto incremental builds.
@@ -318,6 +318,8 @@ config("compiler") {
     configs += [ "//build/config/aix:compiler" ]
   } else if (current_os == "zos") {
     configs += [ "//build/config/zos:compiler" ]
+  } else if (is_qnx) {
+    configs += [ "//build/config/qnx:compiler" ]
   }
 
   configs += [
@@ -420,7 +422,7 @@ config("compiler") {
 
     # Linker warnings.
     if (fatal_linker_warnings && !is_apple && current_os != "aix" &&
-        current_os != "zos") {
+        current_os != "zos" && current_os != "qnx") {
       ldflags += [ "-Wl,--fatal-warnings" ]
     }
     if (fatal_linker_warnings && is_apple) {
@@ -508,7 +510,7 @@ config("compiler") {
 
   # Linux/Android/Fuchsia common flags setup.
   # ---------------------------------
-  if (is_linux || is_chromeos || is_android || is_fuchsia) {
+  if (is_linux || is_chromeos || is_android || is_fuchsia || is_qnx) {
     asmflags += [ "-fPIC" ]
     cflags += [ "-fPIC" ]
     ldflags += [ "-fPIC" ]
@@ -717,11 +719,23 @@ config("compiler") {
 
     if (defined(use_cxx17) && use_cxx17) {
       assert(!use_cxx23)
-      cflags_cc += [ "-std=c++17" ]
+      if(is_qnx) {
+        cflags_cc += [ "-std=gnu++17" ]
+      } else {
+        cflags_cc += [ "-std=c++17" ]
+      }
     } else if (use_cxx23) {
-      cflags_cc += [ "-std=c++23" ]
+      if(is_qnx) {
+        cflags_cc += [ "-std=gnu++23" ]
+      } else {
+        cflags_cc += [ "-std=c++23" ]
+      }
     } else {
-      cflags_cc += [ "-std=c++20" ]
+      if(is_qnx) {
+        cflags_cc += [ "-std=gnu++2a" ]
+      } else {
+        cflags_cc += [ "-std=c++20" ]
+      }
     }
   }
 
@@ -1244,7 +1258,7 @@ config("compiler_cpu_abi") {
     # CPU architecture. We may or may not be doing a cross compile now, so for
     # simplicity we always explicitly set the architecture.
     if (current_cpu == "x64") {
-      if (is_clang && !is_android && !is_fuchsia && !is_chromeos_device) {
+      if (is_clang && !is_android && !is_fuchsia && !is_chromeos_device && !is_qnx) {
         cflags += [ "--target=x86_64-unknown-linux-gnu" ]
         ldflags += [ "--target=x86_64-unknown-linux-gnu" ]
       } else {
@@ -2788,6 +2802,8 @@ config("no_optimize") {
     # On Fuchsia, we optimize for size here to reduce the size of debug build
     # packages so they can be run in a KVM. See crbug.com/910243 for details.
     cflags = [ "-Og" ]
+  } else if (is_qnx) {
+    cflags = [ "-Os" ]
   } else {
     cflags = [ "-O0" ]
     ldflags = []
@@ -3147,6 +3163,7 @@ config("minimal_symbols") {
       # former.
       cflags += [ "-gline-tables-only" ]
     }
+
   } else {
     cflags = []
     if (is_mac && !use_dwarf5) {
diff --git a/build/config/compiler/compiler.gni b/build/config/compiler/compiler.gni
index 61c3779e9fd11..b46a1a0996bfa 100644
--- a/build/config/compiler/compiler.gni
+++ b/build/config/compiler/compiler.gni
@@ -25,6 +25,10 @@ if (is_apple) {
   import("//build/config/apple/symbols.gni")
 }
 
+if (is_qnx) {
+  import("//build/config/qnx/config.gni")
+}
+
 declare_args() {
   # Set to true to use lld, the LLVM linker.
   # In late bring-up on macOS (see docs/mac_lld.md).
diff --git a/build/config/nacl/BUILD.gn b/build/config/nacl/BUILD.gn
new file mode 100644
index 0000000000000..76989debb7e62
--- /dev/null
+++ b/build/config/nacl/BUILD.gn
@@ -0,0 +1,132 @@
+# Copyright (c) 2014 The Native Client Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//build/config/nacl/config.gni")
+
+# Native Client Definitions
+config("nacl_defines") {
+  if (is_linux || is_chromeos || is_android || is_nacl || is_qnx) {
+    defines = [
+      "_POSIX_C_SOURCE=199506",
+      "_XOPEN_SOURCE=600",
+      "_GNU_SOURCE=1",
+      "__STDC_LIMIT_MACROS=1",
+    ]
+  } else if (is_win) {
+    defines = [ "__STDC_LIMIT_MACROS=1" ]
+  }
+
+  if (current_cpu == "pnacl") {
+    # TODO: Remove the following definition once NACL_BUILD_ARCH and
+    # NACL_BUILD_SUBARCH are defined by the PNaCl toolchain.
+    defines += [ "NACL_BUILD_ARCH=pnacl" ]
+  }
+}
+
+config("nexe_defines") {
+  defines = [
+    "DYNAMIC_ANNOTATIONS_ENABLED=1",
+    "DYNAMIC_ANNOTATIONS_PREFIX=NACL_",
+  ]
+}
+
+config("nacl_warnings") {
+  if (is_win) {
+    # Some NaCl code uses forward declarations of static const variables,
+    # with initialized definitions later on.  (The alternative would be
+    # many, many more forward declarations of everything used in that
+    # const variable's initializer before the definition.)  The Windows
+    # compiler doesn't see that there is an initializer later in the file,
+    # and warns about the forward declaration.
+    cflags = [ "/wd4132" ]
+  }
+}
+
+config("nacl_static_libstdc++") {
+  # The sysroot of linux x86 bots can have a different version of libstdc++
+  # than the one that is on the bots natively. Linking dynamically against
+  # libstdc++ can then lead to linking against symbols that are not found when
+  # running the executable.
+  # Therefore, link statically instead.
+  if (is_linux && current_cpu == "x86") {
+    ldflags = [ "-static-libstdc++" ]
+  }
+}
+
+# The base target that all targets in the NaCl build should depend on.
+# This allows configs to be modified for everything in the NaCl build, even when
+# the NaCl build is composed into the Chrome build.  (GN has no functionality to
+# add flags to everything in //native_client, having a base target works around
+# that limitation.)
+source_set("nacl_base") {
+  public_configs = [
+    ":nacl_defines",
+    ":nacl_warnings",
+    ":nacl_static_libstdc++",
+  ]
+  if (current_os == "nacl") {
+    public_configs += [ ":nexe_defines" ]
+  }
+}
+
+config("compiler") {
+  configs = []
+  cflags = []
+  ldflags = []
+  libs = []
+
+  if (is_clang && current_cpu != "pnacl") {
+    # -no-integrated-as is the default in nacl-clang for historical
+    # compatibility with inline assembly code and so forth.  But there
+    # are no such cases in Chromium code, and -integrated-as is nicer in
+    # general.  Moreover, the IRT must be built using LLVM's assembler
+    # on x86-64 to preserve sandbox base address hiding.  Use it
+    # everywhere for consistency (and possibly quicker builds).
+    cflags += [ "-integrated-as" ]
+  }
+
+  asmflags = cflags
+}
+
+config("compiler_codegen") {
+  cflags = []
+
+  if (is_nacl_irt) {
+    cflags += [
+      # A debugger should be able to unwind IRT call frames.  This is
+      # the default behavior on x86-64 and when compiling C++ with
+      # exceptions enabled; the change is for the benefit of x86-32 C.
+      # The frame pointer is unnecessary when unwind tables are used.
+      "-fasynchronous-unwind-tables",
+      "-fomit-frame-pointer",
+    ]
+
+    if (current_cpu == "x86") {
+      # The x86-32 IRT needs to be callable with an under-aligned
+      # stack; so we disable SSE instructions, which can fault on
+      # misaligned addresses.  See
+      # https://code.google.com/p/nativeclient/issues/detail?id=3935
+      cflags += [
+        "-mstackrealign",
+        "-mno-sse",
+      ]
+    }
+  }
+
+  asmflags = cflags
+}
+
+config("irt_optimize") {
+  cflags = [
+    # Optimize for space, keep the IRT nexe small.
+    "-Os",
+
+    # These are omitted from non-IRT libraries to keep the libraries
+    # themselves small.
+    "-ffunction-sections",
+    "-fdata-sections",
+  ]
+
+  ldflags = [ "-Wl,--gc-sections" ]
+}
diff --git a/build/config/qnx/BUILD.gn b/build/config/qnx/BUILD.gn
new file mode 100644
index 0000000000000..4539246d4c0a2
--- /dev/null
+++ b/build/config/qnx/BUILD.gn
@@ -0,0 +1,45 @@
+# Copyright (c) 2013 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//build/config/qnx/config.gni")
+import("//build/config/c++/c++.gni")
+import("//build/config/compiler/compiler.gni")
+
+group("qnx") {
+  visibility = [ "//:optimize_gn_gen" ]
+}
+
+# This is included by reference in the //build/config/compiler config that
+# is applied to all targets. It is here to separate out the logic that is
+# Linux-only. This is not applied to Android, but is applied to ChromeOS.
+config("compiler") {
+  defines = [
+    "QNX",
+    "__STDC_CONSTANT_MACROS",
+    "__STDC_FORMAT_MACROS",
+    "__STDC_LIMIT_MACROS",
+    "_QNX_SOURCE",
+  ]
+
+  # libs = [
+  #   "c",
+  #   "m",
+  # ]
+
+  cflags = [ "" ]
+  cflags_cc = [ "-Wno-reorder" ]
+  ldflags = [
+    "-Wl,--no-as-needed",
+  ]
+
+  if (!is_component_build) {
+    ldflags += [ "-Wl,--as-needed" ]
+  }
+
+  if (!is_debug) {
+    ldflags += [
+      "-Wl,-zlazy"
+    ]
+  }
+}
diff --git a/build/config/qnx/config.gni b/build/config/qnx/config.gni
new file mode 100644
index 0000000000000..b3e91b11e40f4
--- /dev/null
+++ b/build/config/qnx/config.gni
@@ -0,0 +1,2 @@
+if (is_qnx) {
+}
\ No newline at end of file
diff --git a/build/qnx/setenv_arm_64.sh b/build/qnx/setenv_arm_64.sh
new file mode 100644
index 0000000000000..8d3ce4e81f034
--- /dev/null
+++ b/build/qnx/setenv_arm_64.sh
@@ -0,0 +1,92 @@
+#!/bin/bash
+
+# Platform QNX SDP compile configuration
+export CXX=$QNX_HOST/usr/bin/ntoaarch64-g++
+export CXXCPP=$QNX_HOST/usr/bin/ntoaarch64-cpp
+export CC=$QNX_HOST/usr/bin/ntoaarch64-gcc
+export QNX_TARGET_ARCH_DIR=aarch64le
+export QNX_TOOLCHAIN_ARCH=ntoaarch64
+export NINJA_STATUS="[%r %f/%t] "
+
+################################################################################################################
+# Environment Configuration for MACOSX
+################################################################################################################
+function configure_macosx() {
+  if [[ "$SHELL" == "/bin/bash" ]]; then
+    # bash shell
+    us=${BASH_SOURCE[0]}
+    us=`realpath ${us%/*}`
+
+    # autocomplete
+    if [ -f $(brew --prefix)/etc/bash_completion ]; then
+      . $(brew --prefix)/etc/bash_completion
+    fi
+
+    # git branch info on terminal
+    parse_git_branch() {
+      git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
+    }
+    export PS1="\[\033[00m\]\u@\[\033[01;32m\] \w \[\033[31m\]\$(parse_git_branch)\[\033[00m\]$\[\033[00m\] "
+
+    # get gcc version
+    if [ "${cxx_version:0:1}" == "8" ]; then
+      export QNX_GCC8=true
+    fi
+  else
+    # zsh shell (MacOSX Catalina or greater)
+    us=$(dirname "${(%):-%x}")
+    us=$(cd "${us}"; pwd)
+
+    # get gcc version
+    if [[ "${cxx_version:0:1}" == "8" ]]; then
+      export QNX_GCC8=true
+    fi
+  fi
+
+  # macosx sdk
+  if [ -z "$MAC_SDK_PATH" ]; then
+    echo "MAC_SDK_PATH not set. Using system's MAC SDK for BlinQ compile."
+  fi
+
+  # depot tools
+  export PATH=$PATH:$us/../../../depot_tools
+}
+
+################################################################################################################
+# Environment Configuration for UBUNTU
+################################################################################################################
+function configure_ubuntu() {
+  us=${BASH_SOURCE[0]}
+  us=`realpath ${us%/*}`
+
+  if [ "${cxx_version:0:1}" == "8" ]; then
+    export QNX_GCC8=true
+  fi
+}
+
+
+################################################################################################################
+# Main environment configuration script
+################################################################################################################
+export CXX_host=$us/../../third_party/llvm-build/Release+Asserts/bin/clang++
+export CC_host=$us/../../third_party/llvm-build/Release+Asserts/bin/clang
+cxx_version="`$CXX -dumpversion`"
+
+host_os=$(uname)
+if [[ "$host_os" == "Darwin" ]]; then
+  #### MACOSX
+  configure_macosx
+else
+  #### Ubuntu
+  configure_ubuntu
+fi
+
+# QNX SDP version
+version_file="$QNX_TARGET/usr/include/sys/neutrino.h"
+if [ -f "$version_file" ]; then
+  version=`command grep -m 1  "^#define _NTO_VERSION" $version_file  | command grep -o -E  '[0-9]+' | head -1 | sed -e 's/^0\+//'`
+fi
+export QNX_VERSION=$version
+export QNX_MAJOR_VERSION=${version:0:1}
+export QNX_MINOR_VERSION=${version:1:1}
+export QNX_REVISION_VERSION=${version:2:1}
diff --git a/build/qnx/setenv_x86_64.sh b/build/qnx/setenv_x86_64.sh
new file mode 100644
index 0000000000000..478c520767ad0
--- /dev/null
+++ b/build/qnx/setenv_x86_64.sh
@@ -0,0 +1,92 @@
+#!/bin/bash
+
+# Platform QNX SDP compile configuration
+export CXX=$QNX_HOST/usr/bin/ntox86_64-g++
+export CXXCPP=$QNX_HOST/usr/bin/ntox86_64-cpp
+export CC=$QNX_HOST/usr/bin/ntox86_64-gcc
+export QNX_TARGET_ARCH_DIR=x86_64
+export QNX_TOOLCHAIN_ARCH=ntox86_64
+export NINJA_STATUS="[%r %f/%t] "
+
+################################################################################################################
+# Environment Configuration for MACOSX
+################################################################################################################
+function configure_macosx() {
+  if [[ "$SHELL" == "/bin/bash" ]]; then
+    # bash shell
+    us=${BASH_SOURCE[0]}
+    us=`realpath ${us%/*}`
+
+    # autocomplete
+    if [ -f $(brew --prefix)/etc/bash_completion ]; then
+      . $(brew --prefix)/etc/bash_completion
+    fi
+
+    # git branch info on terminal
+    parse_git_branch() {
+      git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
+    }
+    export PS1="\[\033[00m\]\u@\[\033[01;32m\] \w \[\033[31m\]\$(parse_git_branch)\[\033[00m\]$\[\033[00m\] "
+
+    # get gcc version
+    if [ "${cxx_version:0:1}" == "8" ]; then
+      export QNX_GCC8=true
+    fi
+  else
+    # zsh shell (MacOSX Catalina or greater)
+    us=$(dirname "${(%):-%x}")
+    us=$(cd "${us}"; pwd)
+
+    # get gcc version
+    if [[ "${cxx_version:0:1}" == "8" ]]; then
+      export QNX_GCC8=true
+    fi
+  fi
+
+  # macosx sdk
+  if [ -z "$MAC_SDK_PATH" ]; then
+    echo "MAC_SDK_PATH not set. Using system's MAC SDK for BlinQ compile."
+  fi
+
+  # depot tools
+  export PATH=$PATH:$us/../../../depot_tools
+}
+
+################################################################################################################
+# Environment Configuration for UBUNTU
+################################################################################################################
+function configure_ubuntu() {
+  us=${BASH_SOURCE[0]}
+  us=`realpath ${us%/*}`
+
+  if [ "${cxx_version:0:1}" == "8" ]; then
+    export QNX_GCC8=true
+  fi
+}
+
+
+################################################################################################################
+# Main environment configuration script
+################################################################################################################
+export CXX_host=$us/../../third_party/llvm-build/Release+Asserts/bin/clang++
+export CC_host=$us/../../third_party/llvm-build/Release+Asserts/bin/clang
+cxx_version="`$CXX -dumpversion`"
+
+host_os=$(uname)
+if [[ "$host_os" == "Darwin" ]]; then
+  #### MACOSX
+  configure_macosx
+else
+  #### Ubuntu
+  configure_ubuntu
+fi
+
+# QNX SDP version
+version_file="$QNX_TARGET/usr/include/sys/neutrino.h"
+if [ -f "$version_file" ]; then
+  version=`command grep -m 1  "^#define _NTO_VERSION" $version_file  | command grep -o -E  '[0-9]+' | head -1 | sed -e 's/^0\+//'`
+fi
+export QNX_VERSION=$version
+export QNX_MAJOR_VERSION=${version:0:1}
+export QNX_MINOR_VERSION=${version:1:1}
+export QNX_REVISION_VERSION=${version:2:1}
diff --git a/build/toolchain/qnx/BUILD.gn b/build/toolchain/qnx/BUILD.gn
new file mode 100644
index 0000000000000..aebb672370716
--- /dev/null
+++ b/build/toolchain/qnx/BUILD.gn
@@ -0,0 +1,70 @@
+# Copyright 2013 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//build/config/sysroot.gni")
+import("//build/toolchain/gcc_toolchain.gni")
+
+gcc_toolchain("x86") {
+  cc = "ntox86-gcc"
+  cxx = "ntox86-g++"
+
+  readelf = "ntox86-readelf"
+  nm = "ntox86-nm"
+  ar = "ntox86-ar"
+  ld = cxx
+
+  toolchain_args = {
+    current_cpu = "x86"
+    current_os = "qnx"
+    is_clang = false
+  }
+}
+
+gcc_toolchain("x64") {
+  cc = "ntox86_64-gcc"
+  cxx = "ntox86_64-g++"
+
+  readelf = "ntox86_64-readelf"
+  nm = "ntox86_64-nm"
+  ar = "ntox86_64-ar"
+  ld = cxx
+
+  toolchain_args = {
+    current_cpu = "x64"
+    current_os = "qnx"
+    is_clang = false
+  }
+}
+
+gcc_toolchain("arm") {
+  cc = "ntoarmv7-gcc"
+  cxx = "ntoarmv7-g++"
+
+  readelf = "ntoarmv7-readelf"
+  nm = "ntoarmv7-nm"
+  ar = "ntoarmv7-ar"
+  ld = cxx
+
+  toolchain_args = {
+    current_cpu = "arm"
+    current_os = "qnx"
+    is_clang = false
+  }
+}
+
+gcc_toolchain("arm64") {
+  cc = "ntoaarch64-gcc"
+  cxx = "ntoaarch64-g++"
+
+  readelf = "ntoaarch64-readelf"
+  nm = "ntoaarch64-nm"
+  ar = "ntoaarch64-ar"
+  ld = cxx
+
+  toolchain_args = {
+    current_cpu = "arm64"
+    current_os = "qnx"
+    is_clang = false
+  }
+}
-- 
2.34.1

