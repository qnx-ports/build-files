From 6099e3b681d7c064178e7b7aee74253ddc62d348 Mon Sep 17 00:00:00 2001
From: Yongxin Dai <yodai@blackberry.com>
Date: Wed, 12 Feb 2025 10:42:27 -0500
Subject: =?UTF-8?q?[QNX=20LOCAL=20PATCH]=20fix=20specialization=20in=20non?=
 =?UTF-8?q?-namespace=20scope=0Acompiled=20tests=20for=20SDP8?=

---
 .../rtc_event_log_unittest_helper.cc          | 14 +++++++
 .../rtc_event_log_unittest_helper.h           | 38 ++++++++++---------
 2 files changed, 35 insertions(+), 17 deletions(-)

diff --git a/logging/rtc_event_log/rtc_event_log_unittest_helper.cc b/logging/rtc_event_log/rtc_event_log_unittest_helper.cc
index 06baf5deae..d33c2adfe0 100644
--- a/logging/rtc_event_log/rtc_event_log_unittest_helper.cc
+++ b/logging/rtc_event_log/rtc_event_log_unittest_helper.cc
@@ -98,6 +98,20 @@ namespace webrtc {
 
 namespace test {
 
+namespace compatible {
+  template <>
+  void VerifyLoggedRtpPacket(EventVerifier& ev, const webrtc::RtcEventRtpPacketIncoming& original_event,
+                             const webrtc::LoggedRtpPacketIncoming& logged_event) {
+    ev.VerifyLoggedRtpPacketIncoming(original_event, logged_event);
+  }
+
+  template <>
+  void VerifyLoggedRtpPacket(EventVerifier& ev, const webrtc::RtcEventRtpPacketOutgoing& original_event,
+                             const webrtc::LoggedRtpPacketOutgoing& logged_event) {
+    ev.VerifyLoggedRtpPacketOutgoing(original_event, logged_event);
+  }
+}
+
 namespace {
 
 using ::testing::ElementsAreArray;
diff --git a/logging/rtc_event_log/rtc_event_log_unittest_helper.h b/logging/rtc_event_log/rtc_event_log_unittest_helper.h
index 0bcffdb489..e15e976cc8 100644
--- a/logging/rtc_event_log/rtc_event_log_unittest_helper.h
+++ b/logging/rtc_event_log/rtc_event_log_unittest_helper.h
@@ -67,6 +67,24 @@
 namespace webrtc {
 
 namespace test {
+class EventVerifier;
+namespace compatible {
+  template <typename EventType, typename ParsedType>
+  void VerifyLoggedRtpPacket(EventVerifier& ev, const EventType& /* original_event */,
+                             const ParsedType& /* logged_event */) {
+    static_assert(sizeof(ParsedType) == 0,
+                  "You have to use one of the two defined template "
+                  "specializations of VerifyLoggedRtpPacket");
+  }
+
+  template <>
+  void VerifyLoggedRtpPacket(EventVerifier& ev, const webrtc::RtcEventRtpPacketIncoming& original_event,
+                             const webrtc::LoggedRtpPacketIncoming& logged_event);
+
+  template <>
+  void VerifyLoggedRtpPacket(EventVerifier& ev, const webrtc::RtcEventRtpPacketOutgoing& original_event,
+                             const webrtc::LoggedRtpPacketOutgoing& logged_event);
+}
 
 class EventGenerator {
  public:
@@ -248,23 +266,9 @@ class EventVerifier {
       const LoggedGenericAckReceived& logged_event) const;
 
   template <typename EventType, typename ParsedType>
-  void VerifyLoggedRtpPacket(const EventType& /* original_event */,
-                             const ParsedType& /* logged_event */) {
-    static_assert(sizeof(ParsedType) == 0,
-                  "You have to use one of the two defined template "
-                  "specializations of VerifyLoggedRtpPacket");
-  }
-
-  template <>
-  void VerifyLoggedRtpPacket(const RtcEventRtpPacketIncoming& original_event,
-                             const LoggedRtpPacketIncoming& logged_event) {
-    VerifyLoggedRtpPacketIncoming(original_event, logged_event);
-  }
-
-  template <>
-  void VerifyLoggedRtpPacket(const RtcEventRtpPacketOutgoing& original_event,
-                             const LoggedRtpPacketOutgoing& logged_event) {
-    VerifyLoggedRtpPacketOutgoing(original_event, logged_event);
+  void VerifyLoggedRtpPacket(const EventType& original_event,
+                             const ParsedType& logged_event) {
+    compatible::VerifyLoggedRtpPacket(*this, original_event, logged_event);
   }
 
   void VerifyLoggedRtcpPacketIncoming(
-- 
2.34.1

