From 4c971af6b3124e9467aa075457136568380aec10 Mon Sep 17 00:00:00 2001
From: Yongxin Dai <yodai@blackberry.com>
Date: Tue, 1 Nov 2022 08:54:12 -0400
Subject: [PATCH] changes for QNX

---
 config/BUILD.gn              | 11 +++++
 config/BUILDCONFIG.gn        | 11 +++--
 config/compiler/BUILD.gn     | 19 +++++---
 config/compiler/compiler.gni |  4 ++
 config/nacl/BUILD.gn         |  2 +-
 config/qnx/BUILD.gn          | 45 ++++++++++++++++++
 config/qnx/config.gni        |  2 +
 qnx/setenv_arm_64.sh         | 92 ++++++++++++++++++++++++++++++++++++
 qnx/setenv_x86_64.sh         | 92 ++++++++++++++++++++++++++++++++++++
 toolchain/qnx/BUILD.gn       | 70 +++++++++++++++++++++++++++
 10 files changed, 336 insertions(+), 12 deletions(-)
 create mode 100644 config/qnx/BUILD.gn
 create mode 100644 config/qnx/config.gni
 create mode 100644 qnx/setenv_arm_64.sh
 create mode 100644 qnx/setenv_x86_64.sh
 create mode 100644 toolchain/qnx/BUILD.gn

diff --git a/config/BUILD.gn b/config/BUILD.gn
index 40b4f7907..8d6b8dcc6 100644
--- a/config/BUILD.gn
+++ b/config/BUILD.gn
@@ -219,6 +219,13 @@ config("default_libs") {
       "pthread",
       "rt",
     ]
+  } else if (is_qnx) {
+    # Targets should choose to explicitly link frameworks they require. Since
+    # linking can have run-time side effects, nothing should be listed here.
+    libs = [
+      "c",
+      "m",
+    ]
   }
 }
 
@@ -340,6 +347,8 @@ config("executable_config") {
     if (is_castos || is_cast_android) {
       configs += [ "//build/config/chromecast:executable_config" ]
     }
+  } else if (is_qnx) {
+    configs += [ "//build/config/gcc:executable_config" ]
   }
 
   # If we're using the prebuilt instrumented libraries with the sanitizers, we
@@ -371,6 +380,8 @@ config("shared_library_config") {
     configs += [ "//build/config/chromecast:shared_library_config" ]
   } else if (is_linux || is_chromeos || current_os == "aix") {
     configs += [ "//build/config/gcc:shared_library_config" ]
+  } else if (is_qnx) {
+    configs += [ "//build/config/gcc:shared_library_config" ]
   }
 
   # If we're using the prebuilt instrumented libraries with the sanitizers, we
diff --git a/config/BUILDCONFIG.gn b/config/BUILDCONFIG.gn
index c9a3ce414..401db7a8c 100644
--- a/config/BUILDCONFIG.gn
+++ b/config/BUILDCONFIG.gn
@@ -57,6 +57,8 @@ if (target_cpu == "") {
     # This allows us to not have to specify both target_os and target_cpu
     # on the command line.
     target_cpu = "arm"
+  } else if (target_os == "qnx") {
+    target_cpu = "arm64"
   } else {
     target_cpu = host_cpu
   }
@@ -136,11 +138,11 @@ declare_args() {
   is_official_build = false
 
   # Set to true when compiling with the Clang compiler.
-  is_clang = current_os != "linux" ||
+  is_clang = (current_os != "linux" ||
              (current_cpu != "s390x" && current_cpu != "s390" &&
               current_cpu != "ppc64" && current_cpu != "ppc" &&
               current_cpu != "mips" && current_cpu != "mips64" &&
-              current_cpu != "riscv64")
+              current_cpu != "riscv64")) && current_os != "qnx"
 
   # Allows the path to a custom target toolchain to be injected as a single
   # argument, and set as the default toolchain.
@@ -272,8 +274,8 @@ if (target_os == "android") {
   _default_toolchain = "//build/toolchain/win:uwp_$target_cpu"
 } else if (target_os == "aix") {
   _default_toolchain = "//build/toolchain/aix:$target_cpu"
-} else if (target_os == "zos") {
-  _default_toolchain = "//build/toolchain/zos:$target_cpu"
+} else if (target_os == "qnx") {
+  _default_toolchain = "//build/toolchain/qnx:$target_cpu"
 } else {
   assert(false, "Unsupported target_os: $target_os")
 }
@@ -311,6 +313,7 @@ is_ios = current_os == "ios"
 is_linux = current_os == "linux"
 is_mac = current_os == "mac"
 is_nacl = current_os == "nacl"
+is_qnx = current_os == "qnx"
 is_win = current_os == "win" || current_os == "winuwp"
 
 is_apple = is_ios || is_mac
diff --git a/config/compiler/BUILD.gn b/config/compiler/BUILD.gn
index f1627512b..af697295d 100644
--- a/config/compiler/BUILD.gn
+++ b/config/compiler/BUILD.gn
@@ -125,7 +125,7 @@ declare_args() {
   # the space overhead is too great. We should use some mixture of profiles and
   # optimization settings to better tune the size increase.
   thin_lto_enable_optimizations =
-      (is_chromeos || is_android || is_win || is_linux || is_mac ||
+      (is_chromeos || is_android || is_win || is_linux || is_mac || is_qnx ||
        (is_ios && use_lld)) && is_official_build
 
   # Whether to enable thin lto incremental builds.
@@ -304,8 +304,8 @@ config("compiler") {
     configs += [ "//build/config/fuchsia:compiler" ]
   } else if (current_os == "aix") {
     configs += [ "//build/config/aix:compiler" ]
-  } else if (current_os == "zos") {
-    configs += [ "//build/config/zos:compiler" ]
+  } else if (is_qnx) {
+    configs += [ "//build/config/qnx:compiler" ]
   }
 
   configs += [
@@ -385,7 +385,7 @@ config("compiler") {
 
     # Linker warnings.
     if (fatal_linker_warnings && !is_apple && current_os != "aix" &&
-        current_os != "zos") {
+        current_os != "zos" && current_os != "qnx") {
       ldflags += [ "-Wl,--fatal-warnings" ]
     }
     if (fatal_linker_warnings && is_apple) {
@@ -486,7 +486,7 @@ config("compiler") {
 
   # Linux/Android/Fuchsia common flags setup.
   # ---------------------------------
-  if (is_linux || is_chromeos || is_android || is_fuchsia) {
+  if (is_linux || is_chromeos || is_android || is_fuchsia || is_qnx) {
     asmflags += [ "-fPIC" ]
     cflags += [ "-fPIC" ]
     ldflags += [ "-fPIC" ]
@@ -679,6 +679,8 @@ config("compiler") {
 
     if (defined(use_cxx17) && use_cxx17) {
       cflags_cc += [ "-std=c++17" ]
+    } else if (is_qnx) {
+      cflags_cc += [ "-std=c++2a" ]
     } else {
       cflags_cc += [ "-std=c++20" ]
     }
@@ -1235,7 +1237,7 @@ config("compiler_cpu_abi") {
         cflags += [ "-mtune=$arm_tune" ]
       }
     } else if (current_cpu == "arm64") {
-      if (is_clang && !is_android && !is_nacl && !is_fuchsia &&
+      if (is_clang && !is_android && !is_nacl && !is_fuchsia && !is_qnx &&
           !(is_chromeos_lacros && is_chromeos_device)) {
         cflags += [ "--target=aarch64-linux-gnu" ]
         ldflags += [ "--target=aarch64-linux-gnu" ]
@@ -2128,7 +2130,7 @@ config("chromium_code") {
     ]
 
     # Thread safety analysis is broken under nacl: https://crbug.com/982423.
-    if (!is_nacl || is_nacl_saigo) {
+    if ((!is_nacl || is_nacl_saigo) && !is_qnx) {
       cflags += [
         # Thread safety analysis. See base/thread_annotations.h and
         # https://clang.llvm.org/docs/ThreadSafetyAnalysis.html
@@ -2574,6 +2576,8 @@ config("no_optimize") {
     # On Fuchsia, we optimize for size here to reduce the size of debug build
     # packages so they can be run in a KVM. See crbug.com/910243 for details.
     cflags = [ "-Og" ]
+  } else if (is_qnx) {
+    cflags = [ "-Os" ]
   } else {
     cflags = [ "-O0" ]
     ldflags = []
@@ -2967,6 +2971,7 @@ config("minimal_symbols") {
       # former.
       cflags += [ "-gline-tables-only" ]
     }
+
   } else {
     cflags = []
     if (is_mac && !use_dwarf5) {
diff --git a/config/compiler/compiler.gni b/config/compiler/compiler.gni
index 7bb39b929..6cd69e316 100644
--- a/config/compiler/compiler.gni
+++ b/config/compiler/compiler.gni
@@ -29,6 +29,10 @@ if (is_ios) {
   import("//build/config/ios/config.gni")
 }
 
+if (is_qnx) {
+  import("//build/config/qnx/config.gni")
+}
+
 declare_args() {
   # Set to true to use lld, the LLVM linker.
   # In late bring-up on macOS (see docs/mac_lld.md).
diff --git a/config/nacl/BUILD.gn b/config/nacl/BUILD.gn
index d60994291..6034085c6 100644
--- a/config/nacl/BUILD.gn
+++ b/config/nacl/BUILD.gn
@@ -6,7 +6,7 @@ import("//build/config/nacl/config.gni")
 
 # Native Client Definitions
 config("nacl_defines") {
-  if (is_linux || is_chromeos || is_android || is_nacl) {
+  if (is_linux || is_chromeos || is_android || is_nacl || is_qnx) {
     defines = [
       "_POSIX_C_SOURCE=199506",
       "_XOPEN_SOURCE=600",
diff --git a/config/qnx/BUILD.gn b/config/qnx/BUILD.gn
new file mode 100644
index 000000000..4539246d4
--- /dev/null
+++ b/config/qnx/BUILD.gn
@@ -0,0 +1,45 @@
+# Copyright (c) 2013 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//build/config/qnx/config.gni")
+import("//build/config/c++/c++.gni")
+import("//build/config/compiler/compiler.gni")
+
+group("qnx") {
+  visibility = [ "//:optimize_gn_gen" ]
+}
+
+# This is included by reference in the //build/config/compiler config that
+# is applied to all targets. It is here to separate out the logic that is
+# Linux-only. This is not applied to Android, but is applied to ChromeOS.
+config("compiler") {
+  defines = [
+    "QNX",
+    "__STDC_CONSTANT_MACROS",
+    "__STDC_FORMAT_MACROS",
+    "__STDC_LIMIT_MACROS",
+    "_QNX_SOURCE",
+  ]
+
+  # libs = [
+  #   "c",
+  #   "m",
+  # ]
+
+  cflags = [ "" ]
+  cflags_cc = [ "-Wno-reorder" ]
+  ldflags = [
+    "-Wl,--no-as-needed",
+  ]
+
+  if (!is_component_build) {
+    ldflags += [ "-Wl,--as-needed" ]
+  }
+
+  if (!is_debug) {
+    ldflags += [
+      "-Wl,-zlazy"
+    ]
+  }
+}
diff --git a/config/qnx/config.gni b/config/qnx/config.gni
new file mode 100644
index 000000000..b3e91b11e
--- /dev/null
+++ b/config/qnx/config.gni
@@ -0,0 +1,2 @@
+if (is_qnx) {
+}
\ No newline at end of file
diff --git a/qnx/setenv_arm_64.sh b/qnx/setenv_arm_64.sh
new file mode 100644
index 000000000..8d3ce4e81
--- /dev/null
+++ b/qnx/setenv_arm_64.sh
@@ -0,0 +1,92 @@
+#!/bin/bash
+
+# Platform QNX SDP compile configuration
+export CXX=$QNX_HOST/usr/bin/ntoaarch64-g++
+export CXXCPP=$QNX_HOST/usr/bin/ntoaarch64-cpp
+export CC=$QNX_HOST/usr/bin/ntoaarch64-gcc
+export QNX_TARGET_ARCH_DIR=aarch64le
+export QNX_TOOLCHAIN_ARCH=ntoaarch64
+export NINJA_STATUS="[%r %f/%t] "
+
+################################################################################################################
+# Environment Configuration for MACOSX
+################################################################################################################
+function configure_macosx() {
+  if [[ "$SHELL" == "/bin/bash" ]]; then
+    # bash shell
+    us=${BASH_SOURCE[0]}
+    us=`realpath ${us%/*}`
+
+    # autocomplete
+    if [ -f $(brew --prefix)/etc/bash_completion ]; then
+      . $(brew --prefix)/etc/bash_completion
+    fi
+
+    # git branch info on terminal
+    parse_git_branch() {
+      git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
+    }
+    export PS1="\[\033[00m\]\u@\[\033[01;32m\] \w \[\033[31m\]\$(parse_git_branch)\[\033[00m\]$\[\033[00m\] "
+
+    # get gcc version
+    if [ "${cxx_version:0:1}" == "8" ]; then
+      export QNX_GCC8=true
+    fi
+  else
+    # zsh shell (MacOSX Catalina or greater)
+    us=$(dirname "${(%):-%x}")
+    us=$(cd "${us}"; pwd)
+
+    # get gcc version
+    if [[ "${cxx_version:0:1}" == "8" ]]; then
+      export QNX_GCC8=true
+    fi
+  fi
+
+  # macosx sdk
+  if [ -z "$MAC_SDK_PATH" ]; then
+    echo "MAC_SDK_PATH not set. Using system's MAC SDK for BlinQ compile."
+  fi
+
+  # depot tools
+  export PATH=$PATH:$us/../../../depot_tools
+}
+
+################################################################################################################
+# Environment Configuration for UBUNTU
+################################################################################################################
+function configure_ubuntu() {
+  us=${BASH_SOURCE[0]}
+  us=`realpath ${us%/*}`
+
+  if [ "${cxx_version:0:1}" == "8" ]; then
+    export QNX_GCC8=true
+  fi
+}
+
+
+################################################################################################################
+# Main environment configuration script
+################################################################################################################
+export CXX_host=$us/../../third_party/llvm-build/Release+Asserts/bin/clang++
+export CC_host=$us/../../third_party/llvm-build/Release+Asserts/bin/clang
+cxx_version="`$CXX -dumpversion`"
+
+host_os=$(uname)
+if [[ "$host_os" == "Darwin" ]]; then
+  #### MACOSX
+  configure_macosx
+else
+  #### Ubuntu
+  configure_ubuntu
+fi
+
+# QNX SDP version
+version_file="$QNX_TARGET/usr/include/sys/neutrino.h"
+if [ -f "$version_file" ]; then
+  version=`command grep -m 1  "^#define _NTO_VERSION" $version_file  | command grep -o -E  '[0-9]+' | head -1 | sed -e 's/^0\+//'`
+fi
+export QNX_VERSION=$version
+export QNX_MAJOR_VERSION=${version:0:1}
+export QNX_MINOR_VERSION=${version:1:1}
+export QNX_REVISION_VERSION=${version:2:1}
diff --git a/qnx/setenv_x86_64.sh b/qnx/setenv_x86_64.sh
new file mode 100644
index 000000000..478c52076
--- /dev/null
+++ b/qnx/setenv_x86_64.sh
@@ -0,0 +1,92 @@
+#!/bin/bash
+
+# Platform QNX SDP compile configuration
+export CXX=$QNX_HOST/usr/bin/ntox86_64-g++
+export CXXCPP=$QNX_HOST/usr/bin/ntox86_64-cpp
+export CC=$QNX_HOST/usr/bin/ntox86_64-gcc
+export QNX_TARGET_ARCH_DIR=x86_64
+export QNX_TOOLCHAIN_ARCH=ntox86_64
+export NINJA_STATUS="[%r %f/%t] "
+
+################################################################################################################
+# Environment Configuration for MACOSX
+################################################################################################################
+function configure_macosx() {
+  if [[ "$SHELL" == "/bin/bash" ]]; then
+    # bash shell
+    us=${BASH_SOURCE[0]}
+    us=`realpath ${us%/*}`
+
+    # autocomplete
+    if [ -f $(brew --prefix)/etc/bash_completion ]; then
+      . $(brew --prefix)/etc/bash_completion
+    fi
+
+    # git branch info on terminal
+    parse_git_branch() {
+      git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
+    }
+    export PS1="\[\033[00m\]\u@\[\033[01;32m\] \w \[\033[31m\]\$(parse_git_branch)\[\033[00m\]$\[\033[00m\] "
+
+    # get gcc version
+    if [ "${cxx_version:0:1}" == "8" ]; then
+      export QNX_GCC8=true
+    fi
+  else
+    # zsh shell (MacOSX Catalina or greater)
+    us=$(dirname "${(%):-%x}")
+    us=$(cd "${us}"; pwd)
+
+    # get gcc version
+    if [[ "${cxx_version:0:1}" == "8" ]]; then
+      export QNX_GCC8=true
+    fi
+  fi
+
+  # macosx sdk
+  if [ -z "$MAC_SDK_PATH" ]; then
+    echo "MAC_SDK_PATH not set. Using system's MAC SDK for BlinQ compile."
+  fi
+
+  # depot tools
+  export PATH=$PATH:$us/../../../depot_tools
+}
+
+################################################################################################################
+# Environment Configuration for UBUNTU
+################################################################################################################
+function configure_ubuntu() {
+  us=${BASH_SOURCE[0]}
+  us=`realpath ${us%/*}`
+
+  if [ "${cxx_version:0:1}" == "8" ]; then
+    export QNX_GCC8=true
+  fi
+}
+
+
+################################################################################################################
+# Main environment configuration script
+################################################################################################################
+export CXX_host=$us/../../third_party/llvm-build/Release+Asserts/bin/clang++
+export CC_host=$us/../../third_party/llvm-build/Release+Asserts/bin/clang
+cxx_version="`$CXX -dumpversion`"
+
+host_os=$(uname)
+if [[ "$host_os" == "Darwin" ]]; then
+  #### MACOSX
+  configure_macosx
+else
+  #### Ubuntu
+  configure_ubuntu
+fi
+
+# QNX SDP version
+version_file="$QNX_TARGET/usr/include/sys/neutrino.h"
+if [ -f "$version_file" ]; then
+  version=`command grep -m 1  "^#define _NTO_VERSION" $version_file  | command grep -o -E  '[0-9]+' | head -1 | sed -e 's/^0\+//'`
+fi
+export QNX_VERSION=$version
+export QNX_MAJOR_VERSION=${version:0:1}
+export QNX_MINOR_VERSION=${version:1:1}
+export QNX_REVISION_VERSION=${version:2:1}
diff --git a/toolchain/qnx/BUILD.gn b/toolchain/qnx/BUILD.gn
new file mode 100644
index 000000000..aebb67237
--- /dev/null
+++ b/toolchain/qnx/BUILD.gn
@@ -0,0 +1,70 @@
+# Copyright 2013 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//build/config/sysroot.gni")
+import("//build/toolchain/gcc_toolchain.gni")
+
+gcc_toolchain("x86") {
+  cc = "ntox86-gcc"
+  cxx = "ntox86-g++"
+
+  readelf = "ntox86-readelf"
+  nm = "ntox86-nm"
+  ar = "ntox86-ar"
+  ld = cxx
+
+  toolchain_args = {
+    current_cpu = "x86"
+    current_os = "qnx"
+    is_clang = false
+  }
+}
+
+gcc_toolchain("x64") {
+  cc = "ntox86_64-gcc"
+  cxx = "ntox86_64-g++"
+
+  readelf = "ntox86_64-readelf"
+  nm = "ntox86_64-nm"
+  ar = "ntox86_64-ar"
+  ld = cxx
+
+  toolchain_args = {
+    current_cpu = "x64"
+    current_os = "qnx"
+    is_clang = false
+  }
+}
+
+gcc_toolchain("arm") {
+  cc = "ntoarmv7-gcc"
+  cxx = "ntoarmv7-g++"
+
+  readelf = "ntoarmv7-readelf"
+  nm = "ntoarmv7-nm"
+  ar = "ntoarmv7-ar"
+  ld = cxx
+
+  toolchain_args = {
+    current_cpu = "arm"
+    current_os = "qnx"
+    is_clang = false
+  }
+}
+
+gcc_toolchain("arm64") {
+  cc = "ntoaarch64-gcc"
+  cxx = "ntoaarch64-g++"
+
+  readelf = "ntoaarch64-readelf"
+  nm = "ntoaarch64-nm"
+  ar = "ntoaarch64-ar"
+  ld = cxx
+
+  toolchain_args = {
+    current_cpu = "arm64"
+    current_os = "qnx"
+    is_clang = false
+  }
+}
-- 
2.34.1

