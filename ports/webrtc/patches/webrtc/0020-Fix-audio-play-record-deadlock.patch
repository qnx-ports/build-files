From b9af651fafbb37486dab0f153588fc0b4c1087a9 Mon Sep 17 00:00:00 2001
From: Yongxin Dai <yodai@qnx.com>
Date: Fri, 23 May 2025 14:43:59 -0400
Subject: [PATCH] Fix audio play/record deadlock

---
 .../qnx/audio_device_alsa_snd_qnx.cc          | 98 ++++++++++++-------
 .../qnx/audio_device_alsa_snd_qnx.h           |  4 +-
 2 files changed, 63 insertions(+), 39 deletions(-)

diff --git a/modules/audio_device/qnx/audio_device_alsa_snd_qnx.cc b/modules/audio_device/qnx/audio_device_alsa_snd_qnx.cc
index e07afd534e..6463fc471c 100644
--- a/modules/audio_device/qnx/audio_device_alsa_snd_qnx.cc
+++ b/modules/audio_device/qnx/audio_device_alsa_snd_qnx.cc
@@ -12,6 +12,7 @@
 
 #include <fstream>
 #include <iostream>
+#include <sched.h>
 
 #include "modules/audio_device/audio_device_config.h"
 #include "rtc_base/logging.h"
@@ -362,21 +363,22 @@ int32_t AudioDeviceQnxALSA::Terminate() {
     return 0;
   }
 
-  MutexLock lock(&mutex_);
+  Lock();
 
   _mixerManager.Close();
 
   // RECORDING
-  mutex_.Unlock();
+  UnLock();
   _ptrThreadRec.Finalize();
 
   // PLAYOUT
   _ptrThreadPlay.Finalize();
-  mutex_.Lock();
+  Lock();
 
   _initialized = false;
   _outputDeviceIsSpecified = false;
   _inputDeviceIsSpecified = false;
+  UnLock();
 
   return 0;
 }
@@ -391,7 +393,7 @@ int32_t AudioDeviceQnxALSA::InitSpeaker() {
 }
 
 int32_t AudioDeviceQnxALSA::InitSpeakerLocked() {
-  if (_playing) {
+  if (_playing.load(std::memory_order_relaxed)) {
     return -1;
   }
 
@@ -406,7 +408,7 @@ int32_t AudioDeviceQnxALSA::InitMicrophone() {
 }
 
 int32_t AudioDeviceQnxALSA::InitMicrophoneLocked() {
-  if (_recording) {
+  if (_recording.load(std::memory_order_relaxed)) {
     return -1;
   }
 
@@ -590,7 +592,7 @@ int32_t AudioDeviceQnxALSA::StereoRecordingIsAvailable(bool& available) {
 
   // Save rec states and the number of rec channels
   bool recIsInitialized = _recIsInitialized;
-  bool recording = _recording;
+  bool recording = _recording.load(std::memory_order_relaxed);
   int recChannels = _recChannels;
 
   available = false;
@@ -649,7 +651,7 @@ int32_t AudioDeviceQnxALSA::StereoPlayoutIsAvailable(bool& available) {
 
   // Save rec states and the number of rec channels
   bool playIsInitialized = _playIsInitialized;
-  bool playing = _playing;
+  bool playing = _playing.load(std::memory_order_relaxed);
   int playChannels = _playChannels;
 
   available = false;
@@ -924,7 +926,7 @@ int32_t AudioDeviceQnxALSA::InitPlayout() {
 int32_t AudioDeviceQnxALSA::InitPlayoutLocked() {
   int errVal = 0;
 
-  if (_playing) {
+  if (_playing.load(std::memory_order_relaxed)) {
     return -1;
   }
 
@@ -1027,7 +1029,7 @@ int32_t AudioDeviceQnxALSA::InitRecording() {
 int32_t AudioDeviceQnxALSA::InitRecordingLocked() {
   int errVal = 0;
 
-  if (_recording) {
+  if (_recording.load(std::memory_order_relaxed)) {
     return -1;
   }
 
@@ -1129,12 +1131,14 @@ int32_t AudioDeviceQnxALSA::StartRecording() {
     return -1;
   }
 
-  if (_recording) {
+  bool expected = false;
+  auto success = _recording.compare_exchange_weak(
+      expected, true, std::memory_order_release, std::memory_order_relaxed);
+  if (!success) {
+    RTC_LOG(LS_WARNING) << "audio capture is already in the recording state";
     return 0;
   }
 
-  _recording = true;
-
   int errVal = 0;
   _recordingFramesLeft = _recordingFramesIn10MS;
 
@@ -1143,7 +1147,7 @@ int32_t AudioDeviceQnxALSA::StartRecording() {
     _recordingBuffer = new int8_t[_recordingBufferSizeIn10MS];
   if (!_recordingBuffer) {
     RTC_LOG(LS_ERROR) << "failed to alloc recording buffer";
-    _recording = false;
+    _recording.store(false, std::memory_order_relaxed);
     return -1;
   }
 
@@ -1188,24 +1192,29 @@ int32_t AudioDeviceQnxALSA::StartRecording() {
 }
 
 int32_t AudioDeviceQnxALSA::StopRecording() {
-  MutexLock lock(&mutex_);
   return StopRecordingLocked();
 }
 
 int32_t AudioDeviceQnxALSA::StopRecordingLocked() {
+  Lock();
   if (!_recIsInitialized) {
+    UnLock();
     return 0;
   }
 
   if (_handleRecord == NULL) {
+    UnLock();
     return -1;
   }
 
   // Make sure we don't start recording (it's asynchronous).
   _recIsInitialized = false;
-  _recording = false;
+  UnLock();
+  _recording.store(false, std::memory_order_relaxed);
+
 
   _ptrThreadRec.Finalize();
+  Lock();
 
   _recordingFramesLeft = 0;
   if (_recordingBuffer) {
@@ -1216,12 +1225,14 @@ int32_t AudioDeviceQnxALSA::StopRecordingLocked() {
   // Stop and close pcm recording device.
   int errVal = LATE(snd_pcm_drop)(_handleRecord);
   if (errVal < 0) {
+    UnLock();
     RTC_LOG(LS_ERROR) << "Error stop recording: " << LATE(snd_strerror)(errVal);
     return -1;
   }
 
   errVal = LATE(snd_pcm_close)(_handleRecord);
   if (errVal < 0) {
+    UnLock();
     RTC_LOG(LS_ERROR) << "Error closing record sound device, error: "
                       << LATE(snd_strerror)(errVal);
     return -1;
@@ -1236,6 +1247,7 @@ int32_t AudioDeviceQnxALSA::StopRecordingLocked() {
 
   // set the pcm input handle to NULL
   _handleRecord = NULL;
+  UnLock();
   return 0;
 }
 
@@ -1244,7 +1256,7 @@ bool AudioDeviceQnxALSA::RecordingIsInitialized() const {
 }
 
 bool AudioDeviceQnxALSA::Recording() const {
-  return (_recording);
+  return (_recording.load(std::memory_order_relaxed));
 }
 
 bool AudioDeviceQnxALSA::PlayoutIsInitialized() const {
@@ -1256,18 +1268,20 @@ int32_t AudioDeviceQnxALSA::StartPlayout() {
     return -1;
   }
 
-  if (_playing) {
+  bool expected = false;
+  auto success = _playing.compare_exchange_weak(
+      expected, true, std::memory_order_release, std::memory_order_relaxed);
+  if (!success) {
+    RTC_LOG(LS_WARNING) << "audio play is already in the playing state";
     return 0;
   }
 
-  _playing = true;
-
   _playoutFramesLeft = 0;
   if (!_playoutBuffer)
     _playoutBuffer = new int8_t[_playoutBufferSizeIn10MS];
   if (!_playoutBuffer) {
     RTC_LOG(LS_ERROR) << "failed to alloc playout buf";
-    _playing = false;
+    _playing.store(false, std::memory_order_relaxed);
     return -1;
   }
 
@@ -1311,23 +1325,27 @@ int32_t AudioDeviceQnxALSA::StartPlayout() {
 }
 
 int32_t AudioDeviceQnxALSA::StopPlayout() {
-  MutexLock lock(&mutex_);
   return StopPlayoutLocked();
 }
 
 int32_t AudioDeviceQnxALSA::StopPlayoutLocked() {
+  Lock();
   if (!_playIsInitialized) {
+    UnLock();
     return 0;
   }
 
   if (_handlePlayout == NULL) {
+    UnLock();
     return -1;
   }
 
-  _playing = false;
+  UnLock();
+  _playing.store(false, std::memory_order_relaxed);
 
   // stop playout thread first
   _ptrThreadPlay.Finalize();
+  Lock();
 
   _playoutFramesLeft = 0;
   delete[] _playoutBuffer;
@@ -1348,7 +1366,7 @@ int32_t AudioDeviceQnxALSA::StopPlayoutLocked() {
   _playIsInitialized = false;
   _handlePlayout = NULL;
   RTC_LOG(LS_VERBOSE) << "handle_playout is now set to NULL";
-
+  UnLock();
   return 0;
 }
 
@@ -1358,7 +1376,7 @@ int32_t AudioDeviceQnxALSA::PlayoutDelay(uint16_t& delayMS) const {
 }
 
 bool AudioDeviceQnxALSA::Playing() const {
-  return (_playing);
+  return (_playing.load(std::memory_order_relaxed));
 }
 
 // ============================================================================
@@ -1415,7 +1433,7 @@ int32_t AudioDeviceQnxALSA::GetDevicesInfo(const int32_t function,
       continue;
     void** hints;
     err = LATE(snd_device_name_hint)(card, "pcm", &hints);
-    if (err != 0) {
+    if (err != 0 || !hints) {
       RTC_LOG(LS_ERROR) << "GetDevicesInfo - device name hint error: "
                         << LATE(snd_strerror)(err);
       return -1;
@@ -1608,7 +1626,7 @@ int32_t AudioDeviceQnxALSA::ErrorRecovery(int32_t error,
     RTC_LOG(LS_VERBOSE) << "Recovery - snd_pcm_recover OK";
 
     if ((error == -EPIPE || error == -ESTRPIPE) &&  // Buf underrun/overrun.
-        _recording &&
+        _recording.load(std::memory_order_relaxed) &&
         LATE(snd_pcm_stream)(deviceHandle) == SND_PCM_STREAM_CAPTURE) {
       // For capture streams we also have to repeat the explicit start()
       // to get data flowing again.
@@ -1620,7 +1638,7 @@ int32_t AudioDeviceQnxALSA::ErrorRecovery(int32_t error,
     }
 
     if ((error == -EPIPE || error == -ESTRPIPE) &&  // Buf underrun/overrun.
-        _playing &&
+        _playing.load(std::memory_order_relaxed) &&
         LATE(snd_pcm_stream)(deviceHandle) == SND_PCM_STREAM_PLAYBACK) {
       // For capture streams we also have to repeat the explicit start() to get
       // data flowing again.
@@ -1645,7 +1663,7 @@ int32_t AudioDeviceQnxALSA::ErrorRecovery(int32_t error,
 // ============================================================================
 
 bool AudioDeviceQnxALSA::PlayThreadProcess() {
-  if (!_playing)
+  if (!_playing.load(std::memory_order_relaxed))
     return false;
 
   if (PcmStatus(_handlePlayout) == SND_PCM_STATE_XRUN) {
@@ -1667,12 +1685,13 @@ bool AudioDeviceQnxALSA::PlayThreadProcess() {
   avail_frames = LATE(snd_pcm_avail_update)(_handlePlayout);
 
   if (avail_frames < 0) {
+    UnLock();
     if (avail_frames != -EAGAIN) {
       RTC_LOG(LS_ERROR) << "playout snd_pcm_avail_update error: "
                         << LATE(snd_strerror)(avail_frames);
+      sched_yield();
       ErrorRecovery(avail_frames, _handlePlayout);
     }
-    UnLock();
     return true;
   } else if (avail_frames == 0) {
     UnLock();
@@ -1704,11 +1723,12 @@ bool AudioDeviceQnxALSA::PlayThreadProcess() {
       avail_frames);
 
   if (frames < 0) {
+    _playoutFramesLeft = 0;
+    UnLock();
     RTC_LOG(LS_VERBOSE) << "playout snd_pcm_writei error: "
                         << LATE(snd_strerror)(frames);
-    _playoutFramesLeft = 0;
+    sched_yield();
     ErrorRecovery(frames, _handlePlayout);
-    UnLock();
     return true;
   } else {
     RTC_DCHECK_EQ(frames, avail_frames);
@@ -1720,7 +1740,7 @@ bool AudioDeviceQnxALSA::PlayThreadProcess() {
 }
 
 bool AudioDeviceQnxALSA::RecThreadProcess() {
-  if (!_recording)
+  if (!_recording.load(std::memory_order_relaxed))
     return false;
 
   if (PcmStatus(_handleRecord) == SND_PCM_STATE_XRUN) {
@@ -1742,10 +1762,13 @@ bool AudioDeviceQnxALSA::RecThreadProcess() {
   // return a positive number of frames ready otherwise a negative error code
   avail_frames = LATE(snd_pcm_avail_update)(_handleRecord);
   if (avail_frames < 0) {
-    RTC_LOG(LS_ERROR) << "capture snd_pcm_avail_update error: "
-                      << LATE(snd_strerror)(avail_frames);
-    ErrorRecovery(avail_frames, _handleRecord);
     UnLock();
+    if (avail_frames != -EAGAIN) {
+      RTC_LOG(LS_ERROR) << "capture snd_pcm_avail_update error: "
+                        << LATE(snd_strerror)(avail_frames);
+      sched_yield();
+      ErrorRecovery(avail_frames, _handleRecord);
+    }
     return true;
   } else if (avail_frames == 0) {  // no frame is available now
     UnLock();
@@ -1764,12 +1787,13 @@ bool AudioDeviceQnxALSA::RecThreadProcess() {
   frames = LATE(snd_pcm_readi)(_handleRecord, buffer,
                                avail_frames);  // frames to be written
   if (frames < 0) {
+    UnLock();
     if (frames != -EAGAIN) {
       RTC_LOG(LS_ERROR) << "capture snd_pcm_readi error: "
                         << LATE(snd_strerror)(frames);
+      sched_yield();
       ErrorRecovery(frames, _handleRecord);
     }
-    UnLock();
     return true;
   } else if (frames > 0) {
     RTC_DCHECK_EQ(frames, avail_frames);
@@ -1842,7 +1866,7 @@ snd_pcm_state_t AudioDeviceQnxALSA::PcmStatus(snd_pcm_t* handle) {
   if (errVal < 0) {
     RTC_LOG(LS_ERROR) << "playout snd_pcm_status failed ("
                       << LATE(snd_strerror)(errVal) << ")\n";
-    return SND_PCM_STATE_PRIVATE1;
+    return SND_PCM_STATE_ERROR;
   }
   snd_pcm_state_t state = LATE(snd_pcm_status_get_state)(status);
   return state;
diff --git a/modules/audio_device/qnx/audio_device_alsa_snd_qnx.h b/modules/audio_device/qnx/audio_device_alsa_snd_qnx.h
index 0c7ad207c2..100d2722c4 100644
--- a/modules/audio_device/qnx/audio_device_alsa_snd_qnx.h
+++ b/modules/audio_device/qnx/audio_device_alsa_snd_qnx.h
@@ -233,8 +233,8 @@ class AudioDeviceQnxALSA : public AudioDeviceGeneric {
   uint32_t _playoutFramesLeft;
 
   bool _initialized;
-  bool _recording;
-  bool _playing;
+  std::atomic<bool> _recording;
+  std::atomic<bool> _playing;
   bool _recIsInitialized;
   bool _playIsInitialized;
 
-- 
2.34.1

