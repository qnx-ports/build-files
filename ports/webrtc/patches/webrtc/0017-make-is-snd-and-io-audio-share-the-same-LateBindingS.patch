From 86bccbfd31358d0215ab12deb5a63df4ef5c7449 Mon Sep 17 00:00:00 2001
From: Yongxin Dai <yodai@blackberry.com>
Date: Mon, 3 Mar 2025 09:20:54 -0500
Subject: [PATCH] make is-snd and io-audio share the same
 LateBindingSymbolTable

---
 modules/audio_device/BUILD.gn                 |   2 -
 .../qnx/alsasymboltable_snd_qnx.h             |   2 +-
 .../qnx/latebindingsymboltable_snd_qnx.cc     | 106 -----------
 .../qnx/latebindingsymboltable_snd_qnx.h      | 165 ------------------
 4 files changed, 1 insertion(+), 274 deletions(-)
 delete mode 100644 modules/audio_device/qnx/latebindingsymboltable_snd_qnx.cc
 delete mode 100644 modules/audio_device/qnx/latebindingsymboltable_snd_qnx.h

diff --git a/modules/audio_device/BUILD.gn b/modules/audio_device/BUILD.gn
index 60288a116b..7e834aac4b 100644
--- a/modules/audio_device/BUILD.gn
+++ b/modules/audio_device/BUILD.gn
@@ -403,8 +403,6 @@ rtc_library("audio_device_impl") {
             "qnx/audio_device_alsa_snd_qnx.h",
             "qnx/audio_mixer_manager_alsa_snd_qnx.cc",
             "qnx/audio_mixer_manager_alsa_snd_qnx.h",
-            "qnx/latebindingsymboltable_snd_qnx.cc",
-            "qnx/latebindingsymboltable_snd_qnx.h",
           ]
         } else {
           sources += [
diff --git a/modules/audio_device/qnx/alsasymboltable_snd_qnx.h b/modules/audio_device/qnx/alsasymboltable_snd_qnx.h
index 0698e7715c..5dce48d425 100644
--- a/modules/audio_device/qnx/alsasymboltable_snd_qnx.h
+++ b/modules/audio_device/qnx/alsasymboltable_snd_qnx.h
@@ -28,7 +28,7 @@
 #ifndef AUDIO_DEVICE_ALSASYMBOLTABLE_QNX_H_
 #define AUDIO_DEVICE_ALSASYMBOLTABLE_QNX_H_
 
-#include "modules/audio_device/qnx/latebindingsymboltable_snd_qnx.h"
+#include "modules/utility/source/late_binding_symbol_table_posix.h"
 
 namespace webrtc {
 namespace adm_qnx_alsa {
diff --git a/modules/audio_device/qnx/latebindingsymboltable_snd_qnx.cc b/modules/audio_device/qnx/latebindingsymboltable_snd_qnx.cc
deleted file mode 100644
index ea388bd6a9..0000000000
--- a/modules/audio_device/qnx/latebindingsymboltable_snd_qnx.cc
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- *  Copyright (c) 2024 The WebRTC project authors. All Rights Reserved.
- *
- *  Use of this source code is governed by a BSD-style license
- *  that can be found in the LICENSE file in the root of the source
- *  tree. An additional intellectual property rights grant can be found
- *  in the file PATENTS.  All contributing project authors may
- *  be found in the AUTHORS file in the root of the source tree.
- */
-
-#include "modules/audio_device/qnx/latebindingsymboltable_snd_qnx.h"
-
-#include "absl/strings/string_view.h"
-#include "rtc_base/logging.h"
-
-#ifdef WEBRTC_QNX
-#include <dlfcn.h>
-#endif
-
-namespace webrtc {
-namespace adm_qnx {
-
-inline static const char* GetDllError() {
-#ifdef WEBRTC_QNX
-  char* err = dlerror();
-  if (err) {
-    return err;
-  } else {
-    return "No error";
-  }
-#else
-#error Not implemented
-#endif
-}
-
-DllHandle InternalLoadDll(absl::string_view dll_name) {
-#ifdef WEBRTC_QNX
-  DllHandle handle = dlopen(std::string(dll_name).c_str(), RTLD_NOW);
-#else
-#error Not implemented
-#endif
-  if (handle == kInvalidDllHandle) {
-    RTC_LOG(LS_WARNING) << "Can't load " << dll_name << " : " << GetDllError();
-  }
-  return handle;
-}
-
-void InternalUnloadDll(DllHandle handle) {
-#ifdef WEBRTC_QNX
-// TODO(pbos): Remove this dlclose() exclusion when leaks and suppressions from
-// here are gone (or AddressSanitizer can display them properly).
-//
-// Skip dlclose() on AddressSanitizer as leaks including this module in the
-// stack trace gets displayed as <unknown module> instead of the actual library
-// -> it can not be suppressed.
-// https://code.google.com/p/address-sanitizer/issues/detail?id=89
-#if !defined(ADDRESS_SANITIZER)
-  if (dlclose(handle) != 0) {
-    RTC_LOG(LS_ERROR) << GetDllError();
-  }
-#endif  // !defined(ADDRESS_SANITIZER)
-#else
-#error Not implemented
-#endif
-}
-
-static bool LoadSymbol(DllHandle handle,
-                       absl::string_view symbol_name,
-                       void** symbol) {
-#ifdef WEBRTC_QNX
-  *symbol = dlsym(handle, std::string(symbol_name).c_str());
-  char* err = dlerror();
-  if (err) {
-    RTC_LOG(LS_ERROR) << "Error loading symbol " << symbol_name << " : " << err;
-    return false;
-  } else if (!*symbol) {
-    RTC_LOG(LS_ERROR) << "Symbol " << symbol_name << " is NULL";
-    return false;
-  }
-  return true;
-#else
-#error Not implemented
-#endif
-}
-
-// This routine MUST assign SOME value for every symbol, even if that value is
-// NULL, or else some symbols may be left with uninitialized data that the
-// caller may later interpret as a valid address.
-bool InternalLoadSymbols(DllHandle handle,
-                         int num_symbols,
-                         const char* const symbol_names[],
-                         void* symbols[]) {
-#ifdef WEBRTC_QNX
-  // Clear any old errors.
-  dlerror();
-#endif
-  for (int i = 0; i < num_symbols; ++i) {
-    if (!LoadSymbol(handle, symbol_names[i], &symbols[i])) {
-      return false;
-    }
-  }
-  return true;
-}
-
-}  // namespace adm_qnx
-}  // namespace webrtc
diff --git a/modules/audio_device/qnx/latebindingsymboltable_snd_qnx.h b/modules/audio_device/qnx/latebindingsymboltable_snd_qnx.h
deleted file mode 100644
index 04982afe3b..0000000000
--- a/modules/audio_device/qnx/latebindingsymboltable_snd_qnx.h
+++ /dev/null
@@ -1,165 +0,0 @@
-/*
- *  Copyright (c) 2010 The WebRTC project authors. All Rights Reserved.
- *
- *  Use of this source code is governed by a BSD-style license
- *  that can be found in the LICENSE file in the root of the source
- *  tree. An additional intellectual property rights grant can be found
- *  in the file PATENTS.  All contributing project authors may
- *  be found in the AUTHORS file in the root of the source tree.
- */
-
-#ifndef AUDIO_DEVICE_LATEBINDINGSYMBOLTABLE_QNX_H_
-#define AUDIO_DEVICE_LATEBINDINGSYMBOLTABLE_QNX_H_
-
-#include <stddef.h>  // for NULL
-#include <string.h>
-
-#include "absl/strings/string_view.h"
-#include "rtc_base/checks.h"
-
-// This file provides macros for creating "symbol table" classes to simplify the
-// dynamic loading of symbols from DLLs.
-namespace webrtc {
-namespace adm_qnx {
-
-#ifdef WEBRTC_QNX
-typedef void* DllHandle;
-
-const DllHandle kInvalidDllHandle = NULL;
-#else
-#error Not implemented
-#endif
-
-// These are helpers for use only by the class below.
-DllHandle InternalLoadDll(absl::string_view);
-
-void InternalUnloadDll(DllHandle handle);
-
-bool InternalLoadSymbols(DllHandle handle,
-                         int num_symbols,
-                         const char* const symbol_names[],
-                         void* symbols[]);
-
-template <int SYMBOL_TABLE_SIZE,
-          const char kDllName[],
-          const char* const kSymbolNames[]>
-class LateBindingSymbolTable {
- public:
-  LateBindingSymbolTable()
-      : handle_(kInvalidDllHandle), undefined_symbols_(false) {
-    memset(symbols_, 0, sizeof(symbols_));
-  }
-
-  ~LateBindingSymbolTable() { Unload(); }
-
-  LateBindingSymbolTable(const LateBindingSymbolTable&) = delete;
-  LateBindingSymbolTable& operator=(LateBindingSymbolTable&) = delete;
-
-  static int NumSymbols() { return SYMBOL_TABLE_SIZE; }
-
-  // We do not use this, but we offer it for theoretical convenience.
-  static const char* GetSymbolName(int index) {
-    RTC_DCHECK_LT(index, NumSymbols());
-    return kSymbolNames[index];
-  }
-
-  bool IsLoaded() const { return handle_ != kInvalidDllHandle; }
-
-  // Loads the DLL and the symbol table. Returns true iff the DLL and symbol
-  // table loaded successfully.
-  bool Load() {
-    if (IsLoaded()) {
-      return true;
-    }
-    if (undefined_symbols_) {
-      // We do not attempt to load again because repeated attempts are not
-      // likely to succeed and DLL loading is costly.
-      return false;
-    }
-    handle_ = InternalLoadDll(kDllName);
-    if (!IsLoaded()) {
-      return false;
-    }
-    if (!InternalLoadSymbols(handle_, NumSymbols(), kSymbolNames, symbols_)) {
-      undefined_symbols_ = true;
-      Unload();
-      return false;
-    }
-    return true;
-  }
-
-  void Unload() {
-    if (!IsLoaded()) {
-      return;
-    }
-    InternalUnloadDll(handle_);
-    handle_ = kInvalidDllHandle;
-    memset(symbols_, 0, sizeof(symbols_));
-  }
-
-  // Retrieves the given symbol. NOTE: Recommended to use LATESYM_GET below
-  // instead of this.
-  void* GetSymbol(int index) const {
-    RTC_DCHECK(IsLoaded());
-    RTC_DCHECK_LT(index, NumSymbols());
-    return symbols_[index];
-  }
-
- private:
-  DllHandle handle_;
-  bool undefined_symbols_;
-  void* symbols_[SYMBOL_TABLE_SIZE];
-};
-
-// This macro must be invoked in a header to declare a symbol table class.
-#define LATE_BINDING_SYMBOL_TABLE_DECLARE_BEGIN(ClassName) enum {
-// This macro must be invoked in the header declaration once for each symbol
-// (recommended to use an X-Macro to avoid duplication).
-// This macro defines an enum with names built from the symbols, which
-// essentially creates a hash table in the compiler from symbol names to their
-// indices in the symbol table class.
-#define LATE_BINDING_SYMBOL_TABLE_DECLARE_ENTRY(ClassName, sym) \
-  ClassName##_SYMBOL_TABLE_INDEX_##sym,
-
-// This macro completes the header declaration.
-#define LATE_BINDING_SYMBOL_TABLE_DECLARE_END(ClassName)       \
-  ClassName##_SYMBOL_TABLE_SIZE                                \
-  }                                                            \
-  ;                                                            \
-                                                               \
-  extern const char ClassName##_kDllName[];                    \
-  extern const char* const                                     \
-      ClassName##_kSymbolNames[ClassName##_SYMBOL_TABLE_SIZE]; \
-                                                               \
-  typedef ::webrtc::adm_qnx::LateBindingSymbolTable<         \
-      ClassName##_SYMBOL_TABLE_SIZE, ClassName##_kDllName,     \
-      ClassName##_kSymbolNames>                                \
-      ClassName;
-
-// This macro must be invoked in a .cc file to define a previously-declared
-// symbol table class.
-#define LATE_BINDING_SYMBOL_TABLE_DEFINE_BEGIN(ClassName, dllName) \
-  const char ClassName##_kDllName[] = dllName;                     \
-  const char* const ClassName##_kSymbolNames[ClassName##_SYMBOL_TABLE_SIZE] = {
-// This macro must be invoked in the .cc definition once for each symbol
-// (recommended to use an X-Macro to avoid duplication).
-// This would have to use the mangled name if we were to ever support C++
-// symbols.
-#define LATE_BINDING_SYMBOL_TABLE_DEFINE_ENTRY(ClassName, sym) #sym,
-
-#define LATE_BINDING_SYMBOL_TABLE_DEFINE_END(ClassName) \
-  }                                                     \
-  ;
-
-// Index of a given symbol in the given symbol table class.
-#define LATESYM_INDEXOF(ClassName, sym) (ClassName##_SYMBOL_TABLE_INDEX_##sym)
-
-// Returns a reference to the given late-binded symbol, with the correct type.
-#define LATESYM_GET(ClassName, inst, sym) \
-  (*reinterpret_cast<__typeof__(&sym)>(   \
-      (inst)->GetSymbol(LATESYM_INDEXOF(ClassName, sym))))
-
-}  // namespace adm_qnx
-}  // namespace webrtc
-
-#endif  // ADM_LATEBINDINGSYMBOLTABLE_QNX_H_
-- 
2.34.1

