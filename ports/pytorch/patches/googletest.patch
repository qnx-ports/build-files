diff --git a/googlemock/CMakeLists.txt b/googlemock/CMakeLists.txt
index e7df8ec5..efced555 100644
--- a/googlemock/CMakeLists.txt
+++ b/googlemock/CMakeLists.txt
@@ -109,12 +109,17 @@ endif()
 # to the targets for when we are part of a parent build (ie being pulled
 # in via add_subdirectory() rather than being a standalone build).
 if (DEFINED CMAKE_VERSION AND NOT "${CMAKE_VERSION}" VERSION_LESS "2.8.11")
-  target_include_directories(gmock SYSTEM INTERFACE
-    "$<BUILD_INTERFACE:${gmock_build_include_dirs}>"
-    "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>")
-  target_include_directories(gmock_main SYSTEM INTERFACE
-    "$<BUILD_INTERFACE:${gmock_build_include_dirs}>"
-    "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>")
+  if(QNX)
+    target_include_directories(gmock SYSTEM INTERFACE "$<BUILD_INTERFACE:${dirs}>")
+    target_include_directories(gmock_main SYSTEM INTERFACE "$<BUILD_INTERFACE:${dirs}>")
+  else()
+    target_include_directories(gmock SYSTEM INTERFACE
+      "$<BUILD_INTERFACE:${dirs}>"
+      "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>")
+    target_include_directories(gmock_main SYSTEM INTERFACE
+      "$<BUILD_INTERFACE:${dirs}>"
+      "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>")
+  endif()
 endif()
 
 ########################################################################
@@ -201,8 +206,13 @@ if (gmock_build_tests)
   # knowing more details about the system configurations. We do not try to run
   # this binary. To get a more robust shared library coverage, configure with
   # -DBUILD_SHARED_LIBS=ON.
-  cxx_executable_with_flags(shared_gmock_test_ "${cxx_default}"
-    shared_gmock_main test/gmock-spec-builders_test.cc)
+  if(QNX)
+    cxx_executable_with_flags(shared_gmock_test_ "${cxx_default}"
+      "shared_gmock_main;regex" test/gmock-spec-builders_test.cc)
+  else()
+    cxx_executable_with_flags(shared_gmock_test_ "${cxx_default}"
+      shared_gmock_main test/gmock-spec-builders_test.cc)
+  endif()
   set_target_properties(shared_gmock_test_
     PROPERTIES
     COMPILE_DEFINITIONS "GTEST_LINKED_AS_SHARED_LIBRARY=1")
@@ -215,4 +225,14 @@ if (gmock_build_tests)
 
   cxx_executable(gmock_output_test_ test gmock)
   py_test(gmock_output_test)
+
+  if(QNX)
+    install(DIRECTORY ${PROJECT_BINARY_DIR}/
+      DESTINATION bin/googletest_tests
+      PATTERN "Makefile" EXCLUDE
+      PATTERN "CMakeFiles" EXCLUDE
+      PATTERN "*.cmake" EXCLUDE
+      PATTERN "generated" EXCLUDE)
+  endif()
+
 endif()
diff --git a/googletest/CMakeLists.txt b/googletest/CMakeLists.txt
index abdd98b7..cdd7a162 100644
--- a/googletest/CMakeLists.txt
+++ b/googletest/CMakeLists.txt
@@ -130,18 +130,44 @@ include_directories(${gtest_build_include_dirs})
 # aggressive about warnings.
 cxx_library(gtest "${cxx_strict}" src/gtest-all.cc)
 set_target_properties(gtest PROPERTIES VERSION ${GOOGLETEST_VERSION})
+if(GTEST_HAS_ABSL)
+  target_compile_definitions(gtest PUBLIC GTEST_HAS_ABSL=1)
+  target_link_libraries(gtest PUBLIC
+    absl::failure_signal_handler
+    absl::stacktrace
+    absl::symbolize
+    absl::flags_parse
+    absl::flags_reflection
+    absl::flags_usage
+    absl::strings
+    absl::any
+    absl::optional
+    absl::variant
+    re2::re2
+  )
+endif()
 cxx_library(gtest_main "${cxx_strict}" src/gtest_main.cc)
 set_target_properties(gtest_main PROPERTIES VERSION ${GOOGLETEST_VERSION})
 # If the CMake version supports it, attach header directory information
 # to the targets for when we are part of a parent build (ie being pulled
 # in via add_subdirectory() rather than being a standalone build).
 if (DEFINED CMAKE_VERSION AND NOT "${CMAKE_VERSION}" VERSION_LESS "2.8.11")
-  target_include_directories(gtest SYSTEM INTERFACE
-    "$<BUILD_INTERFACE:${gtest_build_include_dirs}>"
-    "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>")
-  target_include_directories(gtest_main SYSTEM INTERFACE
-    "$<BUILD_INTERFACE:${gtest_build_include_dirs}>"
-    "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>")
+  if(QNX)
+    target_include_directories(gtest SYSTEM INTERFACE "$<BUILD_INTERFACE:${dirs}>")
+    target_include_directories(gtest_main SYSTEM INTERFACE "$<BUILD_INTERFACE:${dirs}>")
+  else()
+    target_include_directories(gtest SYSTEM INTERFACE
+      "$<BUILD_INTERFACE:${gtest_build_include_dirs}>"
+      "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>")
+    target_include_directories(gtest_main SYSTEM INTERFACE
+      "$<BUILD_INTERFACE:${gtest_build_include_dirs}>"
+      "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>")
+  endif()
+endif()
+if(CMAKE_SYSTEM_NAME MATCHES "QNX")
+  target_compile_options(gtest PRIVATE -Wno-error=array-bounds)
+  target_compile_options(gtest_main PRIVATE -Wno-error=array-bounds)
+  target_link_libraries(gtest PUBLIC regex)
 endif()
 target_link_libraries(gtest_main PUBLIC gtest)
 
@@ -239,14 +265,25 @@ if (gtest_build_tests)
     "${cxx_exception} -DGTEST_ENABLE_CATCH_EXCEPTIONS_=1"
     gtest test/googletest-death-test_ex_test.cc)
 
-  cxx_test_with_flags(gtest_no_rtti_unittest "${cxx_no_rtti}"
-    gtest_main_no_rtti test/gtest_unittest.cc)
+  if(QNX)
+    cxx_test_with_flags(gtest_no_rtti_unittest "${cxx_no_rtti}"
+      "gtest_main_no_rtti;regex" test/gtest_unittest.cc)
+  else()
+    cxx_test_with_flags(gtest_no_rtti_unittest "${cxx_no_rtti}"
+      gtest_main_no_rtti test/gtest_unittest.cc)
+  endif()
 
   cxx_shared_library(gtest_dll "${cxx_default}"
     src/gtest-all.cc src/gtest_main.cc)
 
-  cxx_executable_with_flags(gtest_dll_test_ "${cxx_default}"
-    gtest_dll test/gtest_all_test.cc)
+  if(QNX)
+    cxx_executable_with_flags(gtest_dll_test_ "${cxx_default}"
+      "gtest_dll;regex" test/gtest_all_test.cc)
+  else()
+    cxx_executable_with_flags(gtest_dll_test_ "${cxx_default}"
+      gtest_dll test/gtest_all_test.cc)
+  endif()
+
   set_target_properties(gtest_dll_test_
                         PROPERTIES
                         COMPILE_DEFINITIONS "GTEST_LINKED_AS_SHARED_LIBRARY=1")
@@ -262,11 +299,19 @@ if (gtest_build_tests)
 
   # Visual Studio .NET 2003 does not support STL with exceptions disabled.
   if (NOT MSVC OR MSVC_VERSION GREATER 1310)  # 1310 is Visual Studio .NET 2003
-    cxx_executable_with_flags(
-      googletest-catch-exceptions-no-ex-test_
-      "${cxx_no_exception}"
-      gtest_main_no_exception
-      test/googletest-catch-exceptions-test_.cc)
+    if(QNX)
+      cxx_executable_with_flags(
+        googletest-catch-exceptions-no-ex-test_
+        "${cxx_no_exception}"
+        "gtest_main_no_exception;regex"
+        test/googletest-catch-exceptions-test_.cc)
+    else()
+      cxx_executable_with_flags(
+        googletest-catch-exceptions-no-ex-test_
+        "${cxx_no_exception}"
+        gtest_main_no_exception
+        test/googletest-catch-exceptions-test_.cc)
+    endif()
   endif()
 
   cxx_executable_with_flags(
@@ -299,7 +344,11 @@ if (gtest_build_tests)
 
   # MSVC 7.1 does not support STL with exceptions disabled.
   if (NOT MSVC OR MSVC_VERSION GREATER 1310)
-    cxx_executable(googletest-throw-on-failure-test_ test gtest_no_exception)
+    if(QNX)
+      cxx_executable(googletest-throw-on-failure-test_ test "gtest_no_exception;regex")
+    else()
+      cxx_executable(googletest-throw-on-failure-test_ test gtest_no_exception)
+    endif()
     set_target_properties(googletest-throw-on-failure-test_
       PROPERTIES
       COMPILE_FLAGS "${cxx_no_exception}")
@@ -320,4 +369,13 @@ if (gtest_build_tests)
   cxx_executable(gtest_xml_output_unittest_ test gtest)
   py_test(gtest_xml_output_unittest --no_stacktrace_support)
   py_test(googletest-json-output-unittest --no_stacktrace_support)
+
+  if(QNX AND INSTALL_GTEST)
+    install(DIRECTORY ${PROJECT_BINARY_DIR}/
+      DESTINATION bin/googletest_tests
+      PATTERN "Makefile" EXCLUDE
+      PATTERN "CMakeFiles" EXCLUDE
+      PATTERN "*.cmake" EXCLUDE
+      PATTERN "generated" EXCLUDE)
+  endif()
 endif()
