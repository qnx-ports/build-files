diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9bcaa5816..5461c645e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -51,7 +51,7 @@ ENDIF()
 
 IF(NOT CMAKE_SYSTEM_NAME)
   MESSAGE(FATAL_ERROR "CMAKE_SYSTEM_NAME not defined")
-ELSEIF(NOT CMAKE_SYSTEM_NAME MATCHES "^(Darwin|Linux|Android|Windows)$")
+ELSEIF(NOT CMAKE_SYSTEM_NAME MATCHES "^(Darwin|Linux|Android|Windows|QNX)$")
   MESSAGE(FATAL_ERROR "Unrecognized CMAKE_SYSTEM_NAME = ${CMAKE_SYSTEM_NAME}")
 ENDIF()
 
@@ -1508,6 +1508,7 @@ ENDIF()
 SET_TARGET_PROPERTIES(XNNPACK PROPERTIES
   C_STANDARD 99
   C_EXTENSIONS YES)
+
 IF(CMAKE_SYSTEM_PROCESSOR MATCHES "^armv[5-8]" OR IOS_ARCH MATCHES "^armv7")
   SET_PROPERTY(SOURCE ${XNNPACK_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -marm ")
   SET_PROPERTY(SOURCE ${XNNPACK_PSIMD_FASTMATH_MICROKERNEL_SRCS} ${XNNPACK_PSIMD_ACCMATH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfpu=neon ")
@@ -1523,6 +1524,7 @@ IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" OR IOS_ARCH MATCHES "^arm64.*")
     SET_PROPERTY(SOURCE ${XNNPACK_AARCH64_ASM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -arch ${IOS_ARCH} ")
   ENDIF()
 ENDIF()
+
 IF(CMAKE_SYSTEM_PROCESSOR MATCHES "^(i[3-6]86|x86_64|AMD64)$" OR IOS_ARCH MATCHES "^(i386|x86_64|AMD64)$")
   SET_PROPERTY(SOURCE ${XNNPACK_SSE_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -msse ")
   SET_PROPERTY(SOURCE ${XNNPACK_SSE2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -msse2 ")
diff --git a/src/xnnpack/math.h b/src/xnnpack/math.h
index a1e12532c..20c17644d 100644
--- a/src/xnnpack/math.h
+++ b/src/xnnpack/math.h
@@ -14,6 +14,12 @@
 
 #include <xnnpack/common.h>
 
+// stdlib.h in QNX defines min and max macros which are redifined in project's math.h
+// including stdlib.h causes a conflict and a compilation error so min and max have to be undefined before redefining them here
+#ifdef __QNXNTO__
+  #undef min
+  #undef max
+#endif
 
 inline static size_t min(size_t a, size_t b) {
   return XNN_UNPREDICTABLE(b < a) ? b : a;
@@ -66,3 +72,4 @@ inline static float math_min_f32(float a, float b) {
 inline static float math_max_f32(float a, float b) {
   return XNN_UNPREDICTABLE(b < a) ? a : b;
 }
+
